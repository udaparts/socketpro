
#ifndef ___SOCKETPRO_CLIENSIDE_LOADER__H____
#define ___SOCKETPRO_CLIENSIDE_LOADER__H____

#include "uclient.h"

namespace SPA {
    namespace ClientSide {

        typedef unsigned int (WINAPI *PCreateSocketPool)(PSocketPoolCallback spc, unsigned int maxSocketsPerThread, unsigned int maxThreads, bool bAvg, tagThreadApartment ta);
        typedef bool (WINAPI *PDestroySocketPool)(unsigned int poolId);
        typedef USocket_Client_Handle(WINAPI *PFindAClosedSocket)(unsigned int poolId);
        typedef bool (WINAPI *PAddOneThreadIntoPool)(unsigned int poolId);
        typedef unsigned int (WINAPI *PGetLockedSockets)(unsigned int poolId);
        typedef unsigned int (WINAPI *PGetIdleSockets)(unsigned int poolId);
        typedef unsigned int (WINAPI *PGetConnectedSockets)(unsigned int poolId);
        typedef bool (WINAPI *PDisconnectAll)(unsigned int poolId);
        typedef USocket_Client_Handle(WINAPI *PLockASocket)(unsigned int poolId, unsigned int timeout, USocket_Client_Handle hSameThread);
        typedef bool (WINAPI *PUnlockASocket)(unsigned int poolId, USocket_Client_Handle h);
        typedef unsigned int (WINAPI *PGetSocketsPerThread)(unsigned int poolId);
        typedef bool (WINAPI *PIsAvg)(unsigned int poolId);
        typedef unsigned int (WINAPI *PGetDisconnectedSockets)(unsigned int poolId);
        typedef unsigned int (WINAPI *PGetThreadCount)(unsigned int poolId);
        typedef void (WINAPI *PClose)(USocket_Client_Handle h);
        typedef bool (WINAPI *PConnect)(USocket_Client_Handle h, const char* host, unsigned int portNumber, bool sync, bool v6);
        typedef unsigned int (WINAPI *PGetCountOfRequestsQueued)(USocket_Client_Handle h);
        typedef unsigned short (WINAPI *PGetCurrentRequestID)(USocket_Client_Handle h);
        typedef unsigned int (WINAPI *PGetCurrentResultSize)(USocket_Client_Handle h);
        typedef tagEncryptionMethod(WINAPI *PGetEncryptionMethod)(USocket_Client_Handle h);
        typedef int (WINAPI *PGetErrorCode)(USocket_Client_Handle h);
        typedef unsigned int (WINAPI *PGetErrorMessage)(USocket_Client_Handle h, char *str, unsigned int bufferLen);
        typedef unsigned int (WINAPI *PGetSocketPoolId)(USocket_Client_Handle h);
        typedef bool (WINAPI *PIsOpened)(USocket_Client_Handle h);
        typedef unsigned int (WINAPI *PRetrieveResult)(USocket_Client_Handle h, unsigned char *pBuffer, unsigned int size);
        typedef bool (WINAPI *PSendRequest)(USocket_Client_Handle h, unsigned short reqId, const unsigned char *pBuffer, unsigned int len);
        typedef void (WINAPI *PSetOnHandShakeCompleted)(USocket_Client_Handle h, POnHandShakeCompleted p);
        typedef void (WINAPI *PSetOnRequestProcessed)(USocket_Client_Handle h, POnRequestProcessed p);
        typedef void (WINAPI *PSetOnSocketClosed)(USocket_Client_Handle h, POnSocketClosed p);
        typedef void (WINAPI *PSetOnSocketConnected)(USocket_Client_Handle h, POnSocketConnected p);
        typedef void (WINAPI *PSetOnBaseRequestProcessed)(USocket_Client_Handle h, POnBaseRequestProcessed p);
        typedef void (WINAPI *PSetOnAllRequestsProcessed)(USocket_Client_Handle h, POnAllRequestsProcessed p);
        typedef bool (WINAPI *PWaitAll)(USocket_Client_Handle h, unsigned int nTimeout);
        typedef bool (WINAPI *PCancel)(USocket_Client_Handle h, unsigned int requestsQueued);
        typedef bool (WINAPI *PIsRandom)(USocket_Client_Handle h);
        typedef unsigned int (WINAPI *PGetBytesInSendingBuffer)(USocket_Client_Handle h);
        typedef unsigned int (WINAPI *PGetBytesInReceivingBuffer)(USocket_Client_Handle h);
        typedef bool (WINAPI *PIsBatching)(USocket_Client_Handle h);
        typedef unsigned int (WINAPI *PGetBytesBatched)(USocket_Client_Handle h);
        typedef bool (WINAPI *PStartBatching)(USocket_Client_Handle h);
        typedef bool (WINAPI *PCommitBatching)(USocket_Client_Handle h, bool batchingAtServerSide);
        typedef bool (WINAPI *PAbortBatching)(USocket_Client_Handle h);
        typedef UINT64(WINAPI *PGetBytesReceived)(USocket_Client_Handle h);
        typedef UINT64(WINAPI *PGetBytesSent)(USocket_Client_Handle h);
        typedef void (WINAPI *PSetUserID)(USocket_Client_Handle h, const wchar_t *userId);
        typedef unsigned int (WINAPI *PGetUID)(USocket_Client_Handle h, wchar_t *userId, unsigned int chars);
        typedef void (WINAPI *PSetPassword)(USocket_Client_Handle h, const wchar_t *password);
        typedef bool (WINAPI *PSwitchTo)(USocket_Client_Handle h, unsigned int serviceId);
        typedef bool (WINAPI *PEnter)(USocket_Client_Handle h, const unsigned int *pChatGroupId, unsigned int count);
        typedef void (WINAPI *PExit)(USocket_Client_Handle h);
        typedef bool (WINAPI *PSpeak)(USocket_Client_Handle h, const unsigned char *message, unsigned int size, const unsigned int *pChatGroupId, unsigned int count);
        typedef bool (WINAPI *PSpeakEx)(USocket_Client_Handle h, const unsigned char *message, unsigned int size, const unsigned int *pChatGroupId, unsigned int count);
        typedef bool (WINAPI *PSendUserMessage)(USocket_Client_Handle h, const wchar_t *userId, const unsigned char *message, unsigned int size);
        typedef bool (WINAPI *PSendUserMessageEx)(USocket_Client_Handle h, const wchar_t *userId, const unsigned char *message, unsigned int size);
        typedef UINT64(WINAPI *PGetSocketNativeHandle)(USocket_Client_Handle h);
        typedef void (WINAPI *PSetOnEnter)(USocket_Client_Handle h, POnEnter p);
        typedef void (WINAPI *PSetOnExit)(USocket_Client_Handle h, POnExit p);
        typedef void (WINAPI *PSetOnSpeakEx)(USocket_Client_Handle h, POnSpeakEx p);
        typedef void (WINAPI *PSetOnSendUserMessageEx)(USocket_Client_Handle h, POnSendUserMessageEx p);
        typedef tagOperationSystem(WINAPI *PGetPeerOs)(USocket_Client_Handle h, bool *endian);
        typedef void (WINAPI *PSetOnServerException)(USocket_Client_Handle h, POnServerException p);
        typedef void (WINAPI *PSetOnSendUserMessage)(USocket_Client_Handle h, POnSendUserMessage p);
        typedef void (WINAPI *PSetOnSpeak)(USocket_Client_Handle h, POnSpeak p);
        typedef void (WINAPI *PSetZip)(USocket_Client_Handle h, bool zip);
        typedef bool (WINAPI *PGetZip)(USocket_Client_Handle h);
        typedef tagZipLevel(WINAPI *PGetZipLevel)(USocket_Client_Handle h);
        typedef unsigned int (WINAPI *PGetCurrentServiceId)(USocket_Client_Handle h);
        typedef bool (WINAPI *PStartQueue)(USocket_Client_Handle h, const char *qName, bool secure, bool dequeueShared, unsigned int ttl);
        typedef void (WINAPI *PStopQueue)(USocket_Client_Handle h, bool permanent);
        typedef bool (WINAPI *PDequeuedResult)(USocket_Client_Handle h);
        typedef unsigned int (WINAPI *PGetMessagesInDequeuing)(USocket_Client_Handle h);
        typedef UINT64(WINAPI *PGetMessageCount)(USocket_Client_Handle h);
        typedef UINT64(WINAPI *PGetQueueSize)(USocket_Client_Handle h);
        typedef bool (WINAPI *PIsQueueSecured)(USocket_Client_Handle h);
        typedef bool (WINAPI *PIsQueueStarted)(USocket_Client_Handle h);
        typedef const char* (WINAPI *PGetQueueName)(USocket_Client_Handle h);
        typedef const char* (WINAPI *PGetQueueFileName)(USocket_Client_Handle h);
        typedef bool (WINAPI *PDoEcho)(USocket_Client_Handle h);
        typedef bool (WINAPI *PTurnOnZipAtSvr)(USocket_Client_Handle h, bool enableZip);
        typedef bool (WINAPI *PGetPeerName)(USocket_Client_Handle h, unsigned int *peerPort, char *ipAddr, unsigned short chars);
        typedef void (WINAPI *PSetRecvTimeout)(USocket_Client_Handle h, unsigned int timeout);
        typedef unsigned int (WINAPI *PGetRecvTimeout)(USocket_Client_Handle h);
        typedef void (WINAPI *PSetConnTimeout)(USocket_Client_Handle h, unsigned int timeout);
        typedef unsigned int (WINAPI *PGetConnTimeout)(USocket_Client_Handle h);
        typedef void (WINAPI *PSetAutoConn)(USocket_Client_Handle h, bool autoConnecting);
        typedef bool (WINAPI *PGetAutoConn)(USocket_Client_Handle h);
        typedef unsigned short (WINAPI *PGetServerPingTime)(USocket_Client_Handle h);
        typedef IUcert* (WINAPI *PGetUCertEx)(USocket_Client_Handle h);
        typedef void* (WINAPI *PGetSSL)(USocket_Client_Handle h);
        typedef bool (WINAPI *PIgnoreLastRequest)(USocket_Client_Handle h, unsigned short reqId);
        typedef bool (WINAPI *PSetVerifyLocation)(const char *certFile);
        typedef const char* (WINAPI *PVerify)(USocket_Client_Handle h, int *errCode);
        typedef bool (WINAPI *PIsDequeueEnabled)(USocket_Client_Handle h);
        typedef bool (WINAPI *PAbortJob)(USocket_Client_Handle h);
        typedef bool (WINAPI *PStartJob)(USocket_Client_Handle h);
        typedef bool (WINAPI *PEndJob)(USocket_Client_Handle h);
        typedef UINT64(WINAPI *PGetJobSize)(USocket_Client_Handle h);
        typedef bool (WINAPI *PIsRouteeRequest)(USocket_Client_Handle h);
        typedef bool (WINAPI *PSendRouteeResult)(USocket_Client_Handle h, unsigned short reqId, const unsigned char *buffer, unsigned int len);
        typedef unsigned int (WINAPI *PGetRouteeCount)(USocket_Client_Handle h);
        typedef UINT64(WINAPI *PAppendQueue)(USocket_Client_Handle h, USocket_Client_Handle hQueue);
        typedef UINT64(WINAPI *PGetQueueLastIndex) (USocket_Client_Handle h);
        typedef UINT64(WINAPI *PCancelQueuedRequestsByIndex)(USocket_Client_Handle h, UINT64 startIndex, UINT64 endIndex);
        typedef bool (WINAPI *PIsDequeueShared)(USocket_Client_Handle h);
        typedef tagQueueStatus(WINAPI *PGetClientQueueStatus)(USocket_Client_Handle h);
        typedef bool (WINAPI *PPushQueueTo)(USocket_Client_Handle src, const USocket_Client_Handle *targets, unsigned int count);
        typedef unsigned int (WINAPI *PGetTTL)(USocket_Client_Handle h);
        typedef UINT64(WINAPI *PRemoveQueuedRequestsByTTL)(USocket_Client_Handle h);
        typedef void (WINAPI *PResetQueue)(USocket_Client_Handle h);
        typedef bool (WINAPI *PIsClientQueueIndexPossiblyCrashed)();
        typedef void (WINAPI *PSetClientWorkDirectory)(const char *dir);
        typedef const char* (WINAPI *PGetClientWorkDirectory)();
        typedef unsigned int (WINAPI *PGetNumberOfSocketPools)();
        typedef UINT64(WINAPI *PGetLastQueueMessageTime)(USocket_Client_Handle h);
        typedef bool (WINAPI *PIsRouting)(USocket_Client_Handle h);
        typedef void (WINAPI *PAbortDequeuedMessage)(USocket_Client_Handle h);
        typedef bool (WINAPI *PIsDequeuedMessageAborted)(USocket_Client_Handle h);
        typedef void (WINAPI *PSetEncryptionMethod)(USocket_Client_Handle h, tagEncryptionMethod em);
        typedef void (WINAPI *PSetZipLevel)(USocket_Client_Handle h, tagZipLevel zl);
        typedef bool (WINAPI *PSetZipLevelAtSvr)(USocket_Client_Handle h, tagZipLevel zipLevel);
        typedef bool (WINAPI *PSetSockOpt)(USocket_Client_Handle h, tagSocketOption optName, int optValue, tagSocketLevel level);
        typedef bool (WINAPI *PSetSockOptAtSvr)(USocket_Client_Handle h, tagSocketOption optName, int optValue, tagSocketLevel level);
        typedef void (WINAPI *PShutdown)(USocket_Client_Handle h, tagShutdownType how);
        typedef const char* (WINAPI *PGetUClientSocketVersion)();
        typedef void (WINAPI *PSetMessageQueuePassword)(const char *pwd);
        typedef tagConnectionState(WINAPI *PGetConnectionState)(USocket_Client_Handle h);
        typedef void (WINAPI *PSetCertificateVerifyCallback)(PCertificateVerifyCallback cvc);
        typedef void (WINAPI *PEnableRoutingQueueIndex)(USocket_Client_Handle h, bool enable);
        typedef bool (WINAPI *PIsRoutingQueueIndexEnabled)(USocket_Client_Handle h);
        typedef const char* (WINAPI *PGetUClientAppName)();
        typedef void (WINAPI *PUseUTF16)();
        typedef tagOptimistic(WINAPI *PGetOptimistic)(USocket_Client_Handle h);
        typedef void (WINAPI *PSetOptimistic)(USocket_Client_Handle h, tagOptimistic optimistic);
        typedef const unsigned char* (WINAPI *PGetResultBuffer)(USocket_Client_Handle h);
        typedef bool (WINAPI *PGetQueueAutoMergeByPool)(unsigned int poolId);
        typedef void (WINAPI *PSetQueueAutoMergeByPool)(unsigned int poolId, bool autoMerge);
        typedef void (WINAPI *PSetOnPostProcessing)(USocket_Client_Handle h, POnPostProcessing p);
        typedef void (WINAPI *PPostProcessing)(USocket_Client_Handle h, unsigned int hint, SPA::UINT64 data);

        namespace Internal {

            class CClientCoreLoader {
            public:

                CClientCoreLoader() : m_hClientCore(nullptr) {
                    ::memset(this, 0, sizeof (CClientCoreLoader));
#ifdef WIN32_64
                    m_hClientCore = ::LoadLibraryW(L"usocket.dll");
#else
                    m_hClientCore = ::dlopen("libusocket.so", RTLD_LAZY);
#endif
                    if (!m_hClientCore) {
                        return;
                    }
#ifdef WINCE
                    CreateSocketPool = (PCreateSocketPool)::GetProcAddress(m_hClientCore, L"CreateSocketPool");
                    DestroySocketPool = (PDestroySocketPool)::GetProcAddress(m_hClientCore, L"DestroySocketPool");
                    FindAClosedSocket = (PFindAClosedSocket)::GetProcAddress(m_hClientCore, L"FindAClosedSocket");
                    AddOneThreadIntoPool = (PAddOneThreadIntoPool)::GetProcAddress(m_hClientCore, L"AddOneThreadIntoPool");
                    GetLockedSockets = (PGetLockedSockets)::GetProcAddress(m_hClientCore, L"GetLockedSockets");
                    GetIdleSockets = (PGetIdleSockets)::GetProcAddress(m_hClientCore, L"GetIdleSockets");
                    GetConnectedSockets = (PGetConnectedSockets)::GetProcAddress(m_hClientCore, L"GetConnectedSockets");
                    DisconnectAll = (PDisconnectAll)::GetProcAddress(m_hClientCore, L"DisconnectAll");
                    LockASocket = (PLockASocket)::GetProcAddress(m_hClientCore, L"LockASocket");
                    UnlockASocket = (PUnlockASocket)::GetProcAddress(m_hClientCore, L"UnlockASocket");
                    GetSocketsPerThread = (PGetSocketsPerThread)::GetProcAddress(m_hClientCore, L"GetSocketsPerThread");
                    IsAvg = (PIsAvg)::GetProcAddress(m_hClientCore, L"IsAvg");
                    GetDisconnectedSockets = (PGetDisconnectedSockets)::GetProcAddress(m_hClientCore, L"GetDisconnectedSockets");
                    GetThreadCount = (PGetThreadCount)::GetProcAddress(m_hClientCore, L"GetThreadCount");
                    Close = (PClose)::GetProcAddress(m_hClientCore, L"Close");
                    Connect = (PConnect)::GetProcAddress(m_hClientCore, L"Connect");
                    GetCountOfRequestsQueued = (PGetCountOfRequestsQueued)::GetProcAddress(m_hClientCore, L"GetCountOfRequestsQueued");
                    GetCurrentRequestID = (PGetCurrentRequestID)::GetProcAddress(m_hClientCore, L"GetCurrentRequestID");
                    GetCurrentResultSize = (PGetCurrentResultSize)::GetProcAddress(m_hClientCore, L"GetCurrentResultSize");
                    GetEncryptionMethod = (PGetEncryptionMethod)::GetProcAddress(m_hClientCore, L"GetEncryptionMethod");
                    GetErrorCode = (PGetErrorCode)::GetProcAddress(m_hClientCore, L"GetErrorCode");
                    GetErrorMessage = (PGetErrorMessage)::GetProcAddress(m_hClientCore, L"GetErrorMessage");
                    GetSocketPoolId = (PGetSocketPoolId)::GetProcAddress(m_hClientCore, L"GetSocketPoolId");
                    IsOpened = (PIsOpened)::GetProcAddress(m_hClientCore, L"IsOpened");
                    RetrieveResult = (PRetrieveResult)::GetProcAddress(m_hClientCore, L"RetrieveResult");
                    SendRequest = (PSendRequest)::GetProcAddress(m_hClientCore, L"SendRequest");
                    SetEncryptionMethod = (PSetEncryptionMethod)::GetProcAddress(m_hClientCore, L"SetEncryptionMethod");
                    SetOnHandShakeCompleted = (PSetOnHandShakeCompleted)::GetProcAddress(m_hClientCore, L"SetOnHandShakeCompleted");
                    SetOnRequestProcessed = (PSetOnRequestProcessed)::GetProcAddress(m_hClientCore, L"SetOnRequestProcessed");
                    SetOnSocketClosed = (PSetOnSocketClosed)::GetProcAddress(m_hClientCore, L"SetOnSocketClosed");
                    SetOnSocketConnected = (PSetOnSocketConnected)::GetProcAddress(m_hClientCore, L"SetOnSocketConnected");
                    SetOnBaseRequestProcessed = (PSetOnBaseRequestProcessed)::GetProcAddress(m_hClientCore, L"SetOnBaseRequestProcessed");
                    SetOnAllRequestsProcessed = (PSetOnAllRequestsProcessed)::GetProcAddress(m_hClientCore, L"SetOnAllRequestsProcessed");
                    Shutdown = (PShutdown)::GetProcAddress(m_hClientCore, L"Shutdown");
                    WaitAll = (PWaitAll)::GetProcAddress(m_hClientCore, L"WaitAll");
                    Cancel = (PCancel)::GetProcAddress(m_hClientCore, L"Cancel");
                    IsRandom = (PIsRandom)::GetProcAddress(m_hClientCore, L"IsRandom");
                    GetBytesInSendingBuffer = (PGetBytesInSendingBuffer)::GetProcAddress(m_hClientCore, L"GetBytesInSendingBuffer");
                    GetBytesInReceivingBuffer = (PGetBytesInReceivingBuffer)::GetProcAddress(m_hClientCore, L"GetBytesInReceivingBuffer");
                    IsBatching = (PIsBatching)::GetProcAddress(m_hClientCore, L"IsBatching");
                    GetBytesBatched = (PGetBytesBatched)::GetProcAddress(m_hClientCore, L"GetBytesBatched");
                    StartBatching = (PStartBatching)::GetProcAddress(m_hClientCore, L"StartBatching");
                    CommitBatching = (PCommitBatching)::GetProcAddress(m_hClientCore, L"CommitBatching");
                    AbortBatching = (PAbortBatching)::GetProcAddress(m_hClientCore, L"AbortBatching");
                    GetBytesReceived = (PGetBytesReceived)::GetProcAddress(m_hClientCore, L"GetBytesReceived");
                    GetBytesSent = (PGetBytesSent)::GetProcAddress(m_hClientCore, L"GetBytesSent");
                    SetUserID = (PSetUserID)::GetProcAddress(m_hClientCore, L"SetUserID");
                    GetUID = (PGetUID)::GetProcAddress(m_hClientCore, L"GetUID");
                    SetPassword = (PSetPassword)::GetProcAddress(m_hClientCore, L"SetPassword");
                    SwitchTo = (PSwitchTo)::GetProcAddress(m_hClientCore, L"SwitchTo");
                    Enter = (PEnter)::GetProcAddress(m_hClientCore, L"Enter");
                    Exit = (PExit)::GetProcAddress(m_hClientCore, L"Exit");
                    Speak = (PSpeak)::GetProcAddress(m_hClientCore, L"Speak");
                    SpeakEx = (PSpeakEx)::GetProcAddress(m_hClientCore, L"SpeakEx");
                    SendUserMessage = (PSendUserMessage)::GetProcAddress(m_hClientCore, L"SendUserMessage");
                    SendUserMessageEx = (PSendUserMessageEx)::GetProcAddress(m_hClientCore, L"SendUserMessageEx");
                    GetSocketNativeHandle = (PGetSocketNativeHandle)::GetProcAddress(m_hClientCore, L"GetSocketNativeHandle");
                    SetOnEnter = (PSetOnEnter)::GetProcAddress(m_hClientCore, L"SetOnEnter");
                    SetOnExit = (PSetOnExit)::GetProcAddress(m_hClientCore, L"SetOnExit");
                    SetOnSpeakEx = (PSetOnSpeakEx)::GetProcAddress(m_hClientCore, L"SetOnSpeakEx");
                    SetOnSendUserMessageEx = (PSetOnSendUserMessageEx)::GetProcAddress(m_hClientCore, L"SetOnSendUserMessageEx");
                    GetPeerOs = (PGetPeerOs)::GetProcAddress(m_hClientCore, L"GetPeerOs");
                    SetOnServerException = (PSetOnServerException)::GetProcAddress(m_hClientCore, L"SetOnServerException");
                    SetOnSendUserMessage = (PSetOnSendUserMessage)::GetProcAddress(m_hClientCore, L"SetOnSendUserMessage");
                    SetOnSpeak = (PSetOnSpeak)::GetProcAddress(m_hClientCore, L"SetOnSpeak");
                    SetZip = (PSetZip)::GetProcAddress(m_hClientCore, L"SetZip");
                    GetZip = (PGetZip)::GetProcAddress(m_hClientCore, L"GetZip");
                    SetZipLevel = (PSetZipLevel)::GetProcAddress(m_hClientCore, L"SetZipLevel");
                    GetZipLevel = (PGetZipLevel)::GetProcAddress(m_hClientCore, L"GetZipLevel");
                    GetCurrentServiceId = (PGetCurrentServiceId)::GetProcAddress(m_hClientCore, L"GetCurrentServiceId");
                    StartQueue = (PStartQueue)::GetProcAddress(m_hClientCore, L"StartQueue");
                    StopQueue = (PStopQueue)::GetProcAddress(m_hClientCore, L"StopQueue");
                    DequeuedResult = (PDequeuedResult)::GetProcAddress(m_hClientCore, L"DequeuedResult");
                    GetMessagesInDequeuing = (PGetMessagesInDequeuing)::GetProcAddress(m_hClientCore, L"GetMessagesInDequeuing");
                    GetMessageCount = (PGetMessageCount)::GetProcAddress(m_hClientCore, L"GetMessageCount");
                    GetQueueSize = (PGetQueueSize)::GetProcAddress(m_hClientCore, L"GetQueueSize");
                    IsQueueSecured = (PIsQueueSecured)::GetProcAddress(m_hClientCore, L"IsQueueSecured");
                    IsQueueStarted = (PIsQueueStarted)::GetProcAddress(m_hClientCore, L"IsQueueStarted");
                    GetQueueName = (PGetQueueName)::GetProcAddress(m_hClientCore, L"GetQueueName");
                    GetQueueFileName = (PGetQueueFileName)::GetProcAddress(m_hClientCore, L"GetQueueFileName");
                    DoEcho = (PDoEcho)::GetProcAddress(m_hClientCore, L"DoEcho");
                    SetSockOpt = (PSetSockOpt)::GetProcAddress(m_hClientCore, L"SetSockOpt");
                    SetSockOptAtSvr = (PSetSockOptAtSvr)::GetProcAddress(m_hClientCore, L"SetSockOptAtSvr");
                    TurnOnZipAtSvr = (PTurnOnZipAtSvr)::GetProcAddress(m_hClientCore, L"TurnOnZipAtSvr");
                    SetZipLevelAtSvr = (PSetZipLevelAtSvr)::GetProcAddress(m_hClientCore, L"SetZipLevelAtSvr");
                    GetPeerName = (PGetPeerName)::GetProcAddress(m_hClientCore, L"GetPeerName");
                    SetRecvTimeout = (PSetRecvTimeout)::GetProcAddress(m_hClientCore, L"SetRecvTimeout");
                    GetRecvTimeout = (PGetRecvTimeout)::GetProcAddress(m_hClientCore, L"GetRecvTimeout");
                    SetConnTimeout = (PSetConnTimeout)::GetProcAddress(m_hClientCore, L"SetConnTimeout");
                    GetConnTimeout = (PGetConnTimeout)::GetProcAddress(m_hClientCore, L"GetConnTimeout");
                    SetAutoConn = (PSetAutoConn)::GetProcAddress(m_hClientCore, L"SetAutoConn");
                    GetAutoConn = (PGetAutoConn)::GetProcAddress(m_hClientCore, L"GetAutoConn");
                    GetServerPingTime = (PGetServerPingTime)::GetProcAddress(m_hClientCore, L"GetServerPingTime");
                    GetUCertEx = (PGetUCertEx)::GetProcAddress(m_hClientCore, L"GetUCertEx");
                    GetSSL = (PGetSSL)::GetProcAddress(m_hClientCore, L"GetSSL");
                    IgnoreLastRequest = (PIgnoreLastRequest)::GetProcAddress(m_hClientCore, L"IgnoreLastRequest");
                    SetVerifyLocation = (PSetVerifyLocation)::GetProcAddress(m_hClientCore, L"SetVerifyLocation");
                    Verify = (PVerify)::GetProcAddress(m_hClientCore, L"Verify");
                    IsDequeueEnabled = (PIsDequeueEnabled)::GetProcAddress(m_hClientCore, L"IsDequeueEnabled");
                    AbortJob = (PAbortJob)::GetProcAddress(m_hClientCore, L"AbortJob");
                    StartJob = (PStartJob)::GetProcAddress(m_hClientCore, L"StartJob");
                    EndJob = (PEndJob)::GetProcAddress(m_hClientCore, L"EndJob");
                    GetJobSize = (PGetJobSize)::GetProcAddress(m_hClientCore, L"GetJobSize");
                    IsRouteeRequest = (PIsRouteeRequest)::GetProcAddress(m_hClientCore, L"IsRouteeRequest");
                    SendRouteeResult = (PSendRouteeResult)::GetProcAddress(m_hClientCore, L"SendRouteeResult");
                    GetRouteeCount = (PGetRouteeCount)::GetProcAddress(m_hClientCore, L"GetRouteeCount");
                    GetQueueLastIndex = (PGetQueueLastIndex)::GetProcAddress(m_hClientCore, L"GetQueueLastIndex");
                    CancelQueuedRequestsByIndex = (PCancelQueuedRequestsByIndex)::GetProcAddress(m_hClientCore, L"CancelQueuedRequestsByIndex");
                    IsDequeueShared = (PIsDequeueShared)::GetProcAddress(m_hClientCore, L"IsDequeueShared");
                    GetClientQueueStatus = (PGetClientQueueStatus)::GetProcAddress(m_hClientCore, L"GetClientQueueStatus");
                    PushQueueTo = (PPushQueueTo)::GetProcAddress(m_hClientCore, L"PushQueueTo");
                    GetTTL = (PGetTTL)::GetProcAddress(m_hClientCore, L"GetTTL");
                    RemoveQueuedRequestsByTTL = (PRemoveQueuedRequestsByTTL)::GetProcAddress(m_hClientCore, L"RemoveQueuedRequestsByTTL");
                    ResetQueue = (PResetQueue)::GetProcAddress(m_hClientCore, L"ResetQueue");
                    IsClientQueueIndexPossiblyCrashed = (PIsClientQueueIndexPossiblyCrashed)::GetProcAddress(m_hClientCore, L"IsClientQueueIndexPossiblyCrashed");
                    SetClientWorkDirectory = (PSetClientWorkDirectory)::GetProcAddress(m_hClientCore, L"SetClientWorkDirectory");
                    GetClientWorkDirectory = (PGetClientWorkDirectory)::GetProcAddress(m_hClientCore, L"GetClientWorkDirectory");
                    GetNumberOfSocketPools = (PGetNumberOfSocketPools)::GetProcAddress(m_hClientCore, L"GetNumberOfSocketPools");
                    GetLastQueueMessageTime = (PGetLastQueueMessageTime)::GetProcAddress(m_hClientCore, L"GetLastQueueMessageTime");
                    IsRouting = (PIsRouting)::GetProcAddress(m_hClientCore, L"IsRouting");
                    AbortDequeuedMessage = (PAbortDequeuedMessage)::GetProcAddress(m_hClientCore, L"AbortDequeuedMessage");
                    IsDequeuedMessageAborted = (PIsDequeuedMessageAborted)::GetProcAddress(m_hClientCore, L"IsDequeuedMessageAborted");
                    GetUClientSocketVersion = (PGetUClientSocketVersion)::GetProcAddress(m_hClientCore, L"GetUClientSocketVersion");
                    SetMessageQueuePassword = (PSetMessageQueuePassword)::GetProcAddress(m_hClientCore, L"SetMessageQueuePassword");
                    GetConnectionState = (PGetConnectionState)::GetProcAddress(m_hClientCore, L"GetConnectionState");
                    SetCertificateVerifyCallback = (PSetCertificateVerifyCallback)::GetProcAddress(m_hClientCore, L"SetCertificateVerifyCallback");
                    EnableRoutingQueueIndex = (PEnableRoutingQueueIndex)::GetProcAddress(m_hClientCore, L"EnableRoutingQueueIndex");
                    IsRoutingQueueIndexEnabled = (PIsRoutingQueueIndexEnabled)::GetProcAddress(m_hClientCore, L"IsRoutingQueueIndexEnabled");
                    GetUClientAppName = (PGetUClientAppName)::GetProcAddress(m_hClientCore, L"GetUClientAppName");
                    UseUTF16 = (PUseUTF16)::GetProcAddress(m_hClientCore, L"UseUTF16");
                    GetOptimistic = (PGetOptimistic)::GetProcAddress(m_hClientCore, L"GetOptimistic");
                    SetOptimistic = (PSetOptimistic)::GetProcAddress(m_hClientCore, L"SetOptimistic");
                    GetResultBuffer = (PGetResultBuffer)::GetProcAddress(m_hClientCore, L"GetResultBuffer");
                    SetLastCallInfo = (PSetLastCallInfo)::GetProcAddress(m_hClientCore, L"SetLastCallInfo");
                    GetQueueAutoMergeByPool = (PGetQueueAutoMergeByPool)::GetProcAddress(m_hClientCore, L"GetQueueAutoMergeByPool");
                    SetQueueAutoMergeByPool = (PSetQueueAutoMergeByPool)::GetProcAddress(m_hClientCore, L"SetQueueAutoMergeByPool");
                    SetOnPostProcessing = (PSetOnPostProcessing)::GetProcAddress(m_hClientCore, L"SetOnPostProcessing");
                    PostProcessing = (PPostProcessing)::GetProcAddress(m_hClientCore, L"PostProcessing");
#else
                    CreateSocketPool = (PCreateSocketPool)::GetProcAddress(m_hClientCore, "CreateSocketPool");
                    DestroySocketPool = (PDestroySocketPool)::GetProcAddress(m_hClientCore, "DestroySocketPool");
                    FindAClosedSocket = (PFindAClosedSocket)::GetProcAddress(m_hClientCore, "FindAClosedSocket");
                    AddOneThreadIntoPool = (PAddOneThreadIntoPool)::GetProcAddress(m_hClientCore, "AddOneThreadIntoPool");
                    GetLockedSockets = (PGetLockedSockets)::GetProcAddress(m_hClientCore, "GetLockedSockets");
                    GetIdleSockets = (PGetIdleSockets)::GetProcAddress(m_hClientCore, "GetIdleSockets");
                    GetConnectedSockets = (PGetConnectedSockets)::GetProcAddress(m_hClientCore, "GetConnectedSockets");
                    DisconnectAll = (PDisconnectAll)::GetProcAddress(m_hClientCore, "DisconnectAll");
                    LockASocket = (PLockASocket)::GetProcAddress(m_hClientCore, "LockASocket");
                    UnlockASocket = (PUnlockASocket)::GetProcAddress(m_hClientCore, "UnlockASocket");
                    GetSocketsPerThread = (PGetSocketsPerThread)::GetProcAddress(m_hClientCore, "GetSocketsPerThread");
                    IsAvg = (PIsAvg)::GetProcAddress(m_hClientCore, "IsAvg");
                    GetDisconnectedSockets = (PGetDisconnectedSockets)::GetProcAddress(m_hClientCore, "GetDisconnectedSockets");
                    GetThreadCount = (PGetThreadCount)::GetProcAddress(m_hClientCore, "GetThreadCount");
                    Close = (PClose)::GetProcAddress(m_hClientCore, "Close");
                    Connect = (PConnect)::GetProcAddress(m_hClientCore, "Connect");
                    GetCountOfRequestsQueued = (PGetCountOfRequestsQueued)::GetProcAddress(m_hClientCore, "GetCountOfRequestsQueued");
                    GetCurrentRequestID = (PGetCurrentRequestID)::GetProcAddress(m_hClientCore, "GetCurrentRequestID");
                    GetCurrentResultSize = (PGetCurrentResultSize)::GetProcAddress(m_hClientCore, "GetCurrentResultSize");
                    GetEncryptionMethod = (PGetEncryptionMethod)::GetProcAddress(m_hClientCore, "GetEncryptionMethod");
                    GetErrorCode = (PGetErrorCode)::GetProcAddress(m_hClientCore, "GetErrorCode");
                    GetErrorMessage = (PGetErrorMessage)::GetProcAddress(m_hClientCore, "GetErrorMessage");
                    GetSocketPoolId = (PGetSocketPoolId)::GetProcAddress(m_hClientCore, "GetSocketPoolId");
                    IsOpened = (PIsOpened)::GetProcAddress(m_hClientCore, "IsOpened");
                    RetrieveResult = (PRetrieveResult)::GetProcAddress(m_hClientCore, "RetrieveResult");
                    SendRequest = (PSendRequest)::GetProcAddress(m_hClientCore, "SendRequest");
                    SetEncryptionMethod = (PSetEncryptionMethod)::GetProcAddress(m_hClientCore, "SetEncryptionMethod");
                    SetOnHandShakeCompleted = (PSetOnHandShakeCompleted)::GetProcAddress(m_hClientCore, "SetOnHandShakeCompleted");
                    SetOnRequestProcessed = (PSetOnRequestProcessed)::GetProcAddress(m_hClientCore, "SetOnRequestProcessed");
                    SetOnSocketClosed = (PSetOnSocketClosed)::GetProcAddress(m_hClientCore, "SetOnSocketClosed");
                    SetOnSocketConnected = (PSetOnSocketConnected)::GetProcAddress(m_hClientCore, "SetOnSocketConnected");
                    SetOnBaseRequestProcessed = (PSetOnBaseRequestProcessed)::GetProcAddress(m_hClientCore, "SetOnBaseRequestProcessed");
                    SetOnAllRequestsProcessed = (PSetOnAllRequestsProcessed)::GetProcAddress(m_hClientCore, "SetOnAllRequestsProcessed");
                    Shutdown = (PShutdown)::GetProcAddress(m_hClientCore, "Shutdown");
                    WaitAll = (PWaitAll)::GetProcAddress(m_hClientCore, "WaitAll");
                    Cancel = (PCancel)::GetProcAddress(m_hClientCore, "Cancel");
                    IsRandom = (PIsRandom)::GetProcAddress(m_hClientCore, "IsRandom");
                    GetBytesInSendingBuffer = (PGetBytesInSendingBuffer)::GetProcAddress(m_hClientCore, "GetBytesInSendingBuffer");
                    GetBytesInReceivingBuffer = (PGetBytesInReceivingBuffer)::GetProcAddress(m_hClientCore, "GetBytesInReceivingBuffer");
                    IsBatching = (PIsBatching)::GetProcAddress(m_hClientCore, "IsBatching");
                    GetBytesBatched = (PGetBytesBatched)::GetProcAddress(m_hClientCore, "GetBytesBatched");
                    StartBatching = (PStartBatching)::GetProcAddress(m_hClientCore, "StartBatching");
                    CommitBatching = (PCommitBatching)::GetProcAddress(m_hClientCore, "CommitBatching");
                    AbortBatching = (PAbortBatching)::GetProcAddress(m_hClientCore, "AbortBatching");
                    GetBytesReceived = (PGetBytesReceived)::GetProcAddress(m_hClientCore, "GetBytesReceived");
                    GetBytesSent = (PGetBytesSent)::GetProcAddress(m_hClientCore, "GetBytesSent");
                    SetUserID = (PSetUserID)::GetProcAddress(m_hClientCore, "SetUserID");
                    GetUID = (PGetUID)::GetProcAddress(m_hClientCore, "GetUID");
                    SetPassword = (PSetPassword)::GetProcAddress(m_hClientCore, "SetPassword");
                    SwitchTo = (PSwitchTo)::GetProcAddress(m_hClientCore, "SwitchTo");
                    Enter = (PEnter)::GetProcAddress(m_hClientCore, "Enter");
                    Exit = (PExit)::GetProcAddress(m_hClientCore, "Exit");
                    Speak = (PSpeak)::GetProcAddress(m_hClientCore, "Speak");
                    SpeakEx = (PSpeakEx)::GetProcAddress(m_hClientCore, "SpeakEx");
                    SendUserMessage = (PSendUserMessage)::GetProcAddress(m_hClientCore, "SendUserMessage");
                    SendUserMessageEx = (PSendUserMessageEx)::GetProcAddress(m_hClientCore, "SendUserMessageEx");
                    GetSocketNativeHandle = (PGetSocketNativeHandle)::GetProcAddress(m_hClientCore, "GetSocketNativeHandle");
                    SetOnEnter = (PSetOnEnter)::GetProcAddress(m_hClientCore, "SetOnEnter");
                    SetOnExit = (PSetOnExit)::GetProcAddress(m_hClientCore, "SetOnExit");
                    SetOnSpeakEx = (PSetOnSpeakEx)::GetProcAddress(m_hClientCore, "SetOnSpeakEx");
                    SetOnSendUserMessageEx = (PSetOnSendUserMessageEx)::GetProcAddress(m_hClientCore, "SetOnSendUserMessageEx");
                    GetPeerOs = (PGetPeerOs)::GetProcAddress(m_hClientCore, "GetPeerOs");
                    SetOnServerException = (PSetOnServerException)::GetProcAddress(m_hClientCore, "SetOnServerException");
                    SetOnSendUserMessage = (PSetOnSendUserMessage)::GetProcAddress(m_hClientCore, "SetOnSendUserMessage");
                    SetOnSpeak = (PSetOnSpeak)::GetProcAddress(m_hClientCore, "SetOnSpeak");
                    SetZip = (PSetZip)::GetProcAddress(m_hClientCore, "SetZip");
                    GetZip = (PGetZip)::GetProcAddress(m_hClientCore, "GetZip");
                    SetZipLevel = (PSetZipLevel)::GetProcAddress(m_hClientCore, "SetZipLevel");
                    GetZipLevel = (PGetZipLevel)::GetProcAddress(m_hClientCore, "GetZipLevel");
                    GetCurrentServiceId = (PGetCurrentServiceId)::GetProcAddress(m_hClientCore, "GetCurrentServiceId");
                    StartQueue = (PStartQueue)::GetProcAddress(m_hClientCore, "StartQueue");
                    StopQueue = (PStopQueue)::GetProcAddress(m_hClientCore, "StopQueue");
                    DequeuedResult = (PDequeuedResult)::GetProcAddress(m_hClientCore, "DequeuedResult");
                    GetMessagesInDequeuing = (PGetMessagesInDequeuing)::GetProcAddress(m_hClientCore, "GetMessagesInDequeuing");
                    GetMessageCount = (PGetMessageCount)::GetProcAddress(m_hClientCore, "GetMessageCount");
                    GetQueueSize = (PGetQueueSize)::GetProcAddress(m_hClientCore, "GetQueueSize");
                    IsQueueSecured = (PIsQueueSecured)::GetProcAddress(m_hClientCore, "IsQueueSecured");
                    IsQueueStarted = (PIsQueueStarted)::GetProcAddress(m_hClientCore, "IsQueueStarted");
                    GetQueueName = (PGetQueueName)::GetProcAddress(m_hClientCore, "GetQueueName");
                    GetQueueFileName = (PGetQueueFileName)::GetProcAddress(m_hClientCore, "GetQueueFileName");
                    DoEcho = (PDoEcho)::GetProcAddress(m_hClientCore, "DoEcho");
                    SetSockOpt = (PSetSockOpt)::GetProcAddress(m_hClientCore, "SetSockOpt");
                    SetSockOptAtSvr = (PSetSockOptAtSvr)::GetProcAddress(m_hClientCore, "SetSockOptAtSvr");
                    TurnOnZipAtSvr = (PTurnOnZipAtSvr)::GetProcAddress(m_hClientCore, "TurnOnZipAtSvr");
                    SetZipLevelAtSvr = (PSetZipLevelAtSvr)::GetProcAddress(m_hClientCore, "SetZipLevelAtSvr");
                    GetPeerName = (PGetPeerName)::GetProcAddress(m_hClientCore, "GetPeerName");
                    SetRecvTimeout = (PSetRecvTimeout)::GetProcAddress(m_hClientCore, "SetRecvTimeout");
                    GetRecvTimeout = (PGetRecvTimeout)::GetProcAddress(m_hClientCore, "GetRecvTimeout");
                    SetConnTimeout = (PSetConnTimeout)::GetProcAddress(m_hClientCore, "SetConnTimeout");
                    GetConnTimeout = (PGetConnTimeout)::GetProcAddress(m_hClientCore, "GetConnTimeout");
                    SetAutoConn = (PSetAutoConn)::GetProcAddress(m_hClientCore, "SetAutoConn");
                    GetAutoConn = (PGetAutoConn)::GetProcAddress(m_hClientCore, "GetAutoConn");
                    GetServerPingTime = (PGetServerPingTime)::GetProcAddress(m_hClientCore, "GetServerPingTime");
                    GetUCertEx = (PGetUCertEx)::GetProcAddress(m_hClientCore, "GetUCertEx");
                    GetSSL = (PGetSSL)::GetProcAddress(m_hClientCore, "GetSSL");
                    IgnoreLastRequest = (PIgnoreLastRequest)::GetProcAddress(m_hClientCore, "IgnoreLastRequest");
                    SetVerifyLocation = (PSetVerifyLocation)::GetProcAddress(m_hClientCore, "SetVerifyLocation");
                    Verify = (PVerify)::GetProcAddress(m_hClientCore, "Verify");
                    IsDequeueEnabled = (PIsDequeueEnabled)::GetProcAddress(m_hClientCore, "IsDequeueEnabled");
                    AbortJob = (PAbortJob)::GetProcAddress(m_hClientCore, "AbortJob");
                    StartJob = (PStartJob)::GetProcAddress(m_hClientCore, "StartJob");
                    EndJob = (PEndJob)::GetProcAddress(m_hClientCore, "EndJob");
                    GetJobSize = (PGetJobSize)::GetProcAddress(m_hClientCore, "GetJobSize");
                    IsRouteeRequest = (PIsRouteeRequest)::GetProcAddress(m_hClientCore, "IsRouteeRequest");
                    SendRouteeResult = (PSendRouteeResult)::GetProcAddress(m_hClientCore, "SendRouteeResult");
                    GetRouteeCount = (PGetRouteeCount)::GetProcAddress(m_hClientCore, "GetRouteeCount");
                    GetQueueLastIndex = (PGetQueueLastIndex)::GetProcAddress(m_hClientCore, "GetQueueLastIndex");
                    CancelQueuedRequestsByIndex = (PCancelQueuedRequestsByIndex)::GetProcAddress(m_hClientCore, "CancelQueuedRequestsByIndex");
                    IsDequeueShared = (PIsDequeueShared)::GetProcAddress(m_hClientCore, "IsDequeueShared");
                    GetClientQueueStatus = (PGetClientQueueStatus)::GetProcAddress(m_hClientCore, "GetClientQueueStatus");
                    PushQueueTo = (PPushQueueTo)::GetProcAddress(m_hClientCore, "PushQueueTo");
                    GetTTL = (PGetTTL)::GetProcAddress(m_hClientCore, "GetTTL");
                    RemoveQueuedRequestsByTTL = (PRemoveQueuedRequestsByTTL)::GetProcAddress(m_hClientCore, "RemoveQueuedRequestsByTTL");
                    ResetQueue = (PResetQueue)::GetProcAddress(m_hClientCore, "ResetQueue");
                    IsClientQueueIndexPossiblyCrashed = (PIsClientQueueIndexPossiblyCrashed)::GetProcAddress(m_hClientCore, "IsClientQueueIndexPossiblyCrashed");
                    SetClientWorkDirectory = (PSetClientWorkDirectory)::GetProcAddress(m_hClientCore, "SetClientWorkDirectory");
                    GetClientWorkDirectory = (PGetClientWorkDirectory)::GetProcAddress(m_hClientCore, "GetClientWorkDirectory");
                    GetNumberOfSocketPools = (PGetNumberOfSocketPools)::GetProcAddress(m_hClientCore, "GetNumberOfSocketPools");
                    GetLastQueueMessageTime = (PGetLastQueueMessageTime)::GetProcAddress(m_hClientCore, "GetLastQueueMessageTime");
                    IsRouting = (PIsRouting)::GetProcAddress(m_hClientCore, "IsRouting");
                    AbortDequeuedMessage = (PAbortDequeuedMessage)::GetProcAddress(m_hClientCore, "AbortDequeuedMessage");
                    IsDequeuedMessageAborted = (PIsDequeuedMessageAborted)::GetProcAddress(m_hClientCore, "IsDequeuedMessageAborted");
                    GetUClientSocketVersion = (PGetUClientSocketVersion)::GetProcAddress(m_hClientCore, "GetUClientSocketVersion");
                    SetMessageQueuePassword = (PSetMessageQueuePassword)::GetProcAddress(m_hClientCore, "SetMessageQueuePassword");
                    GetConnectionState = (PGetConnectionState)::GetProcAddress(m_hClientCore, "GetConnectionState");
                    SetCertificateVerifyCallback = (PSetCertificateVerifyCallback)::GetProcAddress(m_hClientCore, "SetCertificateVerifyCallback");
                    EnableRoutingQueueIndex = (PEnableRoutingQueueIndex)::GetProcAddress(m_hClientCore, "EnableRoutingQueueIndex");
                    IsRoutingQueueIndexEnabled = (PIsRoutingQueueIndexEnabled)::GetProcAddress(m_hClientCore, "IsRoutingQueueIndexEnabled");
                    GetUClientAppName = (PGetUClientAppName)::GetProcAddress(m_hClientCore, "GetUClientAppName");
                    UseUTF16 = (PUseUTF16)::GetProcAddress(m_hClientCore, "UseUTF16");
                    GetOptimistic = (PGetOptimistic)::GetProcAddress(m_hClientCore, "GetOptimistic");
                    SetOptimistic = (PSetOptimistic)::GetProcAddress(m_hClientCore, "SetOptimistic");
                    GetResultBuffer = (PGetResultBuffer)::GetProcAddress(m_hClientCore, "GetResultBuffer");
                    SetLastCallInfo = (PSetLastCallInfo)::GetProcAddress(m_hClientCore, "SetLastCallInfo");
                    GetQueueAutoMergeByPool = (PGetQueueAutoMergeByPool)::GetProcAddress(m_hClientCore, "GetQueueAutoMergeByPool");
                    SetQueueAutoMergeByPool = (PSetQueueAutoMergeByPool)::GetProcAddress(m_hClientCore, "SetQueueAutoMergeByPool");
                    SetOnPostProcessing = (PSetOnPostProcessing)::GetProcAddress(m_hClientCore, "SetOnPostProcessing");
                    PostProcessing = (PPostProcessing)::GetProcAddress(m_hClientCore, "PostProcessing");
#endif
                }

                ~CClientCoreLoader() {
                    //if (m_hClientCore)
                    //    ::FreeLibrary(m_hClientCore);
                }

            public:
                PCreateSocketPool CreateSocketPool;
                PDestroySocketPool DestroySocketPool;
                PFindAClosedSocket FindAClosedSocket;
                PAddOneThreadIntoPool AddOneThreadIntoPool;
                PGetLockedSockets GetLockedSockets;
                PGetIdleSockets GetIdleSockets;
                PGetConnectedSockets GetConnectedSockets;
                PDisconnectAll DisconnectAll;
                PLockASocket LockASocket;
                PUnlockASocket UnlockASocket;
                PGetSocketsPerThread GetSocketsPerThread;
                PIsAvg IsAvg;
                PGetDisconnectedSockets GetDisconnectedSockets;
                PGetThreadCount GetThreadCount;
                PClose Close;
                PConnect Connect;
                PGetCountOfRequestsQueued GetCountOfRequestsQueued;
                PGetCurrentRequestID GetCurrentRequestID;
                PGetCurrentResultSize GetCurrentResultSize;
                PGetEncryptionMethod GetEncryptionMethod;
                PGetErrorCode GetErrorCode;
                PGetErrorMessage GetErrorMessage;
                PGetSocketPoolId GetSocketPoolId;
                PIsOpened IsOpened;
                PRetrieveResult RetrieveResult;
                PSendRequest SendRequest;
                PSetEncryptionMethod SetEncryptionMethod;
                PSetOnHandShakeCompleted SetOnHandShakeCompleted;
                PSetOnRequestProcessed SetOnRequestProcessed;
                PSetOnSocketClosed SetOnSocketClosed;
                PSetOnSocketConnected SetOnSocketConnected;
                PSetOnBaseRequestProcessed SetOnBaseRequestProcessed;
                PSetOnAllRequestsProcessed SetOnAllRequestsProcessed;
                PShutdown Shutdown;
                PWaitAll WaitAll;
                PCancel Cancel;
                PIsRandom IsRandom;
                PGetBytesInSendingBuffer GetBytesInSendingBuffer;
                PGetBytesInReceivingBuffer GetBytesInReceivingBuffer;
                PIsBatching IsBatching;
                PGetBytesBatched GetBytesBatched;
                PStartBatching StartBatching;
                PCommitBatching CommitBatching;
                PAbortBatching AbortBatching;
                PGetBytesReceived GetBytesReceived;
                PGetBytesSent GetBytesSent;
                PSetUserID SetUserID;
                PGetUID GetUID;
                PSetPassword SetPassword;
                PSwitchTo SwitchTo;
                PEnter Enter;
                PExit Exit;
                PSpeak Speak;
                PSpeakEx SpeakEx;
                PSendUserMessage SendUserMessage;
                PSendUserMessageEx SendUserMessageEx;
                PGetSocketNativeHandle GetSocketNativeHandle;
                PSetOnEnter SetOnEnter;
                PSetOnExit SetOnExit;
                PSetOnSpeakEx SetOnSpeakEx;
                PSetOnSendUserMessageEx SetOnSendUserMessageEx;
                PGetPeerOs GetPeerOs;
                PSetOnServerException SetOnServerException;
                PSetOnSendUserMessage SetOnSendUserMessage;
                PSetOnSpeak SetOnSpeak;
                PSetZip SetZip;
                PGetZip GetZip;
                PSetZipLevel SetZipLevel;
                PGetZipLevel GetZipLevel;
                PGetCurrentServiceId GetCurrentServiceId;
                PStartQueue StartQueue;
                PStopQueue StopQueue;
                PDequeuedResult DequeuedResult;
                PGetMessagesInDequeuing GetMessagesInDequeuing;
                PGetMessageCount GetMessageCount;
                PGetQueueSize GetQueueSize;
                PIsQueueSecured IsQueueSecured;
                PIsQueueStarted IsQueueStarted;
                PGetQueueName GetQueueName;
                PGetQueueFileName GetQueueFileName;
                PDoEcho DoEcho;
                PSetSockOpt SetSockOpt;
                PSetSockOptAtSvr SetSockOptAtSvr;
                PTurnOnZipAtSvr TurnOnZipAtSvr;
                PSetZipLevelAtSvr SetZipLevelAtSvr;
                PGetPeerName GetPeerName;
                PSetRecvTimeout SetRecvTimeout;
                PGetRecvTimeout GetRecvTimeout;
                PSetConnTimeout SetConnTimeout;
                PGetConnTimeout GetConnTimeout;
                PSetAutoConn SetAutoConn;
                PGetAutoConn GetAutoConn;
                PGetServerPingTime GetServerPingTime;
                PGetUCertEx GetUCertEx;
                PGetSSL GetSSL;
                PIgnoreLastRequest IgnoreLastRequest;
                PSetVerifyLocation SetVerifyLocation;
                PVerify Verify;
                PIsDequeueEnabled IsDequeueEnabled;
                PAbortJob AbortJob;
                PStartJob StartJob;
                PEndJob EndJob;
                PGetJobSize GetJobSize;
                PIsRouteeRequest IsRouteeRequest;
                PSendRouteeResult SendRouteeResult;
                PGetRouteeCount GetRouteeCount;
                PGetQueueLastIndex GetQueueLastIndex;
                PCancelQueuedRequestsByIndex CancelQueuedRequestsByIndex;
                PIsDequeueShared IsDequeueShared;
                PGetClientQueueStatus GetClientQueueStatus;
                PPushQueueTo PushQueueTo;
                PGetTTL GetTTL;
                PRemoveQueuedRequestsByTTL RemoveQueuedRequestsByTTL;
                PResetQueue ResetQueue;
                PIsClientQueueIndexPossiblyCrashed IsClientQueueIndexPossiblyCrashed;
                PSetClientWorkDirectory SetClientWorkDirectory;
                PGetClientWorkDirectory GetClientWorkDirectory;
                PGetNumberOfSocketPools GetNumberOfSocketPools;
                PGetLastQueueMessageTime GetLastQueueMessageTime;
                PIsRouting IsRouting;
                PAbortDequeuedMessage AbortDequeuedMessage;
                PIsDequeuedMessageAborted IsDequeuedMessageAborted;
                PGetUClientSocketVersion GetUClientSocketVersion;
                PSetMessageQueuePassword SetMessageQueuePassword;
                PGetConnectionState GetConnectionState;
                PSetCertificateVerifyCallback SetCertificateVerifyCallback;
                PEnableRoutingQueueIndex EnableRoutingQueueIndex;
                PIsRoutingQueueIndexEnabled IsRoutingQueueIndexEnabled;
                PGetUClientAppName GetUClientAppName;
                PUseUTF16 UseUTF16;
                PGetOptimistic GetOptimistic;
                PSetOptimistic SetOptimistic;
                PGetResultBuffer GetResultBuffer;
                PSetLastCallInfo SetLastCallInfo;
                PGetQueueAutoMergeByPool GetQueueAutoMergeByPool;
                PSetQueueAutoMergeByPool SetQueueAutoMergeByPool;
                PSetOnPostProcessing SetOnPostProcessing;
                PPostProcessing PostProcessing;

            public:

                bool IsLoaded() {
                    return (nullptr != m_hClientCore);
                }

            private:
                CClientCoreLoader(const CClientCoreLoader &ccl);
                CClientCoreLoader& operator=(const CClientCoreLoader &ccl);
                HINSTANCE m_hClientCore;
            };
        } //namespace Internal
        extern Internal::CClientCoreLoader ClientCoreLoader;
    } //namespace ClientSide
} //namespace SPA

#endif
