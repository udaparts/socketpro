
#ifndef ___SOCKETPRO_SERVERSIDE_LOADER__H____
#define ___SOCKETPRO_SERVERSIDE_LOADER__H____

#include "server_functions.h"

namespace SPA {
    namespace ServerSide {

        typedef bool (WINAPI *PInitSocketProServer) (int param);
        typedef void (WINAPI *PUninitSocketProServer) ();
        typedef bool (WINAPI *PStartSocketProServer) (unsigned int listeningPort, unsigned int maxBacklog, bool v6);
        typedef void (WINAPI *PStopSocketProServer) ();
        typedef bool (WINAPI *PIsCanceled) (USocket_Server_Handle Handler);
        typedef bool (WINAPI *PIsRunning) ();
        typedef void (WINAPI *PSetAuthenticationMethod) (tagAuthenticationMethod am);
        typedef tagAuthenticationMethod(WINAPI *PGetAuthenticationMethod) ();
        typedef void (WINAPI *PSetSharedAM) (bool b);
        typedef bool (WINAPI *PGetSharedAM) ();
        typedef unsigned int (WINAPI *PGetListeningSocket) ();
        typedef void (WINAPI *PPostQuitPump) ();
        typedef bool (WINAPI *PIsMainThread) ();
        typedef bool (WINAPI *PAddSvsContext) (unsigned int serviceId, CSvsContext svsContext); //ta ignored on non-window platforms
        typedef void (WINAPI *PRemoveASvsContext) (unsigned int serviceId);
        typedef CSvsContext(WINAPI *PGetSvsContext) (unsigned int serviceId);
        typedef bool (WINAPI *PAddSlowRequest) (unsigned int serviceId, unsigned short requestId);
        typedef void (WINAPI *PRemoveSlowRequest) (unsigned int serviceId, unsigned short requestId);
        typedef unsigned int (WINAPI *PGetCountOfServices) ();
        typedef unsigned int (WINAPI *PGetServices) (unsigned int *serviceIds, unsigned int count);
        typedef unsigned int (WINAPI *PGetCountOfSlowRequests) (unsigned int serviceId);
        typedef void (WINAPI *PRemoveAllSlowRequests) (unsigned int serviceId);
        typedef unsigned int (WINAPI *PGetAllSlowRequestIds) (unsigned int serviceId, unsigned short *requestIds, unsigned int count);
        typedef HINSTANCE(WINAPI *PAddADll) (const char *libFile, int nParam);
        typedef bool (WINAPI *PRemoveADllByHandle) (HINSTANCE hInstance);
        typedef void (WINAPI *PSetPrivateKeyFile) (const char *keyFile);
        typedef void (WINAPI *PSetCertFile) (const char *certFile);
        typedef void (WINAPI *PSetDHParmsFile) (const char *dhFile);
        typedef void (WINAPI *PSetPKFPassword) (const char *pwd);
        typedef void (WINAPI *PSetDefaultEncryptionMethod) (tagEncryptionMethod em);
        typedef tagEncryptionMethod(WINAPI *PGetDefaultEncryptionMethod) ();
        typedef void (WINAPI *PSetPfxFile) (const char *pfxFile);
        typedef int (WINAPI *PGetServerErrorCode) ();
        typedef unsigned int (WINAPI *PGetServerErrorMessage) (char *str, unsigned int bufferLen);
        typedef bool (WINAPI *PIsServerRunning) ();
        typedef bool (WINAPI *PIsServerSSLEnabled) ();
        typedef void (WINAPI *PSetOnAccept) (POnAccept p);
        typedef void (WINAPI *PClose) (USocket_Server_Handle h);
        typedef unsigned short (WINAPI *PGetCurrentRequestID) (USocket_Server_Handle h);
        typedef unsigned int (WINAPI *PGetCurrentRequestLen) (USocket_Server_Handle h);
        typedef unsigned int (WINAPI *PGetRcvBytesInQueue) (USocket_Server_Handle h);
        typedef unsigned int (WINAPI *PGetSndBytesInQueue) (USocket_Server_Handle h);
        typedef void (WINAPI *PPostClose) (USocket_Server_Handle h, int errCode);
        typedef unsigned int (WINAPI *PQueryRequestsInQueue) (USocket_Server_Handle h);
        typedef unsigned int (WINAPI *PRetrieveBuffer) (USocket_Server_Handle h, unsigned int bufferSize, unsigned char *buffer, bool peek);
        typedef void (WINAPI *PSetOnSSLHandShakeCompleted) (POnSSLHandShakeCompleted p);
        typedef void (WINAPI *PSetOnClose) (POnClose p);
        typedef void (WINAPI *PSetOnIdle) (POnIdle p);
        typedef bool (WINAPI *PIsOpened) (USocket_Server_Handle h);
        typedef UINT64(WINAPI *PGetBytesReceived) (USocket_Server_Handle h);
        typedef UINT64(WINAPI *PGetBytesSent) (USocket_Server_Handle h);
        typedef unsigned int (WINAPI *PSendReturnData) (USocket_Server_Handle h, unsigned short requestId, unsigned int bufferSize, const unsigned char *buffer);
        typedef unsigned int (WINAPI *PGetSvsID) (USocket_Server_Handle h);
        typedef int (WINAPI *PGetServerSocketErrorCode) (USocket_Server_Handle h);
        typedef unsigned int (WINAPI *PGetServerSocketErrorMessage) (USocket_Server_Handle h, char *str, unsigned int bufferLen);
        typedef bool (WINAPI *PIsBatching) (USocket_Server_Handle h);
        typedef unsigned int (WINAPI *PGetBytesBatched) (USocket_Server_Handle h);
        typedef bool (WINAPI *PStartBatching) (USocket_Server_Handle h);
        typedef bool (WINAPI *PCommitBatching) (USocket_Server_Handle h);
        typedef bool (WINAPI *PAbortBatching) (USocket_Server_Handle h);
        typedef bool (WINAPI *PSetUserID) (USocket_Server_Handle h, const wchar_t *userId);
        typedef unsigned int (WINAPI *PGetUID) (USocket_Server_Handle h, wchar_t *userId, unsigned int chars);
        typedef bool (WINAPI *PSetPassword) (USocket_Server_Handle h, const wchar_t *password);
        typedef unsigned int (WINAPI *PGetPassword) (USocket_Server_Handle h, wchar_t *password, unsigned int chars);
        typedef void (WINAPI *PSetOnIsPermitted) (POnIsPermitted p);
        typedef bool (WINAPI *PEnter) (USocket_Server_Handle h, const unsigned int *chatGroupIds, unsigned int count);
        typedef void (WINAPI *PExit) (USocket_Server_Handle h);
        typedef bool (WINAPI *PSpeak) (USocket_Server_Handle h, const unsigned char *message, unsigned int size, const unsigned int *chatGroupIds, unsigned int count);
        typedef bool (WINAPI *PSpeakEx) (USocket_Server_Handle h, const unsigned char *message, unsigned int size, const unsigned int *chatGroupIds, unsigned int count);
        typedef bool (WINAPI *PSendUserMessageEx) (USocket_Server_Handle h, const wchar_t *userId, const unsigned char *message, unsigned int size);
        typedef bool (WINAPI *PSendUserMessage) (USocket_Server_Handle h, const wchar_t *userId, const unsigned char *message, unsigned int size);
        typedef unsigned int (WINAPI *PGetCountOfJoinedChatGroups) (USocket_Server_Handle h);
        typedef unsigned int (WINAPI *PGetJoinedGroupIds) (USocket_Server_Handle h, unsigned int *chatGroups, unsigned int count);
        typedef bool (WINAPI *PGetPeerName) (USocket_Server_Handle h, unsigned int *peerPort, char *strPeerAddr, unsigned short chars);
        typedef unsigned int (WINAPI *PGetLocalName) (char *localName, unsigned short chars);
        typedef bool (WINAPI *PHasUserId) (const wchar_t *userId);
        typedef void (WINAPI *PDropCurrentSlowRequest) (USocket_Server_Handle h);
        typedef void (WINAPI *PAddAChatGroup) (unsigned int chatGroupId, const wchar_t *description);
        typedef unsigned int (WINAPI *PGetCountOfChatGroups) ();
        typedef unsigned int (WINAPI *PGetAllCreatedChatGroups) (unsigned int *chatGroupIds, unsigned int count);
        typedef unsigned int (WINAPI *PGetAChatGroup) (unsigned int chatGroupId, wchar_t *description, unsigned int chars);
        typedef void (WINAPI *PRemoveChatGroup) (unsigned int chatGroupId);
        typedef UINT64(WINAPI *PGetSocketNativeHandle) (USocket_Server_Handle h);
        typedef tagOperationSystem(WINAPI *PGetPeerOs) (USocket_Server_Handle handler, bool *endian);
        typedef unsigned int (WINAPI *PSendExceptionResult) (USocket_Server_Handle handler, const wchar_t* errMessage, const char* errWhere, unsigned short requestId, unsigned int errCode);
        typedef bool (WINAPI *PMakeRequest) (USocket_Server_Handle handler, unsigned short requestId, const unsigned char *request, unsigned int size);
        typedef unsigned int (WINAPI *PGetHTTPRequestHeaders) (USocket_Server_Handle h, CHttpHeaderValue *HeaderValue, unsigned int count);
        typedef const char* (WINAPI *PGetHTTPPath) (USocket_Server_Handle h);
        typedef UINT64(WINAPI *PGetHTTPContentLength) (USocket_Server_Handle h);
        typedef const char* (WINAPI *PGetHTTPQuery) (USocket_Server_Handle h);
        typedef bool (WINAPI *PDownloadFile) (USocket_Server_Handle handler, const char *filePath);
        typedef tagHttpMethod(WINAPI *PGetHTTPMethod) (USocket_Server_Handle h);
        typedef bool (WINAPI *PHTTPKeepAlive) (USocket_Server_Handle h);
        typedef bool (WINAPI *PIsWebSocket) (USocket_Server_Handle h);
        typedef bool (WINAPI *PIsCrossDomain) (USocket_Server_Handle h);
        typedef double (WINAPI *PGetHTTPVersion) (USocket_Server_Handle h);
        typedef bool (WINAPI *PHTTPGZipAccepted) (USocket_Server_Handle h);
        typedef const char* (WINAPI *PGetHTTPUrl) (USocket_Server_Handle h);
        typedef const char* (WINAPI *PGetHTTPHost) (USocket_Server_Handle h);
        typedef tagTransport(WINAPI *PGetHTTPTransport) (USocket_Server_Handle h);
        typedef tagTransferEncoding(WINAPI *PGetHTTPTransferEncoding) (USocket_Server_Handle h);
        typedef tagContentMultiplax(WINAPI *PGetHTTPContentMultiplax) (USocket_Server_Handle h);
        typedef bool (WINAPI *PSetHTTPResponseCode) (USocket_Server_Handle h, unsigned int errCode);
        typedef bool (WINAPI *PSetHTTPResponseHeader) (USocket_Server_Handle h, const char *uft8Header, const char *utf8Value);
        typedef unsigned int (WINAPI *PSendHTTPReturnDataA) (USocket_Server_Handle h, const char *str, unsigned int chars);
        typedef unsigned int (WINAPI *PSendHTTPReturnDataW) (USocket_Server_Handle h, const wchar_t *str, unsigned int chars);
        typedef const char* (WINAPI *PGetHTTPId) (USocket_Server_Handle h);
        typedef unsigned int (WINAPI *PGetHTTPCurrentMultiplaxHeaders) (USocket_Server_Handle h, CHttpHeaderValue *HeaderValue, unsigned int count);
        typedef void* (WINAPI *PGetSSL) (USocket_Server_Handle h);
        typedef bool (WINAPI *PGetReturnRandom) (unsigned int serviceId);
        typedef void (WINAPI *PSetReturnRandom) (unsigned int serviceId, bool random);
        typedef unsigned int (WINAPI *PGetSwitchTime) ();
        typedef void (WINAPI *PSetSwitchTime) (unsigned int switchTime);
        typedef unsigned int (WINAPI *PGetCountOfClients) ();
        typedef USocket_Server_Handle(WINAPI *PGetClient) (unsigned int index);
        typedef void (WINAPI *PSetDefaultZip) (bool zip);
        typedef bool (WINAPI *PGetDefaultZip) ();
        typedef void (WINAPI *PSetMaxConnectionsPerClient) (unsigned int maxConnectionsPerClient);
        typedef unsigned int (WINAPI *PGetMaxConnectionsPerClient) ();
        typedef void (WINAPI *PSetMaxThreadIdleTimeBeforeSuicide) (unsigned int maxThreadIdleTimeBeforeSuicide);
        typedef unsigned int (WINAPI *PGetMaxThreadIdleTimeBeforeSuicide) ();
        typedef void (WINAPI *PSetTimerElapse) (unsigned int timerElapse);
        typedef unsigned int (WINAPI *PGetTimerElapse) ();
        typedef unsigned int (WINAPI *PGetSMInterval) ();
        typedef void (WINAPI *PSetSMInterval) (unsigned int SMInterval);
        typedef void (WINAPI *PSetPingInterval) (unsigned int pingInterval);
        typedef unsigned int (WINAPI *PGetPingInterval) ();
        typedef void (WINAPI *PSetRecycleGlobalMemoryInterval) (unsigned int recycleGlobalMemoryInterval);
        typedef unsigned int (WINAPI *PGetRecycleGlobalMemoryInterval) ();
        typedef UINT64(WINAPI *PGetRequestCount) ();
        typedef unsigned int (WINAPI *PStartHTTPChunkResponse) (USocket_Server_Handle h);
        typedef unsigned int (WINAPI *PSendHTTPChunk) (USocket_Server_Handle h, const unsigned char *buffer, unsigned int len);
        typedef unsigned int (WINAPI *PEndHTTPChunkResponse) (USocket_Server_Handle h, const unsigned char *buffer, unsigned int len);
        typedef bool (WINAPI *PIsFakeRequest) (USocket_Server_Handle h);
        typedef bool (WINAPI *PSetZip) (USocket_Server_Handle h, bool bZip);
        typedef bool (WINAPI *PGetZip) (USocket_Server_Handle h);
        typedef void (WINAPI *PSetZipLevel) (USocket_Server_Handle h, tagZipLevel zl);
        typedef tagZipLevel(WINAPI *PGetZipLevel) (USocket_Server_Handle h);
        typedef unsigned int (WINAPI *PStartQueue) (const char *qName, bool dequeueShared, unsigned int ttl);
        typedef unsigned int (WINAPI *PGetMessagesInDequeuing) (unsigned int qHandle);
        typedef UINT64(WINAPI *PEnqueue) (unsigned int qHandle, unsigned short reqId, const unsigned char *buffer, unsigned int size);
        typedef UINT64(WINAPI *PGetMessageCount) (unsigned int qHandle);
        typedef bool (WINAPI *PStopQueueByHandle) (unsigned int qHandle, bool permanent);
        typedef bool (WINAPI *PStopQueueByName) (const char *qName, bool permanent);
        typedef UINT64(WINAPI *PGetQueueSize) (unsigned int qHandle);
        typedef UINT64(WINAPI *PDequeue) (unsigned int qHandle, USocket_Server_Handle h, unsigned int messageCount, bool beNotifiedWhenAvailable, unsigned int waitTime);
        typedef bool (WINAPI *PIsQueueStartedByName) (const char *qName);
        typedef bool (WINAPI *PIsQueueStartedByHandle) (unsigned int qHandle);
        typedef bool (WINAPI *PIsQueueSecuredByName) (const char *qName);
        typedef bool (WINAPI *PIsQueueSecuredByHandle) (unsigned int qHandle);
        typedef const char* (WINAPI *PGetQueueName) (unsigned int qHandle);
        typedef const char* (WINAPI *PGetQueueFileName) (unsigned int qHandle);
        typedef UINT64(WINAPI *PDequeue2) (unsigned int qHandle, USocket_Server_Handle h, unsigned int maxBytes, bool beNotifiedWhenAvailable, unsigned int waitTime);
        typedef void (WINAPI *PEnableClientDequeue) (USocket_Server_Handle h, bool enable);
        typedef bool (WINAPI *PIsDequeueRequest) (USocket_Server_Handle h);
        typedef bool (WINAPI *PAbortJob)(unsigned int qHandle);
        typedef bool (WINAPI *PStartJob)(unsigned int qHandle);
        typedef bool (WINAPI *PEndJob)(unsigned int qHandle);
        typedef SPA::UINT64(WINAPI *PGetJobSize)(unsigned int qHandle);
        typedef bool (WINAPI *PSetRouting)(unsigned int serviceId0, SPA::ServerSide::tagRoutingAlgorithm ra0, unsigned int serviceId1, SPA::ServerSide::tagRoutingAlgorithm ra1);
        typedef unsigned int (WINAPI *PCheckRouting)(unsigned int serviceId);
        typedef bool (WINAPI *PAddAlphaRequest)(unsigned int serviceId, unsigned short reqId);
        typedef unsigned int (WINAPI *PGetAlphaRequestIds)(unsigned int serviceId, unsigned short *reqIds, unsigned int count);
        typedef UINT64(WINAPI *PGetQueueLastIndex)(unsigned int qHandle);
        typedef UINT64(WINAPI *PCancelQueuedRequestsByIndex)(unsigned int qHandle, UINT64 startIndex, UINT64 endIndex);
        typedef bool (WINAPI *PIsDequeueShared)(unsigned int qHandle);
        typedef tagQueueStatus(WINAPI *PGetServerQueueStatus)(unsigned int qHandle);
        typedef bool (WINAPI *PPushQueueTo)(unsigned int srcHandle, const unsigned int *targetHandles, unsigned int count);
        typedef unsigned int (WINAPI *PGetTTL)(unsigned int qHandle);
        typedef UINT64(WINAPI *PRemoveQueuedRequestsByTTL)(unsigned int qHandle);
        typedef void (WINAPI *PResetQueue)(unsigned int qHandle);
        typedef bool (WINAPI *PIsServerQueueIndexPossiblyCrashed)();
        typedef void (WINAPI *PSetServerWorkDirectory)(const char *dir);
        typedef const char* (WINAPI *PGetServerWorkDirectory)();
        typedef UINT64(WINAPI *PGetLastQueueMessageTime)(unsigned int qHandle);
        typedef void (WINAPI *PAbortDequeuedMessage)(USocket_Server_Handle h);
        typedef bool (WINAPI *PIsDequeuedMessageAborted)(USocket_Server_Handle h);
        typedef const char* (WINAPI *PGetUServerSocketVersion)();
        typedef void (WINAPI *PSetMessageQueuePassword)(const char *pwd);
        typedef void (WINAPI *PUseUTF16)();
        typedef tagOptimistic(WINAPI *PGetOptimistic)(unsigned int qHandle);
        typedef void (WINAPI *PSetOptimistic)(unsigned int qHandle, tagOptimistic optimistic);
        typedef const unsigned char* (WINAPI *PGetRequestBuffer)(USocket_Server_Handle h);
        typedef void (WINAPI *PSetThreadEvent)(PThreadEvent func);
        typedef unsigned int (WINAPI *PGetMainThreads)();
        typedef bool (WINAPI *PSpeakPush) (const unsigned char *message, unsigned int size, const unsigned int *chatGroupIds, unsigned int count);
        typedef bool (WINAPI *PSpeakExPush) (const unsigned char *message, unsigned int size, const unsigned int *chatGroupIds, unsigned int count);
        typedef bool (WINAPI *PSendUserMessageExPush) (const wchar_t *userId, const unsigned char *message, unsigned int size);
        typedef bool (WINAPI *PSendUserMessagePush) (const wchar_t *userId, const unsigned char *message, unsigned int size);
        typedef void (WINAPI *PRegisterMe)(unsigned int svsId, SPA::UINT64 secretNumber);
        typedef SPA::UINT64(WINAPI *PBatchEnqueue)(unsigned int qHandle, unsigned int count, const unsigned char *msgStruct);
        typedef unsigned int (WINAPI *PSendReturnDataIndex)(USocket_Server_Handle h, SPA::UINT64 index, unsigned short usReqId, unsigned int ulBufferSize, const unsigned char *pBuffer);
        typedef unsigned int (WINAPI *PSendExceptionResultIndex)(USocket_Server_Handle h, SPA::UINT64 index, const wchar_t* errMessage, const char* errWhere, unsigned short requestId, unsigned int errCode);
        typedef SPA::UINT64(WINAPI *PGetCurrentRequestIndex)(USocket_Server_Handle h);
        typedef unsigned int (WINAPI *PNotifyInterrupt)(USocket_Server_Handle h, SPA::UINT64 options);
        typedef SPA::UINT64(WINAPI *PGetInterruptOptions)(USocket_Server_Handle h);
        typedef bool (WINAPI *PGetOnceOnly)(USocket_Server_Handle h);
        typedef void (WINAPI *PSetOnceOnly)(USocket_Server_Handle h, bool onceOnly);

        namespace Internal {

            class CServerCoreLoader {
            public:

                CServerCoreLoader() : m_hServerCore(nullptr) {
                    ::memset(this, 0, sizeof (CServerCoreLoader));
                    Load();
                }

                ~CServerCoreLoader() {
                    if (m_hServerCore)
                        ::FreeLibrary(m_hServerCore);
                }

            public:
                PInitSocketProServer InitSocketProServer;
                PUninitSocketProServer UninitSocketProServer;
                PStartSocketProServer StartSocketProServer;
                PStopSocketProServer StopSocketProServer;
                PIsCanceled IsCanceled;
                PIsRunning IsRunning;
                PSetAuthenticationMethod SetAuthenticationMethod;
                PGetAuthenticationMethod GetAuthenticationMethod;
                PSetSharedAM SetSharedAM;
                PGetSharedAM GetSharedAM;
                PPostQuitPump PostQuitPump;
                PIsMainThread IsMainThread;
                PAddSvsContext AddSvsContext;
                PRemoveASvsContext RemoveASvsContext;
                PGetSvsContext GetSvsContext;
                PAddSlowRequest AddSlowRequest;
                PRemoveSlowRequest RemoveSlowRequest;
                PGetCountOfServices GetCountOfServices;
                PGetServices GetServices;
                PGetCountOfSlowRequests GetCountOfSlowRequests;
                PRemoveAllSlowRequests RemoveAllSlowRequests;
                PGetAllSlowRequestIds GetAllSlowRequestIds;
                PAddADll AddADll;
                PRemoveADllByHandle RemoveADllByHandle;
                PSetPrivateKeyFile SetPrivateKeyFile;
                PSetCertFile SetCertFile;
                PSetDHParmsFile SetDHParmsFile;
                PSetPKFPassword SetPKFPassword;
                PSetDefaultEncryptionMethod SetDefaultEncryptionMethod;
                PGetDefaultEncryptionMethod GetDefaultEncryptionMethod;
                PSetPfxFile SetPfxFile;
                PGetServerErrorCode GetServerErrorCode;
                PGetServerErrorMessage GetServerErrorMessage;
                PIsServerRunning IsServerRunning;
                PIsServerSSLEnabled IsServerSSLEnabled;
                PSetOnAccept SetOnAccept;
                PClose Close;
                PGetCurrentRequestID GetCurrentRequestID;
                PGetCurrentRequestLen GetCurrentRequestLen;
                PGetRcvBytesInQueue GetRcvBytesInQueue;
                PGetSndBytesInQueue GetSndBytesInQueue;
                PPostClose PostClose;
                PQueryRequestsInQueue QueryRequestsInQueue;
                PRetrieveBuffer RetrieveBuffer;
                PSetOnSSLHandShakeCompleted SetOnSSLHandShakeCompleted;
                PSetOnClose SetOnClose;
                PSetOnIdle SetOnIdle;
                PIsOpened IsOpened;
                PGetBytesReceived GetBytesReceived;
                PGetBytesSent GetBytesSent;
                PSendReturnData SendReturnData;
                PGetSvsID GetSvsID;
                PGetServerSocketErrorCode GetServerSocketErrorCode;
                PGetServerSocketErrorMessage GetServerSocketErrorMessage;
                PIsBatching IsBatching;
                PGetBytesBatched GetBytesBatched;
                PStartBatching StartBatching;
                PCommitBatching CommitBatching;
                PAbortBatching AbortBatching;
                PSetUserID SetUserID;
                PGetUID GetUID;
                PSetPassword SetPassword;
                PGetPassword GetPassword;
                PSetOnIsPermitted SetOnIsPermitted;
                PEnter Enter;
                PExit Exit;
                PSpeak Speak;
                PSpeakEx SpeakEx;
                PSendUserMessageEx SendUserMessageEx;
                PSendUserMessage SendUserMessage;
                PGetCountOfJoinedChatGroups GetCountOfJoinedChatGroups;
                PGetJoinedGroupIds GetJoinedGroupIds;
                PGetPeerName GetPeerName;
                PGetLocalName GetLocalName;
                PHasUserId HasUserId;
                PDropCurrentSlowRequest DropCurrentSlowRequest;
                PAddAChatGroup AddAChatGroup;
                PGetCountOfChatGroups GetCountOfChatGroups;
                PGetAllCreatedChatGroups GetAllCreatedChatGroups;
                PGetAChatGroup GetAChatGroup;
                PRemoveChatGroup RemoveChatGroup;
                PGetSocketNativeHandle GetSocketNativeHandle;
                PGetPeerOs GetPeerOs;
                PSendExceptionResult SendExceptionResult;
                PMakeRequest MakeRequest;
                PGetHTTPRequestHeaders GetHTTPRequestHeaders;
                PGetHTTPPath GetHTTPPath;
                PGetHTTPContentLength GetHTTPContentLength;
                PGetHTTPQuery GetHTTPQuery;
                PDownloadFile DownloadFile;
                PGetHTTPMethod GetHTTPMethod;
                PHTTPKeepAlive HTTPKeepAlive;
                PIsWebSocket IsWebSocket;
                PIsCrossDomain IsCrossDomain;
                PGetHTTPVersion GetHTTPVersion;
                PHTTPGZipAccepted HTTPGZipAccepted;
                PGetHTTPUrl GetHTTPUrl;
                PGetHTTPHost GetHTTPHost;
                PGetHTTPTransport GetHTTPTransport;
                PGetHTTPTransferEncoding GetHTTPTransferEncoding;
                PGetHTTPContentMultiplax GetHTTPContentMultiplax;
                PSetHTTPResponseCode SetHTTPResponseCode;
                PSetHTTPResponseHeader SetHTTPResponseHeader;
                PSendHTTPReturnDataA SendHTTPReturnDataA;
                PSendHTTPReturnDataW SendHTTPReturnDataW;
                PGetHTTPId GetHTTPId;
                PGetHTTPCurrentMultiplaxHeaders GetHTTPCurrentMultiplaxHeaders;
                PGetSSL GetSSL;
                PGetReturnRandom GetReturnRandom;
                PSetReturnRandom SetReturnRandom;
                PGetSwitchTime GetSwitchTime;
                PSetSwitchTime SetSwitchTime;
                PGetCountOfClients GetCountOfClients;
                PGetClient GetClient;
                PSetDefaultZip SetDefaultZip;
                PGetDefaultZip GetDefaultZip;
                PSetMaxConnectionsPerClient SetMaxConnectionsPerClient;
                PGetMaxConnectionsPerClient GetMaxConnectionsPerClient;
                PSetMaxThreadIdleTimeBeforeSuicide SetMaxThreadIdleTimeBeforeSuicide;
                PGetMaxThreadIdleTimeBeforeSuicide GetMaxThreadIdleTimeBeforeSuicide;
                PSetTimerElapse SetTimerElapse;
                PGetTimerElapse GetTimerElapse;
                PGetSMInterval GetSMInterval;
                PSetSMInterval SetSMInterval;
                PSetPingInterval SetPingInterval;
                PGetPingInterval GetPingInterval;
                PSetRecycleGlobalMemoryInterval SetRecycleGlobalMemoryInterval;
                PGetRecycleGlobalMemoryInterval GetRecycleGlobalMemoryInterval;
                PGetRequestCount GetRequestCount;
                PStartHTTPChunkResponse StartHTTPChunkResponse;
                PSendHTTPChunk SendHTTPChunk;
                PEndHTTPChunkResponse EndHTTPChunkResponse;
                PIsFakeRequest IsFakeRequest;
                PSetZip SetZip;
                PGetZip GetZip;
                PSetZipLevel SetZipLevel;
                PGetZipLevel GetZipLevel;
                PStartQueue StartQueue;
                PGetMessagesInDequeuing GetMessagesInDequeuing;
                PEnqueue Enqueue;
                PGetMessageCount GetMessageCount;
                PStopQueueByHandle StopQueueByHandle;
                PStopQueueByName StopQueueByName;
                PGetQueueSize GetQueueSize;
                PDequeue Dequeue;
                PIsQueueStartedByName IsQueueStartedByName;
                PIsQueueStartedByHandle IsQueueStartedByHandle;
                PIsQueueSecuredByName IsQueueSecuredByName;
                PIsQueueSecuredByHandle IsQueueSecuredByHandle;
                PGetQueueName GetQueueName;
                PGetQueueFileName GetQueueFileName;
                PDequeue2 Dequeue2;
                PEnableClientDequeue EnableClientDequeue;
                PIsDequeueRequest IsDequeueRequest;
                PAbortJob AbortJob;
                PStartJob StartJob;
                PEndJob EndJob;
                PGetJobSize GetJobSize;
                PSetRouting SetRouting;
                PCheckRouting CheckRouting;
                PAddAlphaRequest AddAlphaRequest;
                PGetAlphaRequestIds GetAlphaRequestIds;
                PGetQueueLastIndex GetQueueLastIndex;
                PCancelQueuedRequestsByIndex CancelQueuedRequestsByIndex;
                PIsDequeueShared IsDequeueShared;
                PGetServerQueueStatus GetServerQueueStatus;
                PPushQueueTo PushQueueTo;
                PGetTTL GetTTL;
                PRemoveQueuedRequestsByTTL RemoveQueuedRequestsByTTL;
                PResetQueue ResetQueue;
                PIsServerQueueIndexPossiblyCrashed IsServerQueueIndexPossiblyCrashed;
                PSetServerWorkDirectory SetServerWorkDirectory;
                PGetServerWorkDirectory GetServerWorkDirectory;
                PGetLastQueueMessageTime GetLastQueueMessageTime;
                PAbortDequeuedMessage AbortDequeuedMessage;
                PIsDequeuedMessageAborted IsDequeuedMessageAborted;
                PGetUServerSocketVersion GetUServerSocketVersion;
                PSetMessageQueuePassword SetMessageQueuePassword;
                PUseUTF16 UseUTF16;
                PGetOptimistic GetOptimistic;
                PSetOptimistic SetOptimistic;
                PGetRequestBuffer GetRequestBuffer;
                PSetThreadEvent SetThreadEvent;
                PSetLastCallInfo SetLastCallInfo;
                PGetMainThreads GetMainThreads;
                PSpeakPush SpeakPush;
                PSpeakExPush SpeakExPush;
                PSendUserMessageExPush SendUserMessageExPush;
                PSendUserMessagePush SendUserMessagePush;
                PRegisterMe RegisterMe;
                PBatchEnqueue BatchEnqueue;
                PSendReturnDataIndex SendReturnDataIndex;
                PSendExceptionResultIndex SendExceptionResultIndex;
                PGetCurrentRequestIndex GetCurrentRequestIndex;
                PNotifyInterrupt NotifyInterrupt;
                PGetInterruptOptions GetInterruptOptions;
                PGetOnceOnly GetOnceOnly;
                PSetOnceOnly SetOnceOnly;

            public:

                bool IsLoaded() {
                    return (nullptr != m_hServerCore);
                }

                void Load() {
                    if (m_hServerCore) {
                        return;
                    }
#ifdef WIN32_64
                    m_hServerCore = ::LoadLibraryW(L"uservercore.dll");
#else
                    m_hServerCore = ::dlopen("libuservercore.so", RTLD_LAZY);
#endif
                    if (!m_hServerCore) {
                        return;
                    }

                    InitSocketProServer = (PInitSocketProServer)::GetProcAddress(m_hServerCore, "InitSocketProServer");
                    UninitSocketProServer = (PUninitSocketProServer)::GetProcAddress(m_hServerCore, "UninitSocketProServer");
                    StartSocketProServer = (PStartSocketProServer)::GetProcAddress(m_hServerCore, "StartSocketProServer");
                    StopSocketProServer = (PStopSocketProServer)::GetProcAddress(m_hServerCore, "StopSocketProServer");
                    IsCanceled = (PIsCanceled)::GetProcAddress(m_hServerCore, "IsCanceled");
                    IsRunning = (PIsRunning)::GetProcAddress(m_hServerCore, "IsRunning");
                    SetAuthenticationMethod = (PSetAuthenticationMethod)::GetProcAddress(m_hServerCore, "SetAuthenticationMethod");
                    GetAuthenticationMethod = (PGetAuthenticationMethod)::GetProcAddress(m_hServerCore, "GetAuthenticationMethod");
                    SetSharedAM = (PSetSharedAM)::GetProcAddress(m_hServerCore, "SetSharedAM");
                    GetSharedAM = (PGetSharedAM)::GetProcAddress(m_hServerCore, "GetSharedAM");
                    PostQuitPump = (PPostQuitPump)::GetProcAddress(m_hServerCore, "PostQuitPump");
                    IsMainThread = (PIsMainThread)::GetProcAddress(m_hServerCore, "IsMainThread");
                    AddSvsContext = (PAddSvsContext)::GetProcAddress(m_hServerCore, "AddSvsContext");
                    RemoveASvsContext = (PRemoveASvsContext)::GetProcAddress(m_hServerCore, "RemoveASvsContext");
                    GetSvsContext = (PGetSvsContext)::GetProcAddress(m_hServerCore, "GetSvsContext");
                    AddSlowRequest = (PAddSlowRequest)::GetProcAddress(m_hServerCore, "AddSlowRequest");
                    RemoveSlowRequest = (PRemoveSlowRequest)::GetProcAddress(m_hServerCore, "RemoveSlowRequest");
                    GetCountOfServices = (PGetCountOfServices)::GetProcAddress(m_hServerCore, "GetCountOfServices");
                    GetServices = (PGetServices)::GetProcAddress(m_hServerCore, "GetServices");
                    GetCountOfSlowRequests = (PGetCountOfSlowRequests)::GetProcAddress(m_hServerCore, "GetCountOfSlowRequests");
                    RemoveAllSlowRequests = (PRemoveAllSlowRequests)::GetProcAddress(m_hServerCore, "RemoveAllSlowRequests");
                    GetAllSlowRequestIds = (PGetAllSlowRequestIds)::GetProcAddress(m_hServerCore, "GetAllSlowRequestIds");
                    AddADll = (PAddADll)::GetProcAddress(m_hServerCore, "AddADll");
                    RemoveADllByHandle = (PRemoveADllByHandle)::GetProcAddress(m_hServerCore, "RemoveADllByHandle");
                    SetPrivateKeyFile = (PSetPrivateKeyFile)::GetProcAddress(m_hServerCore, "SetPrivateKeyFile");
                    SetCertFile = (PSetCertFile)::GetProcAddress(m_hServerCore, "SetCertFile");
                    SetPKFPassword = (PSetPKFPassword)::GetProcAddress(m_hServerCore, "SetPKFPassword");
                    SetDHParmsFile = (PSetDHParmsFile)::GetProcAddress(m_hServerCore, "SetDHParmsFile");
                    SetDefaultEncryptionMethod = (PSetDefaultEncryptionMethod)::GetProcAddress(m_hServerCore, "SetDefaultEncryptionMethod");
                    GetDefaultEncryptionMethod = (PGetDefaultEncryptionMethod)::GetProcAddress(m_hServerCore, "GetDefaultEncryptionMethod");
                    SetPfxFile = (PSetPfxFile)::GetProcAddress(m_hServerCore, "SetPfxFile");
                    GetServerErrorCode = (PGetServerErrorCode)::GetProcAddress(m_hServerCore, "GetServerErrorCode");
                    GetServerErrorMessage = (PGetServerErrorMessage)::GetProcAddress(m_hServerCore, "GetServerErrorMessage");
                    IsServerRunning = (PIsServerRunning)::GetProcAddress(m_hServerCore, "IsServerRunning");
                    IsServerSSLEnabled = (PIsServerSSLEnabled)::GetProcAddress(m_hServerCore, "IsServerSSLEnabled");
                    SetOnAccept = (PSetOnAccept)::GetProcAddress(m_hServerCore, "SetOnAccept");
                    Close = (PClose)::GetProcAddress(m_hServerCore, "Close");
                    GetCurrentRequestID = (PGetCurrentRequestID)::GetProcAddress(m_hServerCore, "GetCurrentRequestID");
                    GetCurrentRequestLen = (PGetCurrentRequestLen)::GetProcAddress(m_hServerCore, "GetCurrentRequestLen");
                    GetRcvBytesInQueue = (PGetRcvBytesInQueue)::GetProcAddress(m_hServerCore, "GetRcvBytesInQueue");
                    GetSndBytesInQueue = (PGetSndBytesInQueue)::GetProcAddress(m_hServerCore, "GetSndBytesInQueue");
                    PostClose = (PPostClose)::GetProcAddress(m_hServerCore, "PostClose");
                    QueryRequestsInQueue = (PQueryRequestsInQueue)::GetProcAddress(m_hServerCore, "QueryRequestsInQueue");
                    RetrieveBuffer = (PRetrieveBuffer)::GetProcAddress(m_hServerCore, "RetrieveBuffer");
                    SetOnSSLHandShakeCompleted = (PSetOnSSLHandShakeCompleted)::GetProcAddress(m_hServerCore, "SetOnSSLHandShakeCompleted");
                    SetOnClose = (PSetOnClose)::GetProcAddress(m_hServerCore, "SetOnClose");
                    SetOnIdle = (PSetOnIdle)::GetProcAddress(m_hServerCore, "SetOnIdle");
                    IsOpened = (PIsOpened)::GetProcAddress(m_hServerCore, "IsOpened");
                    GetBytesReceived = (PGetBytesReceived)::GetProcAddress(m_hServerCore, "GetBytesReceived");
                    GetBytesSent = (PGetBytesSent)::GetProcAddress(m_hServerCore, "GetBytesSent");
                    SendReturnData = (PSendReturnData)::GetProcAddress(m_hServerCore, "SendReturnData");
                    GetSvsID = (PGetSvsID)::GetProcAddress(m_hServerCore, "GetSvsID");
                    GetServerSocketErrorCode = (PGetServerSocketErrorCode)::GetProcAddress(m_hServerCore, "GetServerSocketErrorCode");
                    GetServerSocketErrorMessage = (PGetServerSocketErrorMessage)::GetProcAddress(m_hServerCore, "GetServerSocketErrorMessage");
                    IsBatching = (PIsBatching)::GetProcAddress(m_hServerCore, "IsBatching");
                    GetBytesBatched = (PGetBytesBatched)::GetProcAddress(m_hServerCore, "GetBytesBatched");
                    StartBatching = (PStartBatching)::GetProcAddress(m_hServerCore, "StartBatching");
                    CommitBatching = (PCommitBatching)::GetProcAddress(m_hServerCore, "CommitBatching");
                    AbortBatching = (PAbortBatching)::GetProcAddress(m_hServerCore, "AbortBatching");
                    SetUserID = (PSetUserID)::GetProcAddress(m_hServerCore, "SetUserID");
                    GetUID = (PGetUID)::GetProcAddress(m_hServerCore, "GetUID");
                    SetPassword = (PSetPassword)::GetProcAddress(m_hServerCore, "SetPassword");
                    GetPassword = (PGetPassword)::GetProcAddress(m_hServerCore, "GetPassword");
                    SetOnIsPermitted = (PSetOnIsPermitted)::GetProcAddress(m_hServerCore, "SetOnIsPermitted");
                    Enter = (PEnter)::GetProcAddress(m_hServerCore, "Enter");
                    Exit = (PExit)::GetProcAddress(m_hServerCore, "Exit");
                    Speak = (PSpeak)::GetProcAddress(m_hServerCore, "Speak");
                    SpeakEx = (PSpeakEx)::GetProcAddress(m_hServerCore, "SpeakEx");
                    SendUserMessageEx = (PSendUserMessageEx)::GetProcAddress(m_hServerCore, "SendUserMessageEx");
                    SendUserMessage = (PSendUserMessage)::GetProcAddress(m_hServerCore, "SendUserMessage");
                    GetCountOfJoinedChatGroups = (PGetCountOfJoinedChatGroups)::GetProcAddress(m_hServerCore, "GetCountOfJoinedChatGroups");
                    GetJoinedGroupIds = (PGetJoinedGroupIds)::GetProcAddress(m_hServerCore, "GetJoinedGroupIds");
                    GetPeerName = (PGetPeerName)::GetProcAddress(m_hServerCore, "GetPeerName");
                    GetLocalName = (PGetLocalName)::GetProcAddress(m_hServerCore, "GetLocalName");
                    HasUserId = (PHasUserId)::GetProcAddress(m_hServerCore, "HasUserId");
                    DropCurrentSlowRequest = (PDropCurrentSlowRequest)::GetProcAddress(m_hServerCore, "DropCurrentSlowRequest");
                    AddAChatGroup = (PAddAChatGroup)::GetProcAddress(m_hServerCore, "AddAChatGroup");
                    GetCountOfChatGroups = (PGetCountOfChatGroups)::GetProcAddress(m_hServerCore, "GetCountOfChatGroups");
                    GetAllCreatedChatGroups = (PGetAllCreatedChatGroups)::GetProcAddress(m_hServerCore, "GetAllCreatedChatGroups");
                    GetAChatGroup = (PGetAChatGroup)::GetProcAddress(m_hServerCore, "GetAChatGroup");
                    RemoveChatGroup = (PRemoveChatGroup)::GetProcAddress(m_hServerCore, "RemoveChatGroup");
                    GetSocketNativeHandle = (PGetSocketNativeHandle)::GetProcAddress(m_hServerCore, "GetSocketNativeHandle");
                    GetPeerOs = (PGetPeerOs)::GetProcAddress(m_hServerCore, "GetPeerOs");
                    SendExceptionResult = (PSendExceptionResult)::GetProcAddress(m_hServerCore, "SendExceptionResult");
                    MakeRequest = (PMakeRequest)::GetProcAddress(m_hServerCore, "MakeRequest");
                    GetHTTPRequestHeaders = (PGetHTTPRequestHeaders)::GetProcAddress(m_hServerCore, "GetHTTPRequestHeaders");
                    GetHTTPPath = (PGetHTTPPath)::GetProcAddress(m_hServerCore, "GetHTTPPath");
                    GetHTTPContentLength = (PGetHTTPContentLength)::GetProcAddress(m_hServerCore, "GetHTTPContentLength");
                    GetHTTPQuery = (PGetHTTPQuery)::GetProcAddress(m_hServerCore, "GetHTTPQuery");
                    DownloadFile = (PDownloadFile)::GetProcAddress(m_hServerCore, "DownloadFile");
                    GetHTTPMethod = (PGetHTTPMethod)::GetProcAddress(m_hServerCore, "GetHTTPMethod");
                    HTTPKeepAlive = (PHTTPKeepAlive)::GetProcAddress(m_hServerCore, "HTTPKeepAlive");
                    IsWebSocket = (PIsWebSocket)::GetProcAddress(m_hServerCore, "IsWebSocket");
                    IsCrossDomain = (PIsCrossDomain)::GetProcAddress(m_hServerCore, "IsCrossDomain");
                    GetHTTPVersion = (PGetHTTPVersion)::GetProcAddress(m_hServerCore, "GetHTTPVersion");
                    HTTPGZipAccepted = (PHTTPGZipAccepted)::GetProcAddress(m_hServerCore, "HTTPGZipAccepted");
                    GetHTTPUrl = (PGetHTTPUrl)::GetProcAddress(m_hServerCore, "GetHTTPUrl");
                    GetHTTPHost = (PGetHTTPHost)::GetProcAddress(m_hServerCore, "GetHTTPHost");
                    GetHTTPTransport = (PGetHTTPTransport)::GetProcAddress(m_hServerCore, "GetHTTPTransport");
                    GetHTTPTransferEncoding = (PGetHTTPTransferEncoding)::GetProcAddress(m_hServerCore, "GetHTTPTransferEncoding");
                    GetHTTPContentMultiplax = (PGetHTTPContentMultiplax)::GetProcAddress(m_hServerCore, "GetHTTPContentMultiplax");
                    SetHTTPResponseCode = (PSetHTTPResponseCode)::GetProcAddress(m_hServerCore, "SetHTTPResponseCode");
                    SetHTTPResponseHeader = (PSetHTTPResponseHeader)::GetProcAddress(m_hServerCore, "SetHTTPResponseHeader");
                    SendHTTPReturnDataA = (PSendHTTPReturnDataA)::GetProcAddress(m_hServerCore, "SendHTTPReturnDataA");
                    SendHTTPReturnDataW = (PSendHTTPReturnDataW)::GetProcAddress(m_hServerCore, "SendHTTPReturnDataW");
                    GetHTTPId = (PGetHTTPId)::GetProcAddress(m_hServerCore, "GetHTTPId");
                    GetHTTPCurrentMultiplaxHeaders = (PGetHTTPCurrentMultiplaxHeaders)::GetProcAddress(m_hServerCore, "GetHTTPCurrentMultiplaxHeaders");
                    GetSSL = (PGetSSL)::GetProcAddress(m_hServerCore, "GetSSL");
                    GetReturnRandom = (PGetReturnRandom)::GetProcAddress(m_hServerCore, "GetReturnRandom");
                    SetReturnRandom = (PSetReturnRandom)::GetProcAddress(m_hServerCore, "SetReturnRandom");
                    GetSwitchTime = (PGetSwitchTime)::GetProcAddress(m_hServerCore, "GetSwitchTime");
                    SetSwitchTime = (PSetSwitchTime)::GetProcAddress(m_hServerCore, "SetSwitchTime");
                    GetCountOfClients = (PGetCountOfClients)::GetProcAddress(m_hServerCore, "GetCountOfClients");
                    GetClient = (PGetClient)::GetProcAddress(m_hServerCore, "GetClient");
                    SetDefaultZip = (PSetDefaultZip)::GetProcAddress(m_hServerCore, "SetDefaultZip");
                    GetDefaultZip = (PGetDefaultZip)::GetProcAddress(m_hServerCore, "GetDefaultZip");
                    SetMaxConnectionsPerClient = (PSetMaxConnectionsPerClient)::GetProcAddress(m_hServerCore, "SetMaxConnectionsPerClient");
                    GetMaxConnectionsPerClient = (PGetMaxConnectionsPerClient)::GetProcAddress(m_hServerCore, "GetMaxConnectionsPerClient");
                    SetMaxThreadIdleTimeBeforeSuicide = (PSetMaxThreadIdleTimeBeforeSuicide)::GetProcAddress(m_hServerCore, "SetMaxThreadIdleTimeBeforeSuicide");
                    GetMaxThreadIdleTimeBeforeSuicide = (PGetMaxThreadIdleTimeBeforeSuicide)::GetProcAddress(m_hServerCore, "GetMaxThreadIdleTimeBeforeSuicide");
                    SetTimerElapse = (PSetTimerElapse)::GetProcAddress(m_hServerCore, "SetTimerElapse");
                    GetTimerElapse = (PGetTimerElapse)::GetProcAddress(m_hServerCore, "GetTimerElapse");
                    GetSMInterval = (PGetSMInterval)::GetProcAddress(m_hServerCore, "GetSMInterval");
                    SetSMInterval = (PSetSMInterval)::GetProcAddress(m_hServerCore, "SetSMInterval");
                    SetPingInterval = (PSetPingInterval)::GetProcAddress(m_hServerCore, "SetPingInterval");
                    GetPingInterval = (PGetPingInterval)::GetProcAddress(m_hServerCore, "GetPingInterval");
                    SetRecycleGlobalMemoryInterval = (PSetRecycleGlobalMemoryInterval)::GetProcAddress(m_hServerCore, "SetRecycleGlobalMemoryInterval");
                    GetRecycleGlobalMemoryInterval = (PGetRecycleGlobalMemoryInterval)::GetProcAddress(m_hServerCore, "GetRecycleGlobalMemoryInterval");
                    GetRequestCount = (PGetRequestCount)::GetProcAddress(m_hServerCore, "GetRequestCount");
                    StartHTTPChunkResponse = (PStartHTTPChunkResponse)::GetProcAddress(m_hServerCore, "StartHTTPChunkResponse");
                    SendHTTPChunk = (PSendHTTPChunk)::GetProcAddress(m_hServerCore, "SendHTTPChunk");
                    EndHTTPChunkResponse = (PEndHTTPChunkResponse)::GetProcAddress(m_hServerCore, "EndHTTPChunkResponse");
                    IsFakeRequest = (PIsFakeRequest)::GetProcAddress(m_hServerCore, "IsFakeRequest");
                    SetZip = (PSetZip)::GetProcAddress(m_hServerCore, "SetZip");
                    GetZip = (PGetZip)::GetProcAddress(m_hServerCore, "GetZip");
                    SetZipLevel = (PSetZipLevel)::GetProcAddress(m_hServerCore, "SetZipLevel");
                    GetZipLevel = (PGetZipLevel)::GetProcAddress(m_hServerCore, "GetZipLevel");
                    StartQueue = (PStartQueue)::GetProcAddress(m_hServerCore, "StartQueue");
                    GetMessagesInDequeuing = (PGetMessagesInDequeuing)::GetProcAddress(m_hServerCore, "GetMessagesInDequeuing");
                    Enqueue = (PEnqueue)::GetProcAddress(m_hServerCore, "Enqueue");
                    GetMessageCount = (PGetMessageCount)::GetProcAddress(m_hServerCore, "GetMessageCount");
                    StopQueueByHandle = (PStopQueueByHandle)::GetProcAddress(m_hServerCore, "StopQueueByHandle");
                    StopQueueByName = (PStopQueueByName)::GetProcAddress(m_hServerCore, "StopQueueByName");
                    GetQueueSize = (PGetQueueSize)::GetProcAddress(m_hServerCore, "GetQueueSize");
                    Dequeue = (PDequeue)::GetProcAddress(m_hServerCore, "Dequeue");
                    IsQueueStartedByName = (PIsQueueStartedByName)::GetProcAddress(m_hServerCore, "IsQueueStartedByName");
                    IsQueueStartedByHandle = (PIsQueueStartedByHandle)::GetProcAddress(m_hServerCore, "IsQueueStartedByHandle");
                    IsQueueSecuredByName = (PIsQueueSecuredByName)::GetProcAddress(m_hServerCore, "IsQueueSecuredByName");
                    IsQueueSecuredByHandle = (PIsQueueSecuredByHandle)::GetProcAddress(m_hServerCore, "IsQueueSecuredByHandle");
                    GetQueueName = (PGetQueueName)::GetProcAddress(m_hServerCore, "GetQueueName");
                    GetQueueFileName = (PGetQueueFileName)::GetProcAddress(m_hServerCore, "GetQueueFileName");
                    Dequeue2 = (PDequeue2)::GetProcAddress(m_hServerCore, "Dequeue2");
                    EnableClientDequeue = (PEnableClientDequeue)::GetProcAddress(m_hServerCore, "EnableClientDequeue");
                    IsDequeueRequest = (PIsDequeueRequest)::GetProcAddress(m_hServerCore, "IsDequeueRequest");
                    AbortJob = (PAbortJob)::GetProcAddress(m_hServerCore, "AbortJob");
                    StartJob = (PStartJob)::GetProcAddress(m_hServerCore, "StartJob");
                    EndJob = (PEndJob)::GetProcAddress(m_hServerCore, "EndJob");
                    GetJobSize = (PGetJobSize)::GetProcAddress(m_hServerCore, "GetJobSize");
                    SetRouting = (PSetRouting)::GetProcAddress(m_hServerCore, "SetRouting");
                    CheckRouting = (PCheckRouting)::GetProcAddress(m_hServerCore, "CheckRouting");
                    AddAlphaRequest = (PAddAlphaRequest)::GetProcAddress(m_hServerCore, "AddAlphaRequest");
                    GetAlphaRequestIds = (PGetAlphaRequestIds)::GetProcAddress(m_hServerCore, "GetAlphaRequestIds");
                    GetQueueLastIndex = (PGetQueueLastIndex)::GetProcAddress(m_hServerCore, "GetQueueLastIndex");
                    CancelQueuedRequestsByIndex = (PCancelQueuedRequestsByIndex)::GetProcAddress(m_hServerCore, "CancelQueuedRequestsByIndex");
                    IsDequeueShared = (PIsDequeueShared)::GetProcAddress(m_hServerCore, "IsDequeueShared");
                    GetServerQueueStatus = (PGetServerQueueStatus)::GetProcAddress(m_hServerCore, "GetServerQueueStatus");
                    PushQueueTo = (PPushQueueTo)::GetProcAddress(m_hServerCore, "PushQueueTo");
                    GetTTL = (PGetTTL)::GetProcAddress(m_hServerCore, "GetTTL");
                    RemoveQueuedRequestsByTTL = (PRemoveQueuedRequestsByTTL)::GetProcAddress(m_hServerCore, "RemoveQueuedRequestsByTTL");
                    ResetQueue = (PResetQueue)::GetProcAddress(m_hServerCore, "ResetQueue");
                    IsServerQueueIndexPossiblyCrashed = (PIsServerQueueIndexPossiblyCrashed)::GetProcAddress(m_hServerCore, "IsServerQueueIndexPossiblyCrashed");
                    SetServerWorkDirectory = (PSetServerWorkDirectory)::GetProcAddress(m_hServerCore, "SetServerWorkDirectory");
                    GetServerWorkDirectory = (PGetServerWorkDirectory)::GetProcAddress(m_hServerCore, "GetServerWorkDirectory");
                    GetLastQueueMessageTime = (PGetLastQueueMessageTime)::GetProcAddress(m_hServerCore, "GetLastQueueMessageTime");
                    AbortDequeuedMessage = (PAbortDequeuedMessage)::GetProcAddress(m_hServerCore, "AbortDequeuedMessage");
                    IsDequeuedMessageAborted = (PIsDequeuedMessageAborted)::GetProcAddress(m_hServerCore, "IsDequeuedMessageAborted");
                    GetUServerSocketVersion = (PGetUServerSocketVersion)::GetProcAddress(m_hServerCore, "GetUServerSocketVersion");
                    SetMessageQueuePassword = (PSetMessageQueuePassword)::GetProcAddress(m_hServerCore, "SetMessageQueuePassword");
                    UseUTF16 = (PUseUTF16)::GetProcAddress(m_hServerCore, "UseUTF16");
                    GetOptimistic = (PGetOptimistic)::GetProcAddress(m_hServerCore, "GetOptimistic");
                    SetOptimistic = (PSetOptimistic)::GetProcAddress(m_hServerCore, "SetOptimistic");
                    GetRequestBuffer = (PGetRequestBuffer)::GetProcAddress(m_hServerCore, "GetRequestBuffer");
                    SetThreadEvent = (PSetThreadEvent)::GetProcAddress(m_hServerCore, "SetThreadEvent");
                    SetLastCallInfo = (PSetLastCallInfo)::GetProcAddress(m_hServerCore, "SetLastCallInfo");
                    GetMainThreads = (PGetMainThreads)::GetProcAddress(m_hServerCore, "GetMainThreads");
                    SpeakPush = (PSpeakPush)::GetProcAddress(m_hServerCore, "SpeakPush");
                    SpeakExPush = (PSpeakExPush)::GetProcAddress(m_hServerCore, "SpeakExPush");
                    SendUserMessageExPush = (PSendUserMessageExPush)::GetProcAddress(m_hServerCore, "SendUserMessageExPush");
                    SendUserMessagePush = (PSendUserMessagePush)::GetProcAddress(m_hServerCore, "SendUserMessagePush");
                    RegisterMe = (PRegisterMe)::GetProcAddress(m_hServerCore, "RegisterMe");
                    BatchEnqueue = (PBatchEnqueue)::GetProcAddress(m_hServerCore, "BatchEnqueue");
                    SendReturnDataIndex = (PSendReturnDataIndex)::GetProcAddress(m_hServerCore, "SendReturnDataIndex");
                    SendExceptionResultIndex = (PSendExceptionResultIndex)::GetProcAddress(m_hServerCore, "SendExceptionResultIndex");
                    GetCurrentRequestIndex = (PGetCurrentRequestIndex)::GetProcAddress(m_hServerCore, "GetCurrentRequestIndex");
                    NotifyInterrupt = (PNotifyInterrupt)::GetProcAddress(m_hServerCore, "NotifyInterrupt");
                    GetInterruptOptions = (PGetInterruptOptions)::GetProcAddress(m_hServerCore, "GetInterruptOptions");
                    GetOnceOnly = (PGetOnceOnly)::GetProcAddress(m_hServerCore, "GetOnceOnly");
                    SetOnceOnly = (PSetOnceOnly)::GetProcAddress(m_hServerCore, "SetOnceOnly");
                }

            private:
                CServerCoreLoader(const CServerCoreLoader &ccl);
                CServerCoreLoader& operator=(const CServerCoreLoader &ccl);
                HINSTANCE m_hServerCore;
            };
        } //namespace Internal
        extern Internal::CServerCoreLoader ServerCoreLoader;
    } //namespace ServerSide
} //namespace SPA

#endif
