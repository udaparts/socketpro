<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title>SQL Requests Streaming For SQLite</title>
    <link rel="stylesheet" type="text/css" href="codepretty/sons-of-obsidian.css" />
    <script type="text/javascript" src="codepretty/prettify.js"></script>
</head>
<body onload="PR.prettyPrint()">
<h1 style="text-align: center;">SQL Requests Streaming For SQLite</h1>
<hr />
<p>Most of client server database systems only support synchronous communication between client and backend database 
by use of blocking socket and some chatty protocol, which require a client or server to wait for an acknowledgement before sending a new chunk of data.
The wait time, which is also called as latency, could be starting from a few tenths for a local area network (LAN) to hundreds of milliseconds for a wide area network (WAN).
Large wait times can significantly degrade the quality of an application.</p>
<p>As the previous example of <a href="cpp_serverqueue.htm" title="SocketPro Server Persistent Message Queue">server queue plugin</a>, we also create a set of SocketPro database plugins to accelerate accessing databases with 
continuous inline request/result batching and real-time stream processing capabilities by use of asynchronous data transferring and parallel computation for the best network efficiency.
For reduction of learning complexity, we use SQLite database as the first database sample for the first article, and MySQL as the second database sample for <a href="cpp_mysql.htm" title="SQL Requests Streaming For MySQL/Mariadb">the second article</a>.</p>

<table style="width:100%;">
<tr>
<td style="width:30%;">
<?prettify linenums=1?>
<pre class="prettyprint">
//../socketpro/include/aclientw.h
struct ErrInfo {
    ErrInfo(int errCode = 0, const wchar_t *errMsg = L"")
    : ec(errCode), em(errMsg ? errMsg : L"") {
    }

    int ec; //error code, 0 -- success
    std::wstring em; //error message

    virtual std::wstring ToString() {
        std::wstring s = L"ec: " + std::to_wstring(ec);
        s += (L", em: " + em);
        return s;
    }
};

//../socketpro/include/udb_client.h
struct SQLExeInfo : public ErrInfo {
    INT64 affected; //the number of records affected
    unsigned int oks; //successes
    unsigned int fails; //failures
    CDBVariant lastId; //last insert id and can be null

    SQLExeInfo(int res = 0, const wchar_t* errMsg = nullptr, INT64 aff = 0,
        unsigned int suc_ones = 0, unsigned int bad_ones = 0,
        const CDBVariant& id = CDBVariant())
    : ErrInfo(res, errMsg), affected(aff), oks(suc_ones),
        fails(bad_ones), lastId(id) {
    }

    std::wstring ToString() {
        std::wstring s = ErrInfo::ToString();
        s += (L", affected: " + std::to_wstring(affected));
        s += (L", oks: " + std::to_wstring(oks));
        s += (L", fails: " + std::to_wstring(fails));
        s += ((lastId.vt <= VT_NULL) ? L", lastId: null" : 
            (L", lastId: " + std::to_wstring(lastId.ullVal)).c_str());
        return s;
    }
};
</pre>
</td>
<td>
<p>The left code snippet 1 lists the two basic structures for various database request returning results.</p>
<p>The first one, <i>ErrInfo</i>, is used for returning results of database requests, <i>open</i>, <i>close</i>, <i>prepare</i>, <i>beginTrans</i> and <i>endTrans</i>.
It is easily understandable to you, because they are returned just with two data, an error code and its correspoding message.</p>
<p>The second one, <i>SQLExeInfo</i>, is designed for returning results of various SQL statements, <i>execute</i> and <i>executeBatch</i>.
In addtion to an error code and its correspoding message, executing a SQL statement could return the number of records affected and last insert identification number,
which corresponds to the two members <i>affected</i> and <i>lastId</i> of the structure <i>SQLExeInfo</i>, respectively.
SocketPro database plugins support executing a complex SQL statement which consists of multiple basic SQL statements.
Executing a complex SQL statement could generate multiple results of multiple basic SQL statements. SocketPro database plugins will count their successful ones and failure ones, and return them to client.
Therefore, there are two members <i>oks</i> and <i>fails</i> within the structure for successes and failures, respectively.
However, no matter how many failures happens with a batch of complex SQL statements, SocketPro database plugins always return one error code and its message of the first basic SQL statement only.
</p>
</td>
</tr>
</table>
Code snippet 1: Two basic structures <i>ErrInfo</i> and <i>SQLExeInfo</i> for various database request returning results
<hr />

<table style="width:100%;">
<tr>
<td style="width:30%;">
<?prettify linenums=1?>
<pre class="prettyprint">
using namespace SPA::UDB;
using namespace SPA::ClientSide;
using namespace std;

typedef future&lt;CSqlite::SQLExeInfo&gt; CSqlFuture;
typedef CSocketPool&lt;CSqlite&gt; CMyPool;
typedef pair&lt;CDBColumnInfoArray, CDBVariantArray&gt; CPColumnRowset;
typedef vector&lt;CPColumnRowset&gt; CRowsetArray;

vector&lt;CSqlFuture&gt; TestCreateTables(shared_ptr&lt;CSqlite&gt; sqlite);
CSqlFuture TestBLOBByPreparedStatement(shared_ptr&lt;CSqlite&gt;sqlite,CRowsetArray&ra);
CSqlFuture TestPreparedStatements(shared_ptr&lt;CSqlite&gt; sqlite, CRowsetArray &ra);
vector&lt;CSqlFuture&gt; TestBatch(shared_ptr&lt;CSqlite&gt; sqlite, CRowsetArray &ra);

wstring g_wstr;
string g_str;
void MakeLargeStrings() {
    //......
}

int main(int argc, char* argv[]) {
    MakeLargeStrings();
    CConnectionContext cc;
    cout << "Remote host: " << endl;
    getline(cin, cc.Host);
    //cc.Host = "localhost";
    cc.Port = 20901;
    cc.UserId = L"MyUserId";
    cc.Password = L"MyPassword";
    CMyPool spSqlite;
    //spSqlite.SetQueueName("sqlitequeue");
    if (!spSqlite.StartSocketPool(cc, 1)) {
        cout << "No connection to remote async sqlite server\n";
        cout << "Press any key to close the application ......\n";
        ::getchar();
        return 0;
    }
    auto sqlite = spSqlite.Seek();
    CRowsetArray rowset_array;
    try {
        //stream all DB and SQL requests with in-line batching
        auto fopen = sqlite->open(u"");
        auto vF = TestCreateTables(sqlite);
        auto fbt = sqlite->beginTrans();
        auto fp0 = TestPreparedStatements(sqlite, rowset_array);
        auto fp1 = TestBLOBByPreparedStatement(sqlite, rowset_array);
        auto fet = sqlite->endTrans();
        auto vFb = TestBatch(sqlite, rowset_array);

        cout << "All SQL requests are streamed,";
        cout << " and waiting for results ......\n";
        wcout << fopen.get().ToString() << endl;
        for (auto &e : vF) {
            wcout << e.get().ToString() << endl;
        }
        wcout << fbt.get().ToString() << endl;
        wcout << fp0.get().ToString() << endl;
        wcout << fp1.get().ToString() << endl;
        wcout << fet.get().ToString() << endl;
        for (auto& e : vFb) {
            wcout << e.get().ToString() << endl;
        }
    }
    catch(CServerError & ex) {
        wcout << ex.ToString() << "\n";
    }
    catch(CSocketError & ex) {
        wcout << ex.ToString() << "\n";
    }
    /*
    catch(exception & ex) {
        wcout << "Unexpected error: " << ex.what() << "\n";
    }*/
    //print out all received rowsets
    int index = 0;
    cout << "\n+++++ Start rowsets +++\n";
    for (auto &pair : rowset_array) {
        cout << "Statement index: " << index;
        if (pair.first.size()) {
            cout << ", columns: " << pair.first.size() << ", records: " <<
                pair.second.size() / pair.first.size() << ".\n";
        } else {
            cout << ", no rowset received.\n";
        }
        ++index;
    }
    cout << "+++++ End rowsets +++\n\n";
    cout << "Press any key to close the demo ......\n";
    ::getchar();
    return 0;
}
</pre>
</td>
<td><p>Let us look at database client side code as shown at the left code snippet 2.
The sample code snippet comes from the file test_csqlite.cpp at directory ../socketpro/stream_sql/usqlite/test_csqlite.</p>
<p>First of all, we ignore boilerplate code lines between 21 and 39 as shown in many previous samples.</p>
<p>Next, we open a database at line 42 with an empty string for a default database set at server side.
The call immediately returns a future <i>fopen</i> for a DB request structure <i>ErrInfo</i> as described at the previous code snippet 1.
The default database is usqlite.db at the line 43 of the code snippet 2 of <a href="cpp_router.htm" title="SocketPro Server Routing Communication Pattern and Microservices">this previous article</a>.</p>
<p>Next, we create an array of tables for the coming testings as shown at line 43.
Because we may create multiple tables with multiple DB definition statements, the function <i>TestCreateTables</i> will immediately return an array of futures <i>vF</i> for the corresponding number of structures <i>SQLExeInfo</i> without waiting for expected results.</p>
<p>Next, start a manual transaction at line 44. As expected, it immediately returns with a future <i>fbt</i> without waiting for its expected result from server.</p>
<p>Next, we use prepare statements to insert and query records at lines 45 and 46. The prepare statements are involved with inserting and retrieving large BLOB and text objects at fast speed but lowest memory foot print.
We will discuss them with details later. As expected, they will immediately return two futures <i>fp0</i> and <i>fp1</i> for two <i>SQLExeInfo</i> structures without waiting for server responses.</p>
<p>At line 47, we end manual transaction which immediately returns a future <i>fet</i> for an <i>ErrInfo</i> structure.</p>
<p>Next, we will test executing requests batch at line 48. We will discuss it with details later</p>
<p>It is noted that all of requests between lines 42 and 48 are streamed with in-line batching for the best network efficiency. This is the style of SocketPro!
As previous examples demonstrate, SocketPro always favors streaming requests with in-line batching whenever possible and there are multiple requests involved.</p>
<p>At end, we wait by calling the future method <i>get</i>, and show all of returned results from line 52 through 62.
It is noted that all returning results are sent from server to client with streaming and in-line batching too for the best network efficiency.</p>
<p>Finally, we show all collected rowsets at line 76 through 87.</p>
</td>
</tr>
</table>
Code snippet 2: Main console unit test code for DB and SQL requests streaming against SQLite server plugin
<hr />
<table style="width:100%;">
<tr>
<td style="width:30%;">
<?prettify linenums=1?>
<pre class="prettyprint">
vector&lt;CSqlFuture&gt; TestCreateTables(shared_ptr&lt;CSqlite&gt; sqlite) {
    vector&lt;future&lt;CSqlite::SQLExeInfo&gt;&gt; v;
    v.push_back(sqlite->execute(u"CREATE TABLE COMPANY(ID INT8 PRIMARY KEY NOT NULL,name CHAR(64)\
        NOT NULL, ADDRESS varCHAR(256)not null,Income float not null)"));
    const char16_t* ct = u"CREATE TABLE EMPLOYEE(EMPLOYEEID INT8 PRIMARY KEY NOT NULL unique,\
        CompanyId INT8 not null,name NCHAR(64)NOT NULL,JoinDate DATETIME not null \
        default(datetime('now')),IMAGE BLOB,DESCRIPTION NTEXT,Salary real,\
        FOREIGN KEY(CompanyId)REFERENCES COMPANY(id))";
    v.push_back(sqlite->execute(ct));
    return v;
}
</pre>
</td>
<td>
<p>The left code snippet 3 shows how to use the method <i>execute</i> for creating tables with two basic DB definition statements.
The method <i>TestCreateTables</i> simply returns two futures at line 10 for two <i>SQLExeInfo</i> structures without waiting for server response at all.</p>
</td>
</tr>
</table>
Code snippet 3: Create tables with basic DB definition statements
<hr />
<table style="width:100%;">
<tr>
<td style="width:30%;">
<?prettify linenums=1?>
<pre class="prettyprint">
CSqlFuture TestPreparedStatements(shared_ptr&lt;CSqlite&gt; sqlite, CRowsetArray&ra) {
    sqlite->Prepare(u"Select datetime('now');\
        INSERT OR REPLACE INTO COMPANY(ID,NAME,ADDRESS,Income)VALUES(?,?,?,?)");

    CDBVariantArray vData;
    vData.push_back(1);
    vData.push_back("Google Inc.");
    vData.push_back("1600 Amphitheatre Parkway, Mountain View, CA 94043, USA");
    vData.push_back(66000000000.0);

    vData.push_back(2);
    vData.push_back("Microsoft Inc.");
    vData.push_back("700 Bellevue Way NE- 22nd Floor, Bellevue, WA 98804, USA");
    vData.push_back(93600000000.0);

    vData.push_back(3);
    vData.push_back("Apple Inc.");
    vData.push_back("1 Infinite Loop, Cupertino, CA 95014, USA");
    vData.push_back(234000000000.0);

    return sqlite->execute(vData,[&ra](CSqlite&handler CDBVariantArray&vData){
        //rowset data come here
        assert((vData.size() % handler.GetColumnInfo().size()) == 0);
        CDBVariantArray &va = ra.back().second;
        if (va.empty())
            va = move(vData);
        else
            move(vData.begin(), vData.end(), back_inserter(va));
    }, [&ra](CSqlite & handler) {
        //rowset header comes here
        auto &vColInfo = handler.GetColumnInfo();
        CPColumnRowset column_rowset_pair;
        column_rowset_pair.first = vColInfo;
        ra.push_back(column_rowset_pair);
    });
}
</pre>
</td>
<td>
<p>In comparison to the above snippet 3, the left code snippet 4 is a little more complicated.
First, this snippet involves sending a prepare SQL statement at lines 2 and 3.
Afterwards, we prepare an array of sample data between line 5 and 19.
At end, we send the array of data at line 21 and return a future for <i>SQLExeInfo</i> immediately.</p>
<p>At the first glance, the code between line 21 and 35 is somewhat complicated, but it is understandable.
It is noted that the sample preparing SQL statement consists of one query and one insert statement at line 2 and 3, respectively.
When the function <i>TestPreparedStatements</i> is called, a client will expect three sets of records returned and three records inserted into the table COMPANY.
The sample is designed for demonstrating the power of SocketPro SQL-stream technology.
In reality, you probably don't prepare a combined SQL statement having multiple basic SQL statements.
If you use a parameterized statement, you are required to send a prepare request first.
After obtaining an array of data as shown in the left code snippet 4, you can send multiple sets of parameter data for processing from client to server in one single shot at the end.
If you have a large amount of data, you could call the method <i>execute</i> repeatedly without needing to prepare a statement again.</p>
<p>Next, we need more details for how to handle returning record sets.
The method <i>execute</i> has two callbacks or Lambda expressions for the second and third input parameters except the first input for parameter data array.
Whenever a record set is coming, the second callback at line 29 through 35 will be automatically called at first by SQLite client handler <i>CSqlite</i> for record set column meta information.
If actual records are available, the first callback at line 21 through 29 will be called and you can populate data into a container <i>ra</i>.
If we take the left code snippet 4 as a sample, both the first and second callbacks will be called three times due to the simple SQL query (<i>Select datetime('now')</i>).
However, it is expected that the times of calling the first callback is dependent on both the number of records and the size of one record for other queries.
</p>
<p>In reality, the second callback for meta info is ignorable because we know meta information ahead. Therefore, the method <i>execute</i> coud just take two inputs.
Further, it may requires just one input, as shown at the previous code snippet 3, if we don't care for record data.</p>
</td>
</tr>
</table>
Code snippet 4: Use parameterized statement for inserting and retrieving records in batch
<hr />
<table style="width:100%;">
<tr>
<td style="width:30%;">
<?prettify linenums=1?>
<pre class="prettyprint">
CSqlFuture TestBLOBByPreparedStatement(shared_ptr&lt;CSqlite&gt; sqlite, CRowsetArray&ra){
    sqlite->Prepare(u"insert or replace into employee(EMPLOYEEID,CompanyId,name,\
            JoinDate,image,DESCRIPTION,Salary)values(?,?,?,?,?,?,?);\
            select * from employee where employeeid=?");

    SYSTEMTIME st;
    CDBVariantArray vData;
    SPA::CScopeUQueue sbBlob;

    //first set of data
    vData.push_back(1);
    vData.push_back(1); //google company id
    vData.push_back(u"Ted Cruz");
#ifdef WIN32_64
    ::GetLocalTime(&st);
#else
    ::gettimeofday(&st, nullptr);
#endif
    vData.push_back(st);
    sbBlob << g_wstr;
    vData.push_back(CDBVariant(sbBlob->GetBuffer(), sbBlob->GetSize()));
    vData.push_back(g_wstr.c_str()); //large unicode string
    vData.push_back(254000.0);
    vData.push_back(1);

    //second set of data
    vData.push_back(2);
    vData.push_back(1); //google company id
    vData.push_back("Donald Trump");
#ifdef WIN32_64
    ::GetLocalTime(&st);
#else
    ::gettimeofday(&st, nullptr);
#endif
    vData.push_back(st);
    sbBlob->SetSize(0);
    sbBlob << g_str;
    vData.push_back(CDBVariant(sbBlob->GetBuffer(), sbBlob->GetSize()));
    vData.push_back(g_str.c_str()); //large ASCII string
    vData.push_back(20254000.0);
    vData.push_back(2);

    //third set of data
    vData.push_back(3);
    vData.push_back(2); //Microsoft company id
    vData.push_back("Hillary Clinton");
#ifdef WIN32_64
    ::GetLocalTime(&st);
#else
    ::gettimeofday(&st, nullptr);
#endif
    vData.push_back(st);
    sbBlob << g_wstr;
    vData.push_back(CDBVariant(sbBlob->GetBuffer(), sbBlob->GetSize()));
    vData.push_back(g_wstr.c_str()); //large unicode string
    vData.push_back(6254000.0);
    vData.push_back(3);

    //execute multiple sets of parameter data in one call
    return sqlite->execute(vData, [&ra](CSqlite &handler, CDBVariantArray & vData) {
        //rowset data come here
        assert((vData.size() % handler.GetColumnInfo().size()) == 0);
        CDBVariantArray &va = ra.back().second;
        if (va.empty())
            va = move(vData);
        else
            move(vData.begin(), vData.end(), back_inserter(va));
    }, [&ra](CSqlite & handler) {
        //rowset header comes here
        auto &vColInfo = handler.GetColumnInfo();
        CPColumnRowset column_rowset_pair;
        column_rowset_pair.first = vColInfo;
        ra.push_back(column_rowset_pair);
    });
}
</pre>
</td>
<td>
<p>Now, you can see SocketPro SQL-stream technology provides all required features for accessing a backend database.
Further, we are going to use the sample for how to handle large binary and text objects within SocketPro-stream technology.
Usually, it is difficult to access large objects inside databases efficiently.
However, it is truly very simple with SocketPro SQL-stream technology for both development and efficiency, as shown at the left code snippet 5.</p>

<p>After looking through the code within the snippet 5,
you would find that this code snippet is really the same as one in the previous code snippet 4 although this code snippet is longer.
Therefore, this approach is really a good thing for a software developer to reuse SocketPro SQL-stream technology for dealing all types of database table fields in the same coding style for easy development.</p>

<p>SocketPro always divides a large binary or text object into chunks first at both client and server sides.
Afterwards, SocketPro sends these smaller chunks to the other side.
At the end, SocketPro will reconstruct the original large binary or text object from collected smaller chunks.
This happens silently at run time for reduction of memory foot print.</p>
</td>
</tr>
</table>
Code snippet 5: Use parameterized statement for inserting and retrieving records with BLOBs and long texts in batch
<hr />
<table style="width:100%;">
<tr>
<td style="width:30%;">
<?prettify linenums=1?>
<pre class="prettyprint">
vector&lt;CSqlFuture&gt; TestBatch(shared_ptr&lt;CSqlite&gt; sqlite, CRowsetArray &ra) {
    vector&lt;CSqlFuture&gt; vF;
    CDBVariantArray vParam;
    vParam.push_back(1); //ID
    vParam.push_back(2); //EMPLOYEEID
    //there is no manual transaction if isolation is tiUnspecified
    vF.push_back(sqlite->executeBatch(tagTransactionIsolation::tiUnspecified,
        u"Select datetime('now');select * from COMPANY where ID=?;
        select * from EMPLOYEE where EMPLOYEEID=?",
        vParam, [&ra](CSqlite &handler, CDBVariantArray & vData) {
            //rowset data come here
            assert((vData.size() % handler.GetColumnInfo().size()) == 0);
            CDBVariantArray &va = ra.back().second;
            if (va.empty())
                va = move(vData);
            else
                move(vData.begin(), vData.end(), back_inserter(va));
        }, [&ra](CSqlite & handler) {
            //rowset header comes here
            auto &vColInfo = handler.GetColumnInfo();
            CPColumnRowset column_rowset_pair;
            column_rowset_pair.first = vColInfo;
            ra.push_back(column_rowset_pair);
        }));

    vParam.clear();
    vParam.push_back(1); //ID
    vParam.push_back(2); //EMPLOYEEID
    vParam.push_back(2); //ID
    vParam.push_back(3); //EMPLOYEEID
    //Same as sqlite->beginTrans();
    //Select datetime('now');
    //prepare for select * from COMPANY where ID=?
    //select * from COMPANY where ID=1;
    //select * from COMPANY where ID=2;
    //Select datetime('now');
    //prepare for select * from EMPLOYEE where EMPLOYEEID=?
    //select * from EMPLOYEE where EMPLOYEEID=2;
    //select * from EMPLOYEE where EMPLOYEEID=3
    //ok = sqlite->endTrans();
    vF.push_back(sqlite->executeBatch(tagTransactionIsolation::tiReadCommited,
        u"Select datetime('now');select * from COMPANY where ID=?;
        Select datetime('now');select * from EMPLOYEE where EMPLOYEEID=?",
        vParam, [&ra](CSqlite &handler, CDBVariantArray & vData) {
            //rowset data come here
            assert((vData.size() % handler.GetColumnInfo().size()) == 0);
            CDBVariantArray &va = ra.back().second;
            if (va.empty())
                va = move(vData);
            else
                move(vData.begin(), vData.end(), back_inserter(va));
        }, [&ra](CSqlite & handler) {
            //rowset header comes here
            auto &vColInfo = handler.GetColumnInfo();
            CPColumnRowset column_rowset_pair;
            column_rowset_pair.first = vColInfo;
            ra.push_back(column_rowset_pair);
        }));
    return vF;
}
</pre>
</td>
<td>
<p>SocketPro also provides a special method to group all DB and SQL requests such as <i>prepare</i>, <i>beginTrans</i>, <i>endTrans</i> and <i>execute</i> into a large batch request as shown at the left code snippet 6.
</p>
<p>Inside the method <i>TestBatch</i>, we call the method <i>executeBatch</i> at line 7 with the first input as <i>tiUnspecified</i>.
The batch is excuted with querying three sets of records with executing one prepare statement at server side because there is an arry of input parameter data.
If the thir input parameter is empty, the method <i>executeBatch</i> would be the same as the method <i>execute</i>.
</p>
<p>We can also group a bunch of DB and SQL requests with the first input other than <i>tiUnspecified</i> as shown at line 41 through 58, although the sample prepare statement does not have to require a manual transaction here.
As commented inside the code snippet here, it involves <i>beginTrans</i>/<i>endTrans</i>, <i>prepare</i>, <i>execute</i>, and so on.
</p>
<p>The method <i>executeBatch</i> has a number of advantages such as better performance, cleaner codes and better integration with SocketPro client queue.</p>
</td>
</tr>
</table>
Code snippet 6: Execute different SQL requests in batch with or without manual transaction
<hr />
<p>At end, SocketPro SQLite server plugin is written from C/C++. Its project is located at the directory ../socketpro/stream_sql/usqlite/ssqlite,
but implementation files are located at the directory ../socketpro/include/sqlite/server_impl.
Like <a href="cpp_serverqueue.htm" title="SocketPro Server Persistent Message Queue">the previous SocketPro server plugin</a>, the SocketPro SQLite server plugin is not complicate at all.
In fact, it is small, simple and understandable to a middle level of C++ software engineer. The SQLite plugin is free to the public individuals for you to study and experiment.
However, it is noted that it is not free to companies or enterprises for commercial purposes.
</p>
<hr />
<h3>Test SQLite server plugin</h3>
To test the SQLite server plugin, run the sample server application <a href="get_started.htm" title="Get Started With SocketPro">all_servers</a> first.
Afterwards, compile this sample code and execute it.
Further, you can uncomment the code at line 31 of the above code snippet 2 to enable client queue for better fault tolerance and auto recovery.
<hr />
</body>
</html>
