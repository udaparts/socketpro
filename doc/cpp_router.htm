<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title>SocketPro Server Routing Communication Pattern and Microservices</title>
    <link rel="stylesheet" type="text/css" href="codepretty/sons-of-obsidian.css">
    <script type="text/javascript" src="codepretty/prettify.js"></script>
</head>
<body onload="PR.prettyPrint()">
<h1 style="text-align: center;">SocketPro Server Routing Communication Pattern and Microservices</h1>
<hr />
<p>SocketPro secured asynchronous communication framework is written from scratch with continuous in-line request/result batching, real-time stream sending/processing, asynchronous data transferring and parallel computation in mind.
So far We have introduced a set of short articles with sample projects to demonstrated tradition <a href="cpp_hw.htm" title="SocketPro Client Server Application Development">client/server communication pattern</a> and
<a title="SocketPro Secure Communication and Publish/Subscribe Messaging" href="cpp_push.htm">subscribe/publish messaging</a> with secure communication.
The two demo projects are created for desktop or middle server applications development.
Next, <a href="cpp_web.htm" title="SocketPro WebSocket for Client/server and Subscribe/publish Messaging on Browsers">this sample</a> is created to show you that SocketPro also supports both client/server and subscribe/publish messaging patterns on web browsers with help of websocket.</p>

<p>In additon to the two communication patterns, SocketPro have built-in message queues implemented for both client and server sides.
Its <a href="cpp_hw.htm" title="SocketPro Client Server Application Development">client message queue</a> can be easily used for fail auto-recovery to improve enterprise application fault-tolerance, reliability and maintenance as well as middle tier availability.
Its server queue, as shown at <a href="cpp_serverqueue.htm" title="SocketPro Server Persistent Message Queue">this artcle</a>, supports that producers and consumers interact at the different time with asynchronous communication pattern.
As shown in <a href="cpp_serverqueue.htm" title="SocketPro Server Persistent Message Queue">the sample project</a>, messages will NEVER be lost if client queue is enabled at producer side.
</p>

<p>SocketPro server is also capable to function like a router which is about to be demonstrated with this article. Requests from a number of clients can be sent to a SocketPro server, which acts like a router and routes all of these requests onto a new array of clients for processing.
When these original requests are processed and their corresponding results are sent back to the SocketPro server, the server will correctly route these results back to their original clients as expected. In fact, the server can be considered to be a load balancer too.
In addition, we will talk about <a href="get_started.htm" title="Get Started With SocketPro">all_servers</a>, which have been used as a common test server to provide many microservices for many samples.</p>
<hr />
<table style="width:100%;">
<tr>
<td style="width:25%;">
<?prettify linenums=1?>
<pre class="prettyprint">
#include "stdafx.h"
#include "pi.h"
using namespace std;

int main(int argc, char* argv[]) {
    CConnectionContext cc;
    cout << "Input router server ip address ......\n";
    getline(cin, cc.Host);
    cc.Port = 20901;
    cc.UserId = L"MyUserId";
    cc.Password = L"MyPassword";

    typedef CSocketPool&lt;Pi&gt; CMyPool;
    CMyPool spPi;
    spPi.SetQueueName("pi_queue");
    if (!spPi.StartSocketPool(cc, 1)) {
        cout << "No connection to " << cc.Host <<
                "\nPress a key to shutdown the demo ......\n";
        ::getchar();
        return 1;
    }
    auto pi = spPi.SeekByQueue();

    vector&lt;future&lt;CScopeUQueue&gt; &gt; vfR;
    int nDivision = 1000, nNum = 10000000;
    double dPi = 0.0, dStep = 1.0 / nNum / nDivision;
    for (int n = 0; n < nDivision; ++n) {
        double dStart = (double) n / nDivision;
        vfR.push_back(pi->sendRequest(idComputePi, dStart, dStep, nNum));
    }

    double res;
    for (auto& f : vfR) {
        CScopeUQueue sb = f.get();
        sb >> res;
        dPi += res;
        cout << "dStart: " << sb->Load&lt;double&gt;() << "\n";
    }
    cout.precision(14);
    cout << "pi: " << dPi << ", returns: " << vfR.size() <<
            "\nPress a key to shutdown the demo ......\n";
    ::getchar();
    return 0;
}
</pre>
</td>
<td>
<p>First of all, the left code snippet comes from the file ../socketpro/tutorials/cplusplus/Loading_balance/lb_client/lb_client.cpp.</p>
<hr />
<p>We are going to compute the value of π using the numerical integration below. </p>
<img src="images/pi_value.jpg" alt="" />
<br />
Figure 1: Compute π value by use of numerical integration
<p>We can use trapezoidal integration to solve the integral. The basic idea is to fill the area under a curve with a series of tiny
rectangles. As the width of a rectangle approaches 0, the sum of the areas of these rectangles approaches the real value of π. To
accurately achieve the value, we must divide the integral area with rectangles as small as possible. Therefore, we are
going to divide the whole integration into a set of sections and send them onto different working machines (clients/workers) with a
SocketPro server as a router. These workers actually finish CPU-extensive numerical integration in parallel. The sending
machine (client) will collect the integral values of these sections from these workers, and then add them to get the π value.</p>
<p>We are going to ignore trivial lines of codes within the left code snippet 1. First, look at the code line 15.
We enable client queue to improve fault tolerance due to any errors related with router (or SocketPro server) or workers.
At code line 22, we get a π handler by calling the method <i>SeekByQueue</i>. You can find its implementation at the file ../socketpro/include/aclientw.h.</p>
<p>Next, we divide the whole integration into 1000 divisions, and each of these divisions will again be divided at worker sides into 10,000,000 tiny parts as shown at line 25.
Next, we send 1000 requests onto a remote server as shown at line 27 through 30, and put 1000 futures into a vector <i>vfR</i>.</p>
<p>At end, we collect all expected results and sum them together at line 36. As you can see, the code does not seem complex at all at client side.
Let us move to server or router side development.</p>
</td>
</tr>
</table>
Code snippet 1: A client demo sample for computing π value with numerical integration.
<hr />
<table style="width:100%;">
<tr>
<td style="width:25%;">
<?prettify linenums=1?>
<pre class="prettyprint">
//../socketpro/tutorials/cplusplus/all_servers/all_servers.cpp
#include "stdafx.h"
#include "../../../include/aserverw.h"
#include "../pub_sub/server/HWImpl.h"
#include "../Loading_balance/pi_i.h"
#include "../webdemo/httppeer.h"
#include "../../../include/sqlite/usqlite_server.h"
#include "../../../include/udatabase.h"

class CMyServer : public CSocketProServer {
protected:

    virtual bool OnIsPermitted(USocket_Server_Handle h, const wchar_t*
        userId, const wchar_t* password, unsigned int serviceId) {
        std::wcout << L"Ask for a service " << serviceId << L" from user "
            << userId << L" with password = " << password << "\n";
        return true;
    }

    virtual bool OnSettingServer(unsigned int listeningPort,
        unsigned int maxBacklog, bool v6) {
        Config::SetAuthenticationMethod(tagAuthenticationMethod::amOwn);

        //add service(s) into SocketPro server
        AddServices();

        bool ok = PushManager::AddAChatGroup(1, L"R&D Department");
        ok = PushManager::AddAChatGroup(2, L"Sales Department");
        ok = PushManager::AddAChatGroup(3, L"Management Department");
        ok = PushManager::AddAChatGroup(7, L"HR Department");
        
    ok = PushManager::AddAChatGroup(SPA::UDB::STREAMING_SQL_CHAT_GROUP_ID,
            L"Subscribe/publish for front clients");

        //load socketpro async sqlite library located at the
        //directory ../socketpro/bin/free_services/sqlite
        auto h = DllManager::AddALibrary("ssqlite");
        if (h) {
  PSetSqliteDBGlobalConnectionString f=(PSetSqliteDBGlobalConnectionString)
                GetProcAddress(h, "SetSqliteDBGlobalConnectionString");
            //monitoring sakila.db table events (DELETE, INSERT and UPDATE)
            //for tables actor, language, category, country and film_actor
     f(L"usqlite.db+sakila.db.actor;sakila.db.language;sakila.db.category;\
                sakila.db.country;sakila.db.film_actor");
        }
        //load socketPro server message queue library
        //at the directory ../socketpro/bin/free_services/queue
        //24 * 1024 batch dequeuing size in bytes
        h = DllManager::AddALibrary("uasyncqueue", 24 * 1024);

        //load socketPro file streaming library at the
        //directory ../socketpro/bin/free_services/file
        h = DllManager::AddALibrary("ustreamfile");

        //load MySQL/MariaDB socketPro server plugin library at the
        //directory ../socketpro/bin/free_services/mm_middle
        h = DllManager::AddALibrary("smysql");

        //load ODBC socketPro server plugin library at the
        //directory ../socketpro/bin/win or ../bin/linux
        h = DllManager::AddALibrary("sodbc");

        return true; //true -- ok; false -- no listening server
    }
private:
    //client/server and subscribe/publish messaging
    CSocketProService&lt;HelloWorldPeer&gt; m_HelloWorld;

    //SocketPro server routing demo
    CSocketProService&lt;CDummyPeer&gt; m_Pi;
    CSocketProService&lt;CDummyPeer&gt; m_PiWorker;

    //HTTP/websocket + client/server and subscribe/publish messaging
    CSocketProService&lt;CHttpPeer&gt; m_myHttp;
private:

    void AddServices() {
        bool ok = m_Pi.AddMe(sidPi); //load balance/routing client
        ok = m_PiWorker.AddMe(sidPiWorker); //load balance/routing worker
        ok = Router::SetRouting(sidPi, sidPiWorker);

        //Hello World
        ok = m_HelloWorld.AddMe(sidHelloWorld);
        ok = m_HelloWorld.AddSlowRequest(idSleep);

        //HTTP and WebSocket services
        //Copy uloader.js & uwebsocket.js at ../socketpro/bin/js and
        //earthcity.jpg & ws0.htm at ../socketpro/tutorials/webtests into
        //the directory where this application is located
        ok = m_myHttp.AddMe((unsigned int)SPA::tagServiceID::sidHTTP);
        ok = m_myHttp.AddSlowRequest((unsigned short)tagHttpRequestID::idGet);
        ok = m_myHttp.AddSlowRequest((unsigned short)tagHttpRequestID::idPost);
        ok = m_myHttp.AddSlowRequest((unsigned short)tagHttpRequestID::idUserRequest);
    }
};

int main(int argc, char* argv[]) {
    CMyServer server;
    if (!server.Run(20901)) {
        int errCode = server.GetErrorCode();
        std::cout << "Error code: " << errCode << "\n";
    }
    std::cout << "Press a key to stop the server ......\n";
    ::getchar(); return 0;
}
</pre>
</td>
<td>
<p>The left code snippet 2 shows implementation of microservices and how to enable SocketPro built-in feature routing. The code comes from the file ../socketpro/tutorial/cplusplus/all_servers/all_servers.cpp.</p>
<hr />
<h3>Micro services</h3>
<p>A SocketPro server can support any number of services. As shown at the code snippet 2 of <a title="SocketPro Secure Communication and Publish/Subscribe Messaging" href="cpp_push.htm">the previous article</a>, we register and set hello world service at lines 83 and 84.
Next, we register and set HTTP/websocket service at line 90 through 93 as shown at the code snippet 2 of <a href="cpp_web.htm" title="SocketPro WebSocket for Client/server and Subscribe/publish Messaging on Browsers">this article for web browser developments</a>.

</p>
<hr />
<h3>SocketPro Built-in Feature Routing</h3>
<p>Also, we simply register the two srvices, sidPi and sidPiWorker, at lines 78 and 79, respectively.
Afterwards, we call the method <i>SetRouting</i> at line 80 to enable the built-in feature routing so that this demo server also function as a load balancer.
So far we have registered four services with one particular feature for server load balancing.</p>
<hr />
<h3>Loading SocketPro server plugins</h3>
<p>At this time, you can use C/C++ to write server plugins as shown at <a href="cpp_serverqueue.htm" title="SocketPro Server Persistent Message Queue">the code snippet 4 of the previous article</a>.
The five server plugins can be loaded into a server for reuse, as shown at line 37 through 61 of the left code snippet 2.
The five plugins are described with more details at <a href="get_started.htm" title="Get Started With SocketPro">this article</a> before. A plugin requires exposing seven pre-defined functions at least.
However, we can expose more functions for other purposes as shown at line 39 through 44. We will talk a few plugins more in the coming articles.
</p>
<p>It is noted that SocketPro comes with a number of pre-compiled plugins for you to experiment and learn. They are not completely ready for resue within your commercial applications yet.
However, they are good examples and reusable as development basis for your commercial or enterprise applications.</p>
</td>
</tr>
</table>
Code snippet 2: SocketPro router server and mircoservices implementation
<hr />
<table style="width:100%;">
<tr>
<td style="width:25%;">
<?prettify linenums=1?>
<pre class="prettyprint">
//.../socketpro/tutorials/cplusplus/Loading_balance/lb_worker/pi.h
#include "../../../../include/aclientw.h"

using namespace SPA;
using namespace SPA::ClientSide;

/* including all of defines, service id(s) and request id(s) */
#include "../pi_i.h"

//client handler for service Pi

class Pi : public CAsyncServiceHandler {
public:

    Pi(CClientSocket *pClientSocket)
    : CAsyncServiceHandler(sidPiWorker, pClientSocket) {
    }

protected:

    virtual void OnResultReturned(unsigned short reqId, CUQueue &mc) {
        if (IsRouteeRequest()) {
            switch (reqId) {
                case idComputePi:
                {
                    double dStart, dStep;
                    int nNum;
                    mc >> dStart >> dStep >> nNum;
                    double dX = dStart + dStep / 2;
                    double dd = dStep * 4.0;
                    double ComputeRtn = 0.0;
                    for (int n = 0; n < nNum; n++) {
                        dX += dStep;
                        ComputeRtn += dd / (1 + dX * dX);
                    }
                    SendRouteeResult(reqId, ComputeRtn, dStart);
                }
                    break;
                default:
                    break;
            }
        }
    }
};

//.../socketpro/tutorials/cplusplus/Loading_balance/lb_worker/lb_worker.cpp
#include "stdafx.h"
#include "pi.h"
#include &lt;thread&gt;
using namespace std;

int main(int argc, char* argv[]) {
    CConnectionContext cc;
    cout << "This is worker. Input router server ip address ......\n";
    getline(cin, cc.Host);

    cc.Port = 20901;
    cc.UserId = L"My_LB_UserId";
    cc.Password = L"My_LB_Password";

    typedef CSocketPool&lt;Pi&gt; CMyPool;
    CMyPool spPi;
    spPi.StartSocketPool(cc, 1, thread::hardware_concurrency());
    cout << "Press a key to shutdown the demo application ......\n";
    ::getchar();
    return 0;
}
</pre>
</td>
<td>
<p>After having looked at client and server sides, it is time to move to worker side.
The left code snippet 3 comes with the files pi.h and lb_worker.cpp of the directory ../socketpro/tutorials/cplusplus/Loading_balance/lb_worker.</p>
<p>At worker side, the virtual function <i>OnResultReturned</i> will be called when a connected worker receives a request routed from a SocketPro server.
Inside the virtual function, we need to check at line 22 if a request is indeed one routed from a SocketPro server, which is originated from a client.
After computation from line 28 through 35, we send a result <i>ComputeRtn</i> with an index <i>dStart</i> back to its original client through the middle server.
It is noted that the de-serialization at line 28 is mirroring to the serialization at line 29 of the above code snippet 1.</p>
<p>Finally, let us look at line 63. Here, we start a socket pool with the number of threads equal to the number of processors. Each of threads hosts one socket only.
Previously, we have just used one thread only all times.
However, here we use multiple threads for a socket pool because these requests are CPU extensive and we need multiple processors to process them in parallel.</p>
</td>
</tr>
</table>
Code snippet 3: A sample routing worker side implementation
<hr />
<h2>Fault-tolerance and auto-recovery tests</h2>
<p>Compile projects at the directories ../socketpro/tutorials/cplusplus/Loading_balance/lb_worker and ../socketpro/tutorials/cplusplus/Loading_balance/lb_client to generate lb_worker and lb_client executables, respectively.
After running the <a href="get_started.htm" title="Get Started With SocketPro">all_servers</a> and lb_worker, run the excutable lb_client for outputs.
You will find that expected results come from workers with somewhat randomness, but the final π value is correct as expected.
Further, we can sort these results with an index <i>dStart</i> at line 37 of the above code snippet 1 to remove the randomness. The randomness is caused by worker side parallel computation without any guarantee of sequencing.</p>
<p>During computation, you can brutally kill and restart the server <a href="get_started.htm" title="Get Started With SocketPro">all_servers</a>, worker lb_worker or both repeatedly.
You will find the final π value is still correct. By this time, you can see SocketPro client message queue is a key fetaure to fault-tolerance and auto-recovery!</p>
<hr />
</body>
</html>
