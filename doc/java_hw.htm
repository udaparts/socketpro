<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title>SocketPro Client Server Application Development</title>
    <link rel="stylesheet" type="text/css" href="codepretty/sons-of-obsidian.css">
    <script type="text/javascript" src="codepretty/prettify.js"></script>
</head>
<body onload="PR.prettyPrint()">
<h1 style="text-align: center;">SocketPro client server application development</h1>
<p>
This is our second example for developing a client server application with SocketPro.
Its original project could be found at the directory ../socketpro/tutorials/java/src/hello_world/client.
Because the sample involves echoing a complex struture between client and server,
you may need to refer to <a title="SocketPro Request Parameters Packing and Result Unpacking" href="java_buffer.htm">the first sample</a>.
In addition, we need the pre-distributed server application <a href="get_started.htm" title="Get Started With SocketPro">all_servers</a> for testing.
</p>
<hr />

<table style="width:100%;">
<tr>
<td style="width:30%;">
<?prettify linenums=1?>
<pre class="prettyprint">
//../socketpro/tutorials/java/src/hello_world/client/HelloWorld.java
package hello_world.client;

import SPA.*;
import SPA.ClientSide.*;
import hello_world.hwConst;

public class HelloWorld extends CAsyncServiceHandler {

    public HelloWorld() {
        super(hello_world.hwConst.sidHelloWorld);
    }

    public String SayHello(String firstName, String lastName) throws CSocketError, CServerError {
        try (CScopeUQueue sb = new CScopeUQueue()) {
        UFuture&lt;CScopeUQueue&gt; f = sendRequest(hwConst.idSayHello, sb.Save(firstName).Save(lastName));
            return f.get().LoadString();
        }
    }

    public void Sleep(int ms) throws CSocketError, CServerError {
        try (CScopeUQueue sb = new CScopeUQueue()) {
            UFuture&lt;CScopeUQueue&gt; f = sendRequest(hwConst.idSleep, sb.Save(ms));
            f.get(); //wait until it returns
        }
    }

    public uqueue_demo.CMyStruct Echo(uqueue_demo.CMyStruct ms) throws CSocketError, CServerError {
        try (CScopeUQueue sb = new CScopeUQueue()) {
            UFuture&lt;CScopeUQueue&gt; f = sendRequest(hwConst.idEcho, sb.Save(ms));
            uqueue_demo.CMyStruct res = f.get().Load(uqueue_demo.CMyStruct.class);
            return res;
        }
    }
}
</pre>
</td>
<td>
<p>First of all, Java client needs a service handler at client side, which usually extends its base class CAsyncServiceHandler as shown at the left code snippet 1.
The class has three synchronous requests (SayHello, Sleep and Echo) implemented.
The three requests indeed share many similarities although they have different input signatures.
</p>
<p>All three requests may throw one of two exceptions, CSocketError and CServerError. The first exception corresponds to communication channel error.
The second one represents a caught exception from server as implied from its name.
In addition to the two types of exceptions, you may catch other exceptions related with coding errors such as bad serialization, fault de-serialization, invalid argument, and so on.</p>
<p>All three requests call the method <i>sendRequest</i> to send an array of bytes in the variable <i>sb</i> and immediately obtain a future <i>f</i> for server returning result without blocking.</p>
<p>All three requests are synchronous methods to a caller. However, all of them are converted from asynchronous method <i>sendRequest</i> by calling the future <i>f</i> method <i>get</i>.
It is noted that the call <i>f.get()</i> returns an instance of CScopeUQueue. In regards to the code at line 31, please refer to the <a title="SocketPro Request Parameters Packing and Result Unpacking" href="java_buffer.htm">previous article</a>.
</p>
<p>In short, SocketPro client requests are asynchronous by default, but all of them can be converted into synchronous ones easily.</p>
</td>
</tr>
</table>
<h4>Code snippet 1: Class HelloWorld and its three synchronous requests</h4>
<hr />
<table style="width:100%;">
<tr>
<td style="width:30%;">
<?prettify linenums=1?>
<pre class="prettyprint">
//../socketpro/tutorials/java/src/hello_world/client/Program.java
package hello_world.client;

import SPA.*;
import SPA.ClientSide.*;
import uqueue_demo.CMyStruct;
import hello_world.hwConst;

public class Program {

public static void main(String[] args) {
    CConnectionContext cc = new CConnectionContext("localhost", 20901, "hwUserId", "hwPassword");
    try (CSocketPool&lt;HelloWorld&gt; spHw = new CSocketPool<>(HelloWorld.class)) {
        //optionally start a client queue for auto failure recovery
        //spHw.setQueueName("helloworld");
        boolean ok = spHw.StartSocketPool(cc, 1);
        HelloWorld hw = spHw.Seek();
        if (ok) {
            CMyStruct ms, ms0 = CMyStruct.MakeOne();
            try {
                //process requests one by one synchronously
                System.out.println(hw.SayHello("John", "Dole"));
                hw.Sleep(5000);
                ms = hw.Echo(ms0);
                assert ms == ms0;
            } catch (CServerError ex) {
                System.out.println(ex);
            } catch (CSocketError ex) {
                System.out.println(ex);
            } catch (Exception ex) {
                //bad parameter, CUQueue de-serilization exception
                System.out.println("Unexpected error: " + ex.getMessage());
            }
            try {
                //streaming multiple requests with inline batching for the best network efficiency
                UFuture&lt;CScopeUQueue&gt; f0 = hw.sendRequest(hwConst.idSayHello,
                    new CScopeUQueue().Save("Jack").Save("Smith"));
                UFuture&lt;CScopeUQueue&gt; f1 = hw.sendRequest(hwConst.idSayHello,
                    new CScopeUQueue().Save("Donald").Save("Trump"));
                UFuture&lt;CScopeUQueue&gt; f2 = hw.sendRequest(hwConst.idSleep,
                    new CScopeUQueue().Save(6000));
                UFuture&lt;CScopeUQueue&gt; f3 = hw.sendRequest(hwConst.idSayHello,
                    new CScopeUQueue().Save("Hilary").Save("Clinton"));
                UFuture&lt;CScopeUQueue&gt; f4 = hw.sendRequest(hwConst.idEcho,
                    new CScopeUQueue().Save(ms0));
                //hw.getSocket().Cancel();
                System.out.println(f0.get().LoadString());
                System.out.println(f1.get().LoadString());
                assert 0 == f2.get().getUQueue().getSize();
                //String bad = f2.get().getUQueue().LoadString(); //Exception
                System.out.println(f3.get().LoadString());
                CScopeUQueue sb = f4.get();
                ms = sb.Load(uqueue_demo.CMyStruct.class);
                assert ms == ms0;
            } catch (CServerError ex) {
                System.out.println(ex);
            } catch (CSocketError ex) {
                System.out.println(ex);
            } catch (Exception ex) {
                //bad parameter, CUQueue de-serilization exception
                System.out.println("Unexpected error: " + ex.getMessage());
            }
        } else {
            System.out.println("No connection error code: " + spHw.getSockets()[0].getErrorCode());
        }
        System.out.println("Press ENTER key to kill the demo ......");
        new java.util.Scanner(System.in).nextLine();
    }
}
}
</pre>
</td>
<td>
    <h3>Key points from top to bottom for code snippet 1:</h3>
    <ul>
        <li>
        Three fake synchronous requests:
        <hr />
        <ol>
            <li>Start a pool of sockets at line 16, which has one thread hosting one non-blocking socket for communication between client and server.
            In reality, one worker thread is enough under most cases, but you may like to use multiple sockets per thread for processing at server side with better concurency.
            We use one socket here for this demo sample. By default, the pool of sockets can be auto reconnected if servers shut down and restart.</li>
            <li>Find an async handler from the above pool spHw at line 17. SocketPro perfers sharing a pool of connected sockets from your different threads.
            As you can see from here, you need to find one of sockets from the pool at run time, which should have least requests queued. You can step into the method within your debugger.
            Also, it is noted that the method Seek is thread-safe. Keep in mind that SocketPro favors sharing a session among your multiple threads!</li>
            <li>Prepare a complex structure at line 19 for coming tests as explained at the <a title="SocketPro Request Parameters Packing and Result Unpacking" href="java_buffer.htm">previous example</a>. This sample method ensures that you are confident to use SocketPro for transferrig any complex structures between client and server.</li>
            <li>First, send a request SayHello at line 22, which is synchronous request as described at the above code snippet 1.</li>
            <li>Next, we send a new request Sleep at line 23, which is also synchronous request as described at the above code snippet 1.</li>
            <li>Next, we echo a <a title="SocketPro Request Parameters Packing and Result Unpacking" href="java_buffer.htm">complicated structure</a> (ms0) between client and server at line 24, which is synchronous request as described at the above code snippet 1 too.
            It involves both packing and unpacking the structure at both client and server sides</li>
        </ol>
        <p>
        Each of the above three requests requires one network round trip. Therefore, there are three round-trips required.
        However, SocketPro is designed to support streaming calls asynchrouosly with in-line batching for the best network efficiency.
        We recommend the following approach, if it is proper and there are two or more requests involved.</p>
        </li>
        <li>
        Stream multiple requests with in-line batching for the best network efficiency by reducing the number of network round trips:
        <hr />
        <ol>
            <li>We could send five requests from line 36 through 45, and get five futures returned (f0, f1, f2, f3 and f4) back immediately.
            The five calls are extremely fast because they are not waiting for server returning results at all. Further,
            SocketPro at <a href="get_started.htm" title="Get Started With SocketPro">client core</a> library (usocket) will batch five request buffers internally for you, and send them with as fewer packets as possible at the run time for the best network efficiency.</li>
            <li>Beginning at line 47, we call the method <i>get</i> to get five instances of CScopeUQueue for the five expected results from server from line 47 through 54.
            Similarly, SocketPro <a href="get_started.htm" title="Get Started With SocketPro">server core</a> library (uservercore) will silently do in-line batching returning results on the fly and reduce the network packets as many as possible at server side too.</li>
        </ol>
        <p>This simple sample just demos streaming five requests. In fact, you can stream many requests as you want, just like client requests and server results water flows in circuit endlessly and concuurently.
        Although we stream many requests as you like, all results are returned from server always in sequence (first-request-first-returned).</p>
        <p>
        Imagine you need to send many SQL requests from a client at New York to a server at Los Angeles for processing with one socket connection.
        Saving network round trips could significantly speed up your application if your application performance is dominated by network.</p>
        </li>
        <li>Deal with errors at client side within SocketPro:
        <hr />
        A client application may catch one of the following three errors as shown at line 26 through 33 or 55 through 62.
        <ol>
        <li><i>CServerError</i>: Server side throws an exception, and the client catch it.
            The exception contains an error code, an error message, code location where the exception happens at server side, and a request id.</li>
        <li><i>CSocketError</i>: A communication error happening at client side. The exception contains an error code, an error message and a request id.
        Besides, the exception contains a boolean member before. If it is true, SocketPro finds that communication channel is already closed before sending the request.
        Otherwise, the exception is caught becase either communication channel is closed or canceled after sending the request.
        </li>
        <li><i>Exception</i>: This exception happens because of programming errors. Examples are bad data de-serialization/serialization, invalid arguments, and so on.
        </li>
        </ol>
        </li>
     </ul>
    </td>
</tr>
</table>
<h4>Code snippet 2: Hello world -- a client-server example with synchronous requests and requests streaming for the best network efficiency</h4>
<hr />
Now, let's dig into the method <i>sendRequest</i> which is located inside the class <i>CAsyncServiceHandler</i> at the file ../socketpro/src/jadapter/jspa/src/SPA/ClientSide/CAsyncServiceHandler.java.
<table style="width:100%;">
<tr>
<td style="width:30%;">
<?prettify linenums=1?>
<pre class="prettyprint">
//../socketpro/src/jadapter/jspa/src/SPA/ClientSide/CAsyncServiceHandler.java
private DAsyncResultHandler get_ash(final UFuture&lt;SPA.CScopeUQueue&gt; f) {
    DAsyncResultHandler ash = new DAsyncResultHandler() {
        @Override
        public void invoke(CAsyncResult ar) {
            SPA.CScopeUQueue sb = new SPA.CScopeUQueue();
            sb.getUQueue().Push(ar.getUQueue());
            ar.getUQueue().SetSize(0);
            f.set(sb);
        }
    };
    return ash;
}

// ......

public UFuture&lt;SPA.CScopeUQueue&gt; sendRequest(short reqId,
    java.nio.ByteBuffer data, int len) throws CSocketError {
    UFuture&lt;SPA.CScopeUQueue&gt; f = new UFuture&lt;&gt;(reqId);
    if (!SendRequest(reqId, data, len, get_ash(f), get_aborted(f), get_se(f))) {
        raise(f);
    }
    return f;
}
</pre>
    </td>
    <td>
    <h3>Key points are SendRequest and three callback for the method <i>sendRequest</i> within the left code snippet 3:</h3>
    <ol>
    <li>First of all, start a <i>UFuture</i> at line 19.</li>
    <li>
    Three callbacks or delgates, <i>DDiscarded</i>, <i>DOnExceptionFromServer</i> and <i>DAsyncResultHandler</i>, are created from a calling thread, but they are ALWAYS raised from a pool worker thread.
    First, we could use a static method get_aborted, as shown at the below code snippet 4, to create <i>DDiscarded</i> callback.
    It will be used to monitor either request cancel or communication channel close event.
    Next, we use a static method get_se to create a <i>DOnExceptionFromServer</i> callback, as shown at the following code snippet 5, for tracking an exception from server side.
    Third, we create a callback or lambda expression to monitor a server result at line 2 through 13. When a server result comes, it will be stored within the variable <i>ar</i>.
    Inside the callback, initialize an instance of <i>CScopeUQueue</i> at line 6, and copy server result from <i>ar.getUQueue()</i> into <i>sb.getUQueue()</i> at line 7 before setting result into the future<i>f</i> at line 9
    </li>
    <li>
    After preparing the above three callbacks, we call a new method <i>SendRequest</i> with an array of bytes (data, len) at line 20.
    In case the call fails because a session is already closed, we could throw a <i>SPA.ClientSide.CSocketError</i> exception by calling the method <i>raise</i> at line 21, which will be discussed at the following code snippet 6.
    </li>
    <li>At last, return a future <i>f</i> at line 23 if the method <i>SendRequest</i> returns successfully.</li>
    </ol>
    </td>
</tr>
</table>
<h4>Code snippet 3: Generic function <i>send</i> implementation</h4>
<hr />
<table style="width:100%;">
    <tr>
        <td style="width:30%;">
<?prettify linenums=1?>
<pre class="prettyprint">
//../socketpro/src/jadapter/jspa/src/SPA/ClientSide/CAsyncServiceHandler.java
public static &lt;V&gt; DDiscarded get_aborted(final UFuture&lt;V&gt; f) {
    return new DDiscarded() {
        @Override
        public void invoke(CAsyncServiceHandler sender, boolean discarded) {
            if (discarded) {
                CSocketError ex = new CSocketError(REQUEST_CANCELED,
                    "Request canceled", f.getReqId(), false);
                f.setException(ex);
            } else {
                CClientSocket cs = sender.getSocket();
                int ec = cs.getErrorCode();
                if (cs.getErrorCode() == 0) {
                    CSocketError ex = new CSocketError(SESSION_CLOSED_AFTER,
                        "Session closed after sending the request", f.getReqId(), false);
                    f.setException(ex);
                } else {
                    CSocketError ex = new CSocketError(ec, cs.getErrorMsg(), f.getReqId(), false);
                    f.setException(ex);
                }
            }
        }
    };
}
</pre>
        </td>
        <td>
        The left code snippet 4 shows how to generate a DDiscarded callback.
        As its name implies, it is designed for monitoring two events, request canceled and session closed events.
        <ol>
            <li>
                SocketPro has a feature named as Cancel. Calling it will leads to request cancel exception.
                You can test the feature by uncommenting line 46 within the above code snippet 2. Doing so will lead to execute the code at line 7 through 9.
            </li>
            <li>
                We use the code line 11 through 20 to set a CSocketError exception.
                First, if session is not closed gracefully (ec != 0), we use socket system error message at lines 18 and 19.
                Otherwise, we construct an error message with a given request name at line 14 through 16.
            </li>
            <li>
                It is noted that the two events ALWAYS happens with a pool worker thread.
                Also, it always happens after sending a request.
                Therefore, the last input parameter will be false when initializing an instance of CSocketError, as shown at lines 8, 15 and 18.
            </li>
            <li>The method returns a callback at line 3.</li>
        </ol>
        </td>
    </tr>
</table>
<h4>Code snippet 4: Generate a DDiscarded callback for tracking request cancel and communication close events</h4>
<hr />
<table style="width:100%;">
    <tr>
        <td style="width:30%;">
<?prettify linenums=1?>
<pre class="prettyprint">
//../socketpro/src/jadapter/jspa/src/SPA/ClientSide/CAsyncServiceHandler.java
public static &lt;V&gt; DOnExceptionFromServer get_se(final UFuture&lt;V&gt; f) {
    return new DOnExceptionFromServer() {
        @Override
        public void invoke(CAsyncServiceHandler sender, short reqId,
            String errMessage, String errWhere, int errCode) {
            SPA.CServerError ex = new SPA.CServerError(errCode, errMessage, errWhere, reqId);
            f.setException(ex);
        }
    };
}
</pre>
        </td>
        <td>
        <p>The left code snippet is very simple. It returns a callback at line 3.
        Further, it constructs an instance of CServerError and sets it to the future <i>f</i> at line 8.</p>
        <p>It is noted that the callback is always called from a pool worker thread.
        Its error information originates from server side, which includes error code, error message, server implementation file location where an exception raises, and request id.</p>
        </td>
    </tr>
</table>
<h4>Code snippet 5: Generate a DOnExceptionFromServer callback for tracking an exception from a remote SocketPro server</h4>
<hr />
<table style="width:100%;">
    <tr>
        <td style="width:30%;">
<?prettify linenums=1?>
<pre class="prettyprint">
//../socketpro/src/jadapter/jspa/src/SPA/ClientSide/CAsyncServiceHandler.java
public void raise(IUFExtra f) throws CSocketError {
    CClientSocket cs = getSocket();
    int ec = cs.getErrorCode();
    if (ec == 0) {
        throw new CSocketError(SESSION_CLOSED_BEFORE,
    "Session already closed before sending the request", f.getReqId(), true);
    } else {
        throw new CSocketError(ec, cs.getErrorMsg(), f.getReqId(), true);
    }
}
</pre>
        </td>
        <td>
        <p>Under many cases, a session is already closed before sending a request. The left code snippet 6 shows the implementation of the method <i>raise</i>.
        If it is this situation, we call the left method raise to throw an exception immediately as shown at line 21 in the above code snippet 3.</p>
        <p>
        Again, we need to check if a session is closed gracefully. If it does, we use the code lines 6 and 7 to throw it directly as it happens from a calling thread.
        If a session is not closed gracefully (ec != 0), we use socket system error message instead at line 9.</p>
        <p>
        It is noted that the exception indicates session is already closed before sending a request. Therefore, the last input parameter is true as shown at lines 7 and 9.</p>
        </td>
    </tr>
</table>
<h4>Code snippet 6: Throw an exception from calling thread when finding a communication channel is aready closed</h4>
<hr />
<h4>SendRequest vs sendRequest within CAsyncServiceHandler</h4>
<p>SocketPro Java adapter comes the two methods to send any types of requests from a client to server for asynchronous processing in streaming style.
The fist one <i>SendRequest</i> is the basis for the other method <i>sendRequest</i>. The method <i>sendRequest</i> always calls the basis method <i>SendRequest</i> inside.
To use the method <i>SendRequest</i>, you may have to provide its required three callbacks with more coding as shown at the above code snippet 3.
The second method <i>sendRequest</i> has already wrapped the three required callbacks so that you can use Java modern try-catch style and less code to deal with returned results and errors easily.
This abstraction has a little price in performance, and reduces coding flexibility under some situations. The basis method <i>SendRequest</i> delivers better speed plus better flexibility.
Therefore, it is not surprised that we use the basis method <i>SendRequest</i> directly under some situations.
</p>
<p>In regards to the method <i>sendRequest</i>, the method always returns a future immediately without any blocking as shown at this example.
Keep in mind that all SocketPro adapters well support on modern language development features such as anonymous function, closure, Lambda expression, async/await, future, promise, yield and so on.
</p>
<p>In addition to the base handler class <i>CAsyncServiceHandler</i>, SocketPro Java adapter comes with other handler classes derived from this base handler class.
These sub-class handlers have their own requests defined at client side. All of their requests have two sets of functions exactly like <i>SendRequest</i> and <i>sendRequest</i> here.
</p>
<hr />
We are going to test the above three types of exceptions, <i>CServerError</i>, <i>CSocketError</i> and <i>Exceptions</i>.
<ol>
<li>
    <i>CServerError</i> exception: Go back to the line 22 of the above code snippet 2, modify the first input to an empty string, and compile the code, you will see an exception from server after running the application against pre_compiled application <a href="get_started.htm" title="Get Started With SocketPro">all_servers</a> inside the sub-directory ../socketpro/bin/win/x64 or x86 for windows, or ../socketpro/bin/linux.
    Alternatively, you can get an server exception by setting the input int to a negative value at line 23.
</li>
<li>
    <i>CSocketError</i> exception: Run the application against the sample server application all_servers to get the first return result like "Hello John Dole!". You can get such an exception after brutally shutting down <a href="get_started.htm" title="Get Started With SocketPro">all_servers</a>.
    Alternatively, you can get such an exception by uncommenting the line 46.
</li>
<li>
    <i>Exception</i> exception: Use the code at line 50 to replace the normal code at line 49. The replacement will lead to de-serilization exception <i>Exception</i> at client side because the request <i>idSleep</i> returns nothing.
</li>
</ol>
<hr />
<p>At last, we like to talk about client message queue. When developing real enterprise applications, we have to consider application fault tolerance and auto recovery.
SocketPro has a built-in feature implemented with such a client message queue. A client message queue is a local file.
When sending requests, SocketPro will automatically backup these requests into the local file. In case a remote server is down or not accessible because of any types of reasons, SocketPro is capable to re-sent these requests from the client queue file automatically when the remote server is restarted.
It is noted that a client session is associated with one client message queue only.</p>
<p>Let's test the client queue feature. Go back to the previous code snippet 2 and uncomment the code at line 15.
After compiling and running the application, brutally shut down its server application <a href="get_started.htm" title="Get Started With SocketPro">all_servers</a> before the application is completed.
You will find the client application stops and there is no <i>CSocketError</i> exception as previous tests.
However, the client application will continue if we re-run the server application <a href="get_started.htm" title="Get Started With SocketPro">all_servers</a>. It is noted that there will be no missing results.
Although a socket is closed, SocketPro thinks that a session is still connected if a client message queue is associated.
Briefly speaking, when a server is restarted, the client socket will be automatically reconnected to server, and keep on sending requests from the associated client queue file.</p>
Client queue prevents client requests from losing, improves apllication's fault-tolerance, and make server application maintenance easier and even your development simpler because it enables failures auto-recovery and reduces many errors.
<hr />
Summarily, SocketPro is a full asynchronus communication framework. Its requests streaming feature is such a powerful feature to help high performance distributed application development in no time. As a developer, keep in mind that streaming requests are truly preferred whenever possible and if you have multiple requests at client side.
As we echo a complex structure in this sample, it is just a simple task to develop a client server application. SocketPro requests are asynchronous by default, but it is truly simple to convert them into synchronous ones. In addition, SocketPro is capable to back up requests automatically by client message queue for failures auto-recovery, and reduces many tough issues.
<hr />
</body>
</html>
