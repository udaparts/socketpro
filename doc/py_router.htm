<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title>SocketPro Server Routing Communication Pattern and Microservices</title>
    <link rel="stylesheet" type="text/css" href="codepretty/sons-of-obsidian.css" />
    <script type="text/javascript" src="codepretty/prettify.js"></script>
</head>
<body onload="PR.prettyPrint()">
<h1 style="text-align: center;">SocketPro Server Routing Communication Pattern and Microservices</h1>
<hr />
<p>SocketPro secured asynchronous communication framework is written from scratch with continuous in-line request/result batching, real-time stream sending/processing, asynchronous data transferring and parallel computation in mind.
So far We have introduced a set of short articles with sample projects to demonstrated tradition <a href="py_hw.htm" title="SocketPro Client Server Application Development">client/server communication pattern</a> and
<a title="SocketPro Secure Communication and Publish/Subscribe Messaging" href="py_push.htm">subscribe/publish messaging</a> with secure communication.
The two demo projects are created for desktop or middle server applications development.
Next, <a href="py_web.htm" title="SocketPro WebSocket for Client/server and Subscribe/publish Messaging on Browsers">this sample</a> is created to show you that SocketPro also supports both client/server and subscribe/publish messaging patterns on web browsers with help of websocket.</p>

<p>In additon to the two communication patterns, SocketPro have built-in message queues implemented for both client and server sides.
Its <a href="py_hw.htm" title="SocketPro Client Server Application Development">client message queue</a> can be easily used for fail auto-recovery to improve enterprise application fault-tolerance, reliability and maintenance as well as middle tier availability.
Its server queue, as shown at <a href="py_serverqueue.htm" title="SocketPro Server Persistent Message Queue">this artcle</a>, supports that producers and consumers interact at the different time with asynchronous communication pattern.
As shown in <a href="py_serverqueue.htm" title="SocketPro Server Persistent Message Queue">the sample project</a>, messages will NEVER be lost if client queue is enabled at producer side.
</p>

<p>SocketPro server is also capable to function like a router which is about to be demonstrated with this article. Requests from a number of clients can be sent to a SocketPro server, which acts like a router and routes all of these requests onto a new array of clients for processing.
When these original requests are processed and their corresponding results are sent back to the SocketPro server, the server will correctly route these results back to their original clients as expected. In fact, the server can be considered to be a load balancer too.
In addition, we will talk about <a href="get_started.htm" title="Get Started With SocketPro">all_servers</a>, which have been used as a common test server to provide many microservices for many samples.</p>
<hr />
<table style="width:100%;">
<tr>
<td style="width:25%;">
<?prettify linenums=1?>
<pre class="prettyprint">
from consts import piConst
from spa import CScopeUQueue as Sb
from spa.clientside import *
import sys


class Pi(CAsyncServiceHandler):
    def __init__(self):
        super(Pi, self).__init__(piConst.sidPi)


print('Client: tell me load balance host address:')
cc = CConnectionContext(sys.stdin.readline().strip(), 20901, "lb_client", "pwd_lb_client")
with CSocketPool(Pi) as spPi:
    spPi.QueueName = 'lbqname'
    if spPi.StartSocketPool(cc, 1):
        pi = spPi.SeekByQueue()
        dPi = 0.0
        nDivision = 1000
        nNum = 10000000
        dStep = 1.0 / nNum / nDivision
        vF = []
        for n in range(0, nDivision):
            dStart = float(n) / nDivision
            vF.append(pi.sendRequest(piConst.idComputePi, Sb().SaveDouble(dStart).SaveDouble(dStep).SaveInt(nNum)))
        for f in vF:
            sb = f.result()
            dPi += sb.LoadDouble()
            print('dStart: ' + str(sb.LoadDouble()))
        print('pi: ' + str(dPi) + ', returns: ' + str(len(vF)))
    else:
        print('No connection to ' + cc.Host)
    print('Press key ENTER to kill the demo ......')
    sys.stdin.readline()
</pre>
</td>
<td>
<p>First of all, the left code snippet comes from the file ../socketpro/tutorials/python/loading_balance/lb_client/program.py.</p>
<hr />
<p>We are going to compute the value of π using the numerical integration below. </p>
<img src="images/pi_value.jpg" alt="" />
<br />
Figure 1: Compute π value by use of numerical integration
<p>We can use trapezoidal integration to solve the integral. The basic idea is to fill the area under a curve with a series of tiny
rectangles. As the width of a rectangle approaches 0, the sum of the areas of these rectangles approaches the real value of π. To
accurately achieve the value, we must divide the integral area with rectangles as small as possible. Therefore, we are
going to divide the whole integration into a set of sections and send them onto different working machines (clients/workers) with a
SocketPro server as a router. These workers actually finish CPU-extensive numerical integration in parallel. The sending
machine (client) will collect the integral values of these sections from these workers, and then add them to get the π value.</p>
<p>We are going to ignore trivial lines of codes within the left code snippet 1. First, look at the code line 15.
We enable client queue to improve fault tolerance due to any errors related with router (or SocketPro server) or workers.
At code line 17, we get a π handler by calling the method <i>SeekByQueue</i>. You can find its implementation at the file ../socketpro/bin/spa/clientside/socketpool.py.</p>
<p>Next, we divide the whole integration into 1000 divisions, and each of these divisions will again be divided at worker sides into 10,000,000 tiny parts as shown at lines 19 and 20.
Next, we send 1000 requests onto a remote server as shown at line 25, and put 1000 futures into a list <i>vF</i>.</p>
<p>At end, we collect all expected results and sum them together at line 28. As you can see, the code does not seem complex at all at client side.
Let us move to server or router side development.</p>
</td>
</tr>
</table>
Code snippet 1: A client demo sample for computing π value with numerical integration.
<hr />
<table style="width:100%;">
<tr>
<td style="width:25%;">
<?prettify linenums=1?>
<pre class="prettyprint">
# .../socketpro/tutorials/python/all_servers/all_servers.py
from consts import piConst, hwConst
from spa.serverside import CSocketProServer, CSocketProService,\
    CClientPeer, BaseServiceID, Plugin
from spa.clientside import CAsyncQueue, CStreamingFile, CMysql, COdbc, CSqlite
from spa.udb import DB_CONSTS
from pub_sub.ps_server.hwpeer import CHelloWorldPeer
from webdemo.myhttppeer import CMyHttpPeer
import sys
from ctypes import *
from sys import platform as os

# bool U_MODULE_OPENED WINAPI SetSPluginGlobalOptions(const char *jsonUtf8Options);
sqlite_lib = None
if os == "win32":
    sqlite_lib = WinDLL("ssqlite.dll")
else:
    sqlite_lib = WinDLL("libssqlite.so")

SetSPluginGlobalOptions = sqlite_lib.SetSPluginGlobalOptions
SetSPluginGlobalOptions.argtypes = [c_char_p]
SetSPluginGlobalOptions.restype = c_bool

# int U_MODULE_OPENED WINAPI DoSPluginAuthentication(SPA::UINT64 hSocket,
#   const wchar_t *userId, const wchar_t *password, unsigned int nSvsId,
#   const wchar_t *options);
SQLite_Auth = sqlite_lib.DoSPluginAuthentication
SQLite_Auth.argtypes = [c_uint64, c_wchar_p, c_wchar_p, c_uint, c_wchar_p]
SQLite_Auth.restype = c_int

mysql_lib = None
if os == "win32":
    mysql_lib = WinDLL("smysql.dll")
else:
    mysql_lib = WinDLL("libsmysql.so")
MySQL_Auth = mysql_lib.DoSPluginAuthentication
MySQL_Auth.argtypes = [c_uint64, c_wchar_p, c_wchar_p, c_uint, c_wchar_p]
MySQL_Auth.restype = c_int

odbc_lib = None
if os == "win32":
    odbc_lib = WinDLL("sodbc.dll")
else:
    odbc_lib = WinDLL("libsodbc.so")
ODBC_Auth = odbc_lib.DoSPluginAuthentication
ODBC_Auth.argtypes = [c_uint64, c_wchar_p, c_wchar_p, c_uint, c_wchar_p]
ODBC_Auth.restype = c_int

with CSocketProServer() as server:
    def OnClose(hSocket, errCode):
        bs = CSocketProService.SeekService(hSocket)
        if bs:
            sp = bs.Seek(hSocket)
            # ......
    server.OnClose = OnClose

    def OnIsPermitted(hSocket, userId, pwd, svsId):
        auth_res = Plugin.AUTHENTICATION_NOT_IMPLEMENTED
        if svsId == hwConst.sidHelloWorld or svsId == BaseServiceID.sidHTTP \
                or svsId == piConst.sidPi or svsId == piConst.sidPiWorker:
            # give permission to known services without authentication
            auth_res = Plugin.AUTHENTICATION_OK
        elif svsId == CAsyncQueue.sidQueue or svsId == CStreamingFile.sidFile:
            # give permission to known services without authentication
            auth_res = Plugin.AUTHENTICATION_OK
        elif svsId == COdbc.sidOdbc:
            auth_res = ODBC_Auth(hSocket, userId, pwd, svsId, \
            'DRIVER={ODBC Driver 13 for SQL Server};Server=windesk;database=sakila')
        elif svsId == CMysql.sidMysql:
            auth_res = MySQL_Auth(hSocket, userId, pwd, svsId, \
                                  'database=sakila;server=windesk')
        elif svsId == CSqlite.sidSqlite:
            auth_res = SQLite_Auth(hSocket, userId, pwd, svsId, 'usqlite.db')
            if auth_res == Plugin.AUTHENTICATION_PROCESSED:
                # give permission without authentication
                auth_res = Plugin.AUTHENTICATION_OK
        if auth_res >= Plugin.AUTHENTICATION_OK:
            print(userId + "'s connecting permitted, and DB handle opened and cached")
        elif auth_res == Plugin.AUTHENTICATION_PROCESSED:
            print(userId + \
"'s connecting denied: no authentication implemented but DB handle opened and cached")
        elif auth_res == Plugin.AUTHENTICATION_FAILED:
            print(userId + "'s connecting denied: bad password or user id")
        elif auth_res == Plugin.AUTHENTICATION_INTERNAL_ERROR:
            print(userId + "'s connecting denied: plugin internal error")
        elif auth_res == Plugin.AUTHENTICATION_NOT_IMPLEMENTED:
            print(userId + "'s connecting denied: no authentication implemented")
        else:
            print(userId + \
                  "'s connecting denied: unknown reseaon with res --" + str(auth_res))
        return auth_res >= Plugin.AUTHENTICATION_OK
    server.OnIsPermitted = OnIsPermitted

    def do_configuration():
        CSocketProServer.PushManager.AddAChatGroup(1, "R&D Department")
        CSocketProServer.PushManager.AddAChatGroup(2, "Sales Department")
        CSocketProServer.PushManager.AddAChatGroup(3, "Management Department")
        CSocketProServer.PushManager.AddAChatGroup(7, "HR Department")
        CSocketProServer.PushManager.AddAChatGroup( \
            DB_CONSTS.CACHE_UPDATE_CHAT_GROUP_ID, "Subscribe/publish for front clients")
        return True # True -- ok; False -- no listening server
    server.OnSettingServer = do_configuration

    mapIdMethod = {
        hwConst.idSayHello: 'sayHello',
        hwConst.idSleep: ['sleep', True],  # or ('sleep', True)
        hwConst.idEcho: 'echo'
    }
    server.hw = CSocketProService(CHelloWorldPeer, hwConst.sidHelloWorld, mapIdMethod)

    # HTTP/WebSocket service
    server.HttpSvs = CSocketProService(CMyHttpPeer, BaseServiceID.sidHTTP, None)

    mapIdReq = {}
    server.Pi = CSocketProService(CClientPeer, piConst.sidPi, mapIdReq)
    server.PiWorker = CSocketProService(CClientPeer, piConst.sidPiWorker, mapIdReq)
    if not CSocketProServer.Router.SetRouting(piConst.sidPi, piConst.sidPiWorker):
        print('Setting routing failed')

    # load file streaming library at the directory ../bin/free_services/file
    # 16 * 1024 dequeue batch size in bytes
    server.aq = CSocketProServer.DllManager.AddALibrary('uasyncqueue', 16 * 1024)

    # load async sqlite library located at the directory ../bin/free_services/sqlite
    server.sqlite = CSocketProServer.DllManager.AddALibrary("ssqlite")
    if server.sqlite:
        # monitoring sakila.db table events (DELETE, INSERT and UPDATE) for
        # tables actor, language, category, country and film_actor
        jsonOptions = '{"global_connection_string":"usqlite.db","monitored_tables":\
"sakila.db.actor;sakila.db.language;sakila.db.category;sakila.db.country;sakila.db.film_actor"}'
        SetSPluginGlobalOptions(jsonOptions.encode('utf-8'))

    # load persistent message queue library at the directory ../bin/free_services/queue
    server.file = CSocketProServer.DllManager.AddALibrary('ustreamfile')

    # load MySQL/MariaDB server plugin library at the directory ../bin/free_services/mm_middle
    server.mysql = CSocketProServer.DllManager.AddALibrary("smysql")

    # load ODBC server plugin library at the directory ../bin/win or ../bin/linux
    server.odbc = CSocketProServer.DllManager.AddALibrary("sodbc")

    if not server.Run(20901):
        print('Error message = ' + CSocketProServer.ErrorMessage)
    print('Read a line to shutdown the application ......')
    line = sys.stdin.readline()
</pre>
</td>
<td>
<p>The left code snippet 2 shows implementation of microservices and how to enable SocketPro built-in feature routing. The code comes from the file .../socketpro/tutorials/python/all_servers/all_servers.py.</p>
<hr />
<h3>Micro services</h3>
<p>A SocketPro server can support any number of services. As shown at the code snippet 2 of <a title="SocketPro Secure Communication and Publish/Subscribe Messaging" href="py_push.htm">the previous article</a>, we register and set hello world service at line 109.
Next, we register and set HTTP/websocket service at line 112 as shown at the code snippet 2 of <a href="py_web.htm" title="SocketPro WebSocket for Client/server and Subscribe/publish Messaging on Browsers">this article for web browser developments</a>.

</p>
<hr />
<h3>SocketPro Built-in Feature Routing</h3>
<p>Also, we simply register the two srvices, sidPi and sidPiWorker at line 115 and 116, respectively.
Afterwards, we can call the method <i>SetRouting</i> at line 117 to enable the built-in feature routing so that this demo server also function as a load balancer.
So far we have registered four services with one particular feature for server load balancing.</p>
<hr />
<h3>Loading SocketPro server plugins</h3>
<p>At this time, you can only use C/C++ to write server plugins as shown at <a href="cpp_serverqueue.htm" title="SocketPro Server Persistent Message Queue">the code snippet 4 of the previous article</a>.
The five server plugins can be loaded into a server for reuse, as shown at line 125 through 140 of the left code snippet 2.
The five plugins are described with more details at <a href="get_started.htm" title="Get Started With SocketPro">this article</a> before.
The left code snippet supports nine micro-services totally.
</p>
<p>It is noted that SocketPro comes with a number of pre-compiled plugins for you to experiment and learn.
Some of them are ready for resue within your commercial applications at this time.
However, all of them are good examples and reusable for your commercial or enterprise applications.</p>
<p>SocketPro comes with two ODBC and MySQL/MariaDB server plugins.
We can use them for authenticating client credentials by use of database accounts so that you don't have to write your own code for authentication as shown at line 57 through 91.
If you set a default database within a connection string as done from the line 66 through 76, a client is able to omit the request Open (or open) call for opening a database.
It is noted that all the five plugins export the global method DoSPluginAuthentication. However, SQLite plugin is partially implemented, and is not able to be used for authenticating.
The other two plugins, message queue (asyncqueue) and file (ustreamfile), are not implemented for authenticating at all at this time.
</p>
</td>
</tr>
</table>
Code snippet 2: SocketPro router server and mircoservices implementation
<hr />
<table style="width:100%;">
<tr>
<td style="width:25%;">
<?prettify linenums=1?>
<pre class="prettyprint">
# ../socketpro/tutorials/python/loading_balance/lb_worker/piworker.py
from consts import piConst
from spa.clientside import CAsyncServiceHandler as CAHandler, \
    CScopeUQueue as Csb


class PiWorker(CAHandler):
    def __init__(self):
        super(PiWorker, self).__init__(piConst.sidPiWorker)

    def OnResultReturned(self, req_id, q):
        if self.RouteeRequest and req_id == piConst.idComputePi:
            dStart = q.LoadDouble()
            dStep = q.LoadDouble()
            nNum = q.LoadUInt()
            dX = dStart + dStep / 2
            dd = dStep * 4.0
            ComputeRtn = 0.0
            for n in range(0, nNum):
                dX += dStep
                ComputeRtn += dd / (1 + dX * dX)
            self.SendRouteeResult(Csb().SaveDouble(ComputeRtn).SaveDouble(dStart))

# ../socketpro/tutorials/python/loading_balance/lb_worker/program.py
from loading_balance.lb_worker.piworker import PiWorker
from spa.clientside import CConnectionContext, CSocketPool
import sys, multiprocessing

print('Worker: tell me load balance host address:')
cc = CConnectionContext(sys.stdin.readline().strip(), 20901, "lb_worker", "pwdForlbworker")
with CSocketPool(PiWorker) as spPi:
    if not spPi.StartSocketPool(cc, 1, multiprocessing.cpu_count()):
        print('No connection to ' + cc.Host)
    print('Press ENTER key to kill the demo ......')
    line = sys.stdin.readline()
</pre>
</td>
<td>
<p>After having looked at client and server sides, it is time to move to worker side.
The left code snippet 3 comes with the files piworker.py and program.py of the directory ../socketpro/tutorials/python/loading_balance/lb_worker.</p>
<p>At worker side, the virtual function <i>OnResultReturned</i> will be called when a connected worker receives a request routed from a SocketPro server.
Inside the virtual function, we need to check at line 12 if a request is indeed one routed from a SocketPro server, which is originated from a client.
After computation from line 16 through 21, we send a result <i>ComputeRtn</i> with an index <i>dStart</i> at line 22 back to its original client through the middle server.
It is noted that the de-serialization at line 13 through 15 is mirroring to the serialization at line 25 of the above code snippet 1.</p>
<p>Finally, let us look at line 32. Here, we start a socket pool with the number of threads equal to the number of processors. Each of threads hosts one socket only.
Previously, we have just used one thread only all times.
However, here we use multiple threads for a socket pool because these requests are CPU extensive and we need multiple processors to process them in parallel.</p>
</td>
</tr>
</table>
Code snippet 3: A sample routing worker side implementation
<hr />
<h2>Fault-tolerance and auto-recovery tests</h2>
<p>After running the <a href="get_started.htm" title="Get Started With SocketPro">all_servers</a>, run the Program.java at directories ../socketpro/tutorials/java/src/loading_balance/worker and ../socketpro/tutorials/csharp/Loading_balance/client, respectively.
You will find that expected results come from workers with somewhat randomness, but the final π value is correct as expected.
Further, we can use the code at line 29 of the above code snippet 1 to sort these results with an index <i>dStart</i> and remove the randomness. The randomness is caused by worker side parallel computation without any guarantee of sequencing.</p>
<p>During computation, you can brutally kill and restart the server <a href="get_started.htm" title="Get Started With SocketPro">all_servers</a>, worker lb_workers or both repeatedly.
You will find the final π value is still correct. By this time, you can see SocketPro client message queue is a key fetaure to fault-tolerance and auto-recovery!</p>
<hr />
</body>
</html>
