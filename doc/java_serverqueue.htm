<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title>SocketPro Server Persistent Message Queue</title>
    <link rel="stylesheet" type="text/css" href="codepretty/sons-of-obsidian.css" />
    <script type="text/javascript" src="codepretty/prettify.js"></script>
</head>
<body onload="PR.prettyPrint()">
<h1 style="text-align: center;">SocketPro Server Persistent Message Queue</h1>
<p>In previous articles, we have demonstrated SocketPro <a href="java_hw.htm" title="SocketPro client server application development">client/server application development</a> and <a href="java_push.htm" title="SocketPro Secure Communication and Publish/Subscribe Messaging">subscribe/publish messaging as well as secure communication with industrial standard TLSv1.x protocols</a>.
The two sample projects actually demo the two communication patterns: (1) traditional communication between client and server, and (2) subscribe/publish messaging among connected clients and server.
Further, SocketPro extends the two communication patterns onto web browsers by use of websocket technology, as shown in <a href="java_web.htm" title="SocketPro WebSocket for Client/server and Subscribe/publish Messaging on Browsers">this article</a>.</p>
<p>We'll use this article to demonstrate SocketPro server side persistent message queue, which enables that involved parties don't have to interact at the same time with asynchronous communication pattern.
Today, there are many persistent message queue implementations available. Many of them are complicated for reuse or development. In addition, many of them cannot prevent message losses even with lots of your efforts.
However, SocketPro message queue is superiorly fast, and very simple for development, reuse and maintenance. Further, it completely kills message losses with help of SocketPro built-in client (or producer) side queue as shown in <a href="java_hw.htm" title="SocketPro client server application development">the previous article</a>.
</p>
<table style="width:100%;">
<tr>
<td style="width:25%;">
<?prettify linenums=1?>
<pre class="prettyprint">
import SPA.*;
import SPA.ClientSide.*;

public class Program {

    private final static byte[] TEST_QUEUE_KEY = 
        "queue_name_0".getBytes(java.nio.charset.Charset.forName("UTF-8"));
    
    // ......

    public static void main(String[] args) {
        CConnectionContext cc = new CConnectionContext();
        System.out.println("Remote host: ");
        java.util.Scanner in = new java.util.Scanner(System.in);
        cc.Host = in.nextLine();
        cc.Port = 20901;
        cc.UserId = "async_queue_client_java";
        cc.Password = "pwd_for_async_queue";

        try (CSocketPool&lt;CAsyncQueue&gt; spAq = new CSocketPool&lt;&gt;(CAsyncQueue.class)) {
            //spAq.setQueueName("qname");
            boolean ok = spAq.StartSocketPool(cc, 1);
            CAsyncQueue aq = spAq.getAsyncHandlers()[0];
            if (!ok) {
                System.out.println("No connection error code = " + aq.getSocket().getErrorCode());
                in.nextLine();
                return;
            }
            try {
                TestEnqueue(aq);
                UFuture&lt;CAsyncQueue.DeqInfo&gt; f = TestDequeue(aq);
                System.out.println(f.get());
            } catch (CSocketError | CServerError ex) {
                System.out.println(ex);
            } catch (Exception ex) {
                //bad parameter
                System.out.println("Unexpected error: " + ex.getMessage());
            }
            System.out.println("Press a key to complete dequeuing messages from server ......");
            in.nextLine();
        }
    }

    private static void TestEnqueue(CAsyncQueue aq) throws CSocketError {
        // ......
    }

    private static UFuture&lt;CAsyncQueue.DeqInfo&gt; TestDequeue(CAsyncQueue aq) 
        throws CSocketError {
        // ......
    }
}

</pre>
</td>
<td>
<p>The client server queue sample code can be found at the file ../socketpro/tutorials/java/src/server_queue/client/Program.java.
Its main testing code is so simple as shown at the left code snippet 1.</p>
<p>We are going to test enqueuing a number of messages onto a remote SocketPro server queue file at line 30.
Afterwards, we are also going to dequeue these messages back from the remote SocketPro server queue file at line 31.</p>
<p>Now, let's study the two test functions <i>TestEnqueue</i> and <i>TestDequeue</i> as declared at lines 44 and 18, respectively.</p>
</td>
</tr>
</table>
Code snippet 1: Console main for enqueue and dequeue testing at client side
<hr />
<table style="width:100%;">
<tr>
<td style="width:25%;">
<?prettify linenums=1?>
<pre class="prettyprint">
private static void TestEnqueue(CAsyncQueue aq) throws CSocketError {
    System.out.println("Going to enqueue 1024 messages ......");
    try (CScopeUQueue sb = new CScopeUQueue()) {
        for (int n = 0; n < 1024; ++n) {
            String str = n + " Object test";
            short idMessage;
            switch (n % 3) {
                case 0:
                    idMessage = idMessage0;
                    break;
                case 1:
                    idMessage = idMessage1;
                    break;
                default:
                    idMessage = idMessage2;
                    break;
            }
            //try {
            //   java.lang.Thread.sleep(100);
            //} catch (Exception ex) {
            //}
            //enqueue two unicode strings and one int
            if (!aq.Enqueue(TEST_QUEUE_KEY, idMessage, sb.Save("SampleName").Save(str).Save(n))) {
                aq.raise(CAsyncQueue.idEnqueue);
            }
            sb.getUQueue().setSize(0); //reset content
        }
    }
}
</pre>
</td>
<td>
<p>The left code snippet 2 shows the implementation of the test enqueue function <i>TestEnqueue</i>. Simply speaking, we are going to enqueue 1024 arbitrary messages.
Each of these messages comes with an indentification number <i>idMessage</i> and two unicode strings as well as one integer <i>n</i> as shown at line 23.
</p>
<p>Here, the message id <i>idMessage</i> is the same as request id. Later, we use it to identify a message and parse the message when dequeuing.</p>
<p>Additionally, we throw a <i>CSocketError</i> exception by calling the method <i>raise</i> at line 24 if the session or communication channel is closed.</p>
<p>At last, a client is able to open a queue file at remote server by a queue key <i>TEST_QUEUE_KEY</i> as defined at line 7 of the above code snippet 1.
When enqueuing a message, we need to specify a queue by this key as shown at line 23 of the left code snippet 2.</p>
</td>
</tr>
</table>
Code snippet 2: Enqueue a set of messages onto a remote server persistent queue file
<hr />

<table style="width:100%;">
<tr>
<td style="width:30%;">
<?prettify linenums=1?>
<pre class="prettyprint">
private static UFuture&lt;CAsyncQueue.DeqInfo&gt; TestDequeue(CAsyncQueue aq) throws CSocketError {
    //prepare callback for parsing messages dequeued from server side
    aq.ResultReturned = (sender, idReq, q) -> {
        boolean processed = false;
        switch (idReq) {
            case idMessage0:
            case idMessage1:
            case idMessage2:
                System.out.print("message id=" + idReq);
                    {
                    //parse a dequeued message which should be the same as the above
                    //enqueued message (two unicode strings and one int)
                    String name = q.LoadString(), str = q.LoadString();
                    int index = q.LoadInt();
                    System.out.print(", name=" + name);
                    System.out.print(", str=" + str);
                    System.out.println(", index=" + index);
                }
                processed = true;
                break;
            default:
                break;
        }
        return processed;
    };

    UFuture&lt;CAsyncQueue.DeqInfo&gt; f = new UFuture&lt;&gt;(CAsyncQueue.idDequeue);
    CAsyncQueue.DDiscarded aborted = CAsyncQueue.get_aborted(f);
    CAsyncQueue.DOnExceptionFromServer se = CAsyncQueue.get_se(f);

    //prepare a callback for processing returned result of dequeue request
    CAsyncQueue.DDequeue d = (asyncq, messages, fileSize, msgs_dequeued, bytes) -> {
        if (bytes > 0) {
            System.out.print("Total message count=" + messages);
            System.out.print(", queue file size=" + fileSize);
            System.out.print(", messages dequeued=" + msgs_dequeued);
            System.out.println(", message bytes dequeued=" + bytes);
        }
        if (messages > 0) {
            //there are more messages left at server queue, we re-send a request to dequeue
            asyncq.Dequeue(TEST_QUEUE_KEY, asyncq.getLastDequeueCallback(), 0, aborted, se);
        } else if (!f.isDone()) {
            f.set(asyncq.new DeqInfo(messages, fileSize, msgs_dequeued, bytes));
        }
    };
    System.out.println("Going to dequeue message ......");
    //optionally, add one extra to improve processing concurrency at both
    //client and server sides for better performance and through-output
    if (!(aq.Dequeue(TEST_QUEUE_KEY, d, 0, aborted, se) &&
        aq.Dequeue(TEST_QUEUE_KEY, d, 0, aborted, se))) {
        aq.raise(f);
    }
    return f;
}
</pre>
</td>
<td>
<p>We are going to investigate the test dequeue function <i>TestDequeue</i>as shown at the left side code snippet 3.
After understanding the piece of code, you will know how to get a generic future within SocketPro for all situations because this piece code is consdered to be the most complex.</p>
<p>First, find the original implementation of the method <i>CAsyncQueue.dequeue</i> at the file ../socketpro/src/jadapter/jspa/src/SPA/ClientSide/CAsyncQueue.java.
Its implementation is very simple as implemetations of other functions returning futures. However, the original implementation of the method <i>dequeue</i> is designed to dequeue one batch of messages only.
This implementation at the snippet 3 is more powerful, which dequeues all messages recursively with more concurrency and better performance between client and server sides.</p>
<p>
First of all, we set a callback at line 3 through 25 for parsing messages dequeued from a server queue file. The callback is required to return true or false.
If it returns true, SocketPro adapter knows that the result is proccessed. Otherwise, SocketPro adapter will keep the returning result in the buffer <i>q</i> for possible further processing at client side.
We parse a dequeued message at lines 13 and 14. It is noted that the data types and parsing orders here must be the same as types and orders at line 23 of the previous code snippet 2.
</p>
<p>
To get a generic future for a result <i>CAsyncQueue.DeqInfo</i>, first create an instance of UFuture <i>f</i> as shown at line 27.
Afterwards, we prepare a CAsyncQueue.DDiscarded callback <i>aborted</i> at line 28 for tracking request aborted event because of either session closed or request canceled.
Next, we prepare a CAsyncQueue.DOnExceptionFromServer callback <i>se</i> at line 29 for monitoring an exception from server.
The two callbacks are already talked with details at <a href="java_hw.htm" title="SocketPro Client Server Application Development">the previous article</a>.</p>
<p>
Next, we prepare a CAsyncQueue.DDequeue callback <i>d</i> at line 32 through 45 to handle returned results of dequeue request itself.
If there are more messages remaining <i>messages</i> at server queue file, we keep on sending a new request <i>Dequeue</i> recursively at line 41 until the remaining messages <i>messages</i> reach zero.
Otherwise, we set a new <i>CAsyncQueue.DeqInfo</i> value at line 43.
</p>
<p>
At last, we send two Dequeue requests at lines 49 and 50 with the above three prepared callbacks. Further, keep in mind that messages are dequeued in batch.
To improve dequeuing speed, we call the request <i>Dequeue</i> two times or more for better throughput so that parsing at client side at lines 13 and 14, dequeuing at server side and data transferring cross network can happen concurrently.
In case a session or communication channel is closed, we raise a <i>CSocketError</i> exception at line 58.
</p>
<p>Finally, we return a future <i>f</i> at line 53 so that a caller is able to wait for an expected data structure CAsyncQueue::DeqInfo from server.</p>
</td>
</tr>
</table>
Code snippet 3: Dequeue all messages from a server persistent message queue file
<hr />
<p>It is neccessary to point out that a SocketPro server queue file is sharable by multiple consumers. 
Multiple message producers are able to send messages concurrently into different server queue files at different time. A server queue is also capable to be consumed or dequeued by different consumers at the same time.</p>
<p>When a message is enqueued from a producer, SocketPro server queue is able to notify all connected consumers so that all connected consumers have a chance to dequeue the message.
Please refer to the memeber <i>MessageQueued</i> of the class CAsyncQueue.
When you set a callback at a consumer side, the consumer will be notified if a message is enqueued. Therefore, a consumer doesn't have to poll messages at an interval at all.</p>
<p>This client side demo is very simple. You may refer to its unit test codes at the file ../socketpro/components/uasyncqueue/test_java/src/test_java/Test_java.java for further studies.</p>
<hr />
<p>It is noted that SocketPro server side persistent message queue is one of free pre-compiled plugins for you to experiment as shown in <a href="get_started.htm" title="Get Started With SocketPro">this article</a>.
When running the test server application <b>all_servers</b>, the queue plugin will be loaded as long as you distribute it to system directory properly.
A server plugin is a dynamic shared library written from C/C++ at this time. If you are good at C/C++, refer to <a href="cpp_serverqueue.htm" title="SocketPro Server Persistent Message Queue">this article</a> for details.
</p>
<hr />
<h2>No Message Loss Tests</h2>
<p>Before ending the short article, let's prove SocketPro is capable to prevent message losses easily by use of <a href="java_hw.htm" title="SocketPro client server application development">SocketPro client queue</a>.</p>
<p>First, go back to code snippet 1 and uncomment the code at line 21.
Doing so enables SocketPro client (or producer) queue, which will silently back up all requests or messages into a queue file at the speed as fast as possible before sending them to server.
In case network or server down, a client or producer is capable to resend them from its side queue file automatically when network or server is restarted.
Messages or requests will not be lost at all even if a client application is crashed.
</p>
<p>Next, go to the code snippet 2 and uncomment the code at line 18 through 21. The code makes enqueuing slow so that you can start and kill the test server <a href="get_started.htm" title="Get Started With SocketPro">all_servers</a> repeatedly.
The code is not neccessary for a real application. It is given here for making tests possible. Otherwise, you have no chance for the test because of its superiorly fast enqueuing and dequeuing.</p>
<p>Start the test <b>all_servers</b> and this console application. You can repeatedly start and kill the demo <b>all_servers</b> during enqueuing.
The final dequeued outputs will be the same and correct as expected. One line of code kills message losses with SocketPro!</p>
<hr />
</body>
</html>
