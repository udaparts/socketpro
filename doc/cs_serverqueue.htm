<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title>SocketPro Server Persistent Message Queue</title>
    <link rel="stylesheet" type="text/css" href="codepretty/sons-of-obsidian.css">
    <script type="text/javascript" src="codepretty/prettify.js"></script>
</head>
<body onload="PR.prettyPrint()">
<h1 style="text-align: center;">SocketPro Server Persistent Message Queue</h1>
<p>In previous articles, we have demonstrated SocketPro <a href="cs_hw.htm" title="SocketPro client server application development">client/server application development</a> and <a href="cs_push.htm" title="SocketPro Secure Communication and Publish/Subscribe Messaging">subscribe/publish messaging as well as secure communication with industrial standard TLSv1.x protocols</a>.
The two sample projects actually demo the two communication patterns: (1) traditional communication between client and server, and (2) subscribe/publish messaging among connected clients and server.
Further, SocketPro extends the two communication patterns onto web browsers by use of websocket technology, as shown in <a href="cs_web.htm" title="SocketPro WebSocket for Client/server and Subscribe/publish Messaging on Browsers">this article</a>.</p>
<p>We'll use this article to demonstrate SocketPro server side persistent message queue, which enables that involved parties don't have to interact at the same time with asynchronous communication pattern.
Today, there are many persistent message queue implementations available. Many of them are complicated for reuse or development. In addition, many of them cannot prevent message losses even with lots of your efforts.
However, SocketPro message queue is superiorly fast, and very simple for development, reuse and maintenance. Further, it completely kills message losses with help of SocketPro built-in client (or producer) side queue as shown in <a href="cs_hw.htm" title="SocketPro client server application development">the previous article</a>.
</p>
<table style="width:100%;">
<tr>
<td style="width:25%;">
<?prettify linenums=1?>
<pre class="prettyprint">
using System;
using SocketProAdapter;
using SocketProAdapter.ClientSide;
using System.Threading.Tasks;

class Program {
    static byte[] TEST_QUEUE_KEY = System.Text.Encoding.UTF8.GetBytes("queue_name_0");
    // ......

    static void TestEnqueue(CAsyncQueue aq) {
        // ......
    }

    static Task&lt;CAsyncQueue.DeqInfo&gt; TestDequeue(CAsyncQueue aq) {
        // ......
    }

    static void Main(string[] args)
    {
        Console.WriteLine("Remote host: ");
        string host = Console.ReadLine();
        CConnectionContext cc = new CConnectionContext(host, 20901,
            "async_queue_client", "pwd_for_async_queue");
        using (CSocketPool&lt;CAsyncQueue&gt; spAq = new CSocketPool&lt;CAsyncQueue&gt;())
        {
            //spAq.QueueName = "qname";
            if (!spAq.StartSocketPool(cc, 1))
            {
                Console.WriteLine("No connection to remote async queue server");
            }
            else
            {
                CAsyncQueue aq = spAq.Seek();
                try
                {
                    TestEnqueue(aq);
                    Console.WriteLine(TestDequeue(aq).Result);
                }
                catch (AggregateException ex)
                {
                    foreach (Exception e in ex.InnerExceptions)
                    {
                        //An exception from server (CServerError), Socket closed after sending
                        //a request (CSocketError) or request canceled (CSocketError),
                        Console.WriteLine(e);
                    }
                }
                catch (CSocketError ex)
                {
                    //Socket is already closed before sending a request
                    Console.WriteLine(ex);
                }
                catch (Exception ex)
                {
                    //bad operations such as invalid arguments, bad operations
                    //and de-serialization errors, and so on
                    Console.WriteLine(ex);
                }
            }
            Console.WriteLine("Press key ENTER to close the application ......");
            Console.ReadLine();
        }
    }
}
</pre>
</td>
<td>
<p>The client server queue sample project can be found at the directory ../socketpro/tutorials/csharp/server_queue/sq_client.
Its main testing code is so simple as shown at the left code snippet 1.</p>
<p>We are going to test enqueuing a number of messages onto a remote SocketPro server queue file at line 36.
Afterwards, we are also going to dequeue these messages back from the remote SocketPro server queue file at line 37.</p>
<p>Now, let's study the two test functions <i>TestEnqueue</i> and <i>TestDequeue</i> as declared at lines 10 and 14, respectively.</p>
</td>
</tr>
</table>
Code snippet 1: Console main for enqueue and dequeue testing at client side
<hr />
<table style="width:100%;">
<tr>
<td style="width:25%;">
<?prettify linenums=1?>
<pre class="prettyprint">
static void TestEnqueue(CAsyncQueue aq)
{
    Console.WriteLine("Going to enqueue 1024 messages ......");
    for (int n = 0; n < 1024; ++n)
    {
        string str = n + " Object test";
        ushort idMessage;
        switch (n % 3)
        {
            case 0:
                idMessage = idMessage0;
                break;
            case 1:
                idMessage = idMessage1;
                break;
            default:
                idMessage = idMessage2;
                break;
        }
        //System.Threading.Thread.Sleep(100);
        //enqueue two unicode strings and one int
        if (!aq.Enqueue(TEST_QUEUE_KEY, idMessage, "SampleName", str, n))
        {
            aq.raise(CAsyncQueue.idEnqueue);
        }
    }
}
</pre>
</td>
<td>
<p>The left code snippet 2 shows the implementation of the test enqueue function <i>TestEnqueue</i>. Simply speaking, we are going to enqueue 1024 arbitrary messages.
Each of these messages comes with an indentification number <i>idMessage</i> and two unicode strings as well as one integer <i>n</i> as shown at line 22.
</p>
<p>Here, the message id <i>idMessage</i> is the same as request id. Later, we use it to identify a message and parse the message when dequeuing.</p>
<p>Additionally, we throw a <i>CSocketError</i> exception by calling the method <i>raise</i> at line 24 if the session or communication channel is closed.</p>
<p>At last, a client is able to open a queue file at remote server by a queue key <i>TEST_QUEUE_KEY</i> as defined at line 7 of the above code snippet 1.
When enqueuing a message, we need to specify a queue by this key as shown at line 22 of the left code snippet 2.</p>
</td>
</tr>
</table>
Code snippet 2: Enqueue a set of messages onto a remote server persistent queue file
<hr />

<table style="width:100%;">
<tr>
<td style="width:30%;">
<?prettify linenums=1?>
<pre class="prettyprint">
static Task&lt;CAsyncQueue.DeqInfo&gt; TestDequeue(CAsyncQueue aq)
{
    //prepare callback for parsing messages dequeued from server side
    aq.ResultReturned += (sender, idReq, q) =>
    {
        bool processed = true;
        switch (idReq)
        {
            case idMessage0:
            case idMessage1:
            case idMessage2:
                Console.Write("message id={0}", idReq);
                {
                    string name, str;
                    int index;
                    //parse a dequeued message which should be the same as the above
                    //enqueued message (two unicode strings and one int)
                    q.Load(out name).Load(out str).Load(out index);
                    Console.WriteLine(", name={0}, str={1}, index={2}", name, str, index);
                }
                break;
            default:
                processed = false;
                break;
        }
        return processed;
    };

    TaskCompletionSource&lt;CAsyncQueue.DeqInfo&gt; tcs = new TaskCompletionSource&lt;CAsyncQueue.DeqInfo&gt;();
    CAsyncQueue.DDiscarded aborted = CAsyncQueue.get_aborted(tcs, CAsyncQueue.idDequeue);
    CAsyncQueue.DOnExceptionFromServer se = CAsyncQueue.get_se(tcs);

    //prepare a callback for processing returned result of dequeue request
    CAsyncQueue.DDequeue d = (asyncq, messageCount, fileSize, messages, bytes) =>
    {
        if (messages > 0)
        {
            Console.WriteLine("Total message count={0}, queue file size={1}, messages dequeued" +
                    "={2}, message bytes dequeued={3}", messageCount, fileSize, messages, bytes);
        }
        if (messageCount > 0)
        {
            //there are more messages left at server queue, we re-send a request to dequeue
            asyncq.Dequeue(TEST_QUEUE_KEY, asyncq.LastDequeueCallback, 0, aborted, se);
        }
        else
        {
            tcs.TrySetResult(new CAsyncQueue.DeqInfo(messageCount, fileSize, messages, bytes));
        }
    };

    Console.WriteLine("Going to dequeue messages ......");
    //optionally, add one extra to improve processing concurrency at both
    //client and server sides for better performance and through-output
    if (!(aq.Dequeue(TEST_QUEUE_KEY, d, 0, aborted, se) &&
        aq.Dequeue(TEST_QUEUE_KEY, d, 0, aborted, se)))
    {
        aq.raise(CAsyncQueue.idDequeue);
    }
    return tcs.Task;
}
</pre>
</td>
<td>
<p>We are going to investigate the test dequeue function <i>TestDequeue</i> as shown at the left side code snippet 3.
After understanding the piece of code, you will know how to get a generic task within SocketPro for all situations because this piece code is consdered to be the most complex.</p>
<p>First, find the original implementation of the method <i>SocketProAdapter.ClientSide.CAsyncQueue.dequeue</i> at the file ../socketpro/src/SproAdapter/asyncqueue.cs.
Its implementation is very simple as implemetations of other functions returning tasks. However, the original implementation of the method <i>dequeue</i> is designed to dequeue one batch of messages only.
This implementation at the snippet 3 is more powerful, which dequeues all messages recursively with more concurrency and better dequeuing performance between client and server sides.</p>
<p>
First of all, we set a callback at line 4 through 27 for parsing messages dequeued from a server queue file. The callback is required to return true or false.
If it returns true, SocketPro adapter knows that the result is proccessed. Otherwise, SocketPro adapter will keep the returning result in the buffer <i>q</i> for possible further processing at client side.
We parse a dequeued message at line 18. It is noted that the data types and parsing orders here must be the same as types and orders at line 22 of the previous code snippet 2.
</p>
<p>
To get a generic task for a future result <i>CAsyncQueue.DeqInfo</i>, first create an instance of TaskCompletionSource <i>tcs</i> as shown at line 29.
Afterwards, we prepare a CAsyncQueue.DDiscarded callback <i>aborted</i> at line 30 for tracking request aborted event because of either session closed or request canceled.
Next, we prepare a CAsyncQueue.DOnExceptionFromServer callback <i>se</i> at line 31 for monitoring an exception from server.
The two callbacks are already talked with details at <a href="cs_hw.htm" title="SocketPro Client Server Application Development">the previous article</a>.</p>
<p>
Next, we prepare a CAsyncQueue.DDequeue callback <i>d</i> at line 34 through 50 to handle returned results of dequeue request itself.
If there are more messages remaining <i>messageCount</i> at server queue file, we keep on sending a new request <i>Dequeue</i> recursively at line 44 until the remaining messages <i>messageCount</i> reach zero.
Otherwise, we set a new <i>CAsyncQueue.DeqInfo</i> value at line 48.
</p>
<p>
At last, we send two Dequeue requests at lines 55 and 56 with the above three prepared callbacks. Further, keep in mind that messages are dequeued in batch.
To improve dequeuing speed, we call the request <i>Dequeue</i> two times or more for better throughput so that parsing at client side at line 16, dequeuing at server side and data transferring cross network can happen concurrently.
In case a session or communication channel is closed, we raise a <i>CSocketError</i> exception at line 58.
</p>
<p>Finally, we return a task at line 60 so that a caller is able to wait for an expected data structure CAsyncQueue::DeqInfo from server.</p>
</td>
</tr>
</table>
Code snippet 3: Dequeue all messages from a server persistent message queue file
<hr />
<p>It is neccessary to point out that a SocketPro server queue file is sharable by multiple consumers. 
Multiple message producers are able to send messages concurrently into different server queue files at the same time. A server queue is also capable to be consumed or dequeued by different consumers at the same time.</p>
<p>When a message is enqueued from a producer, SocketPro server queue is able to notify all connected consumers so that all connected consumers have a chance to dequeue the message.
Please refer to the memeber <i>MessageQueued</i> of class CAsyncQueue.
When you set a callback at a consumer side, the consumer will be notified if a message is enqueued. Therefore, a consumer doesn't have to poll messages at an interval at all.</p>
<p>This client side demo is very simple. You may refer to its unit test codes at the file ../socketpro/components/uasyncqueue/test_sharp/Program.cs for further studies.</p>
<hr />
<p>It is noted that SocketPro server side persistent message queue is one of free pre-compiled plugins for you to experiment as shown in <a href="get_started.htm" title="Get Started With SocketPro">this article</a>.
When running the test server application <b>all_servers</b>, the queue plugin will be loaded as long as you distribute it to system directory properly.
A server plugin is a dynamic shared library written from C/C++ at this time. If you are good at C/C++, refer to <a href="cpp_serverqueue.htm" title="SocketPro Server Persistent Message Queue">this article</a> for details.
</p>
<hr />
<h2>No Message Loss Tests</h2>
<p>Before ending the short article, let's prove SocketPro is capable to prevent message losses easily by use of <a href="cs_hw.htm" title="SocketPro client server application development">SocketPro client queue</a>.</p>
<p>First, go back to code snippet 1 and uncomment the code at line 26.
Doing so enables SocketPro client (or producer) queue, which will silently back up all requests or messages into a queue file at the speed as fast as possible before sending them to server.
In case network or server down, a client or producer is capable to resend them from its side queue file automatically when network or server is restarted.
Messages or requests will not be lost at all even if a client application is crashed.
</p>
<p>Next, go to the code snippet 2 and uncomment the code at line 20. The code makes enqueuing slow so that you can start and kill the test server <a href="get_started.htm" title="Get Started With SocketPro">all_servers</a> repeatedly.
The code is not neccessary for a real application. It is given here for making tests possible. Otherwise, you have no chance for the test because of its superiorly fast enqueuing and dequeuing.</p>
<p>Start the test <b>all_servers</b> and this console application. You can repeatedly start and kill the demo <b>all_servers</b> during enqueuing.
The final dequeued outputs will be the same and correct as expected. One line of code kills potential message losses with SocketPro!</p>
<hr />
</body>
</html>
