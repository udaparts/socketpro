/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class SPA_ServerSide_ServerCoreLoader */

#ifndef _Included_SPA_ServerSide_ServerCoreLoader
#define _Included_SPA_ServerSide_ServerCoreLoader
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    UseUTF16
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_UseUTF16
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    InitSocketProServer
 * Signature: (ILjava/lang/Object;)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_InitSocketProServer
  (JNIEnv *, jclass, jint, jobject);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    UninitSocketProServer
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_UninitSocketProServer
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    StartSocketProServer
 * Signature: (IIZ)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_StartSocketProServer
  (JNIEnv *, jclass, jint, jint, jboolean);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    StopSocketProServer
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_StopSocketProServer
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    IsCanceled
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_IsCanceled
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    IsRunning
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_IsRunning
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetAuthenticationMethod
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetAuthenticationMethod
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetAuthenticationMethod
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetAuthenticationMethod
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetSharedAM
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetSharedAM
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetSharedAM
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetSharedAM
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    PostQuitPump
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_PostQuitPump
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    IsMainThread
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_IsMainThread
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    AddSvsContext
 * Signature: (II)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_AddSvsContext
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    RemoveASvsContext
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_RemoveASvsContext
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    AddSlowRequest
 * Signature: (IS)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_AddSlowRequest
  (JNIEnv *, jclass, jint, jshort);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    RemoveSlowRequest
 * Signature: (IS)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_RemoveSlowRequest
  (JNIEnv *, jclass, jint, jshort);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetCountOfServices
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetCountOfServices
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetServices
 * Signature: ()[I
 */
JNIEXPORT jintArray JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetServices
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetCountOfSlowRequests
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetCountOfSlowRequests
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    RemoveAllSlowRequests
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_RemoveAllSlowRequests
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetAllSlowRequestIds
 * Signature: (I[SI)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetAllSlowRequestIds
  (JNIEnv *, jclass, jint, jshortArray, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    AddADll
 * Signature: ([BI)J
 */
JNIEXPORT jlong JNICALL Java_SPA_ServerSide_ServerCoreLoader_AddADll
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    RemoveADllByHandle
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_RemoveADllByHandle
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetPrivateKeyFile
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetPrivateKeyFile
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetCertFile
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetCertFile
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetPKFPassword
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetPKFPassword
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetDHParmsFile
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetDHParmsFile
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetDefaultEncryptionMethod
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetDefaultEncryptionMethod
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetDefaultEncryptionMethod
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetDefaultEncryptionMethod
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetPfxFile
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetPfxFile
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetServerErrorCode
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetServerErrorCode
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetServerErrorMessage
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetServerErrorMessage
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    IsServerRunning
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_IsServerRunning
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    IsServerSSLEnabled
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_IsServerSSLEnabled
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    Close
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_Close
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetCurrentRequestID
 * Signature: (J)S
 */
JNIEXPORT jshort JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetCurrentRequestID
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetCurrentRequestLen
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetCurrentRequestLen
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetRcvBytesInQueue
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetRcvBytesInQueue
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetSndBytesInQueue
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetSndBytesInQueue
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    PostClose
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_PostClose
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    QueryRequestsInQueue
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_QueryRequestsInQueue
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    RetrieveBuffer
 * Signature: (JIZ)[B
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_RetrieveBuffer
  (JNIEnv *, jclass, jlong, jint, jboolean, jobject);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    IsOpened
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_IsOpened
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetBytesReceived
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetBytesReceived
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetBytesSent
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetBytesSent
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SendReturnData
 * Signature: (JSI[B)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_SendReturnData
  (JNIEnv *, jclass, jlong, jshort, jint, jobject, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SendReturnDataIndex
 * Signature: (JJSI[B)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_SendReturnDataIndex
  (JNIEnv *, jclass, jlong, jlong, jshort, jint, jobject, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetSvsID
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetSvsID
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetServerSocketErrorCode
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetServerSocketErrorCode
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetServerSocketErrorMessage
 * Signature: (J[BI)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetServerSocketErrorMessage
  (JNIEnv *, jclass, jlong, jbyteArray, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    IsBatching
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_IsBatching
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetBytesBatched
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetBytesBatched
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    StartBatching
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_StartBatching
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    CommitBatching
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_CommitBatching
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    AbortBatching
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_AbortBatching
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetUserID
 * Signature: (JLjava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetUserID
  (JNIEnv *, jclass, jlong, jstring);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetUID
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetUID
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetPassword
 * Signature: (JLjava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetPassword
  (JNIEnv *, jclass, jlong, jstring);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetPassword
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetPassword
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    Enter
 * Signature: (J[II)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_Enter
  (JNIEnv *, jclass, jlong, jintArray, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    Exit
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_Exit
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    Speak
 * Signature: (J[BI[II)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_Speak
  (JNIEnv *, jclass, jlong, jbyteArray, jint, jintArray, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SpeakEx
 * Signature: (J[BI[II)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_SpeakEx
  (JNIEnv *, jclass, jlong, jbyteArray, jint, jintArray, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SendUserMessageEx
 * Signature: (JLjava/lang/String;[BI)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_SendUserMessageEx
  (JNIEnv *, jclass, jlong, jstring, jbyteArray, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SendUserMessage
 * Signature: (JLjava/lang/String;[BI)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_SendUserMessage
  (JNIEnv *, jclass, jlong, jstring, jbyteArray, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SpeakPush
 * Signature: ([BI[II)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_SpeakPush
  (JNIEnv *, jclass, jbyteArray, jint, jintArray, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SpeakExPush
 * Signature: ([BI[II)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_SpeakExPush
  (JNIEnv *, jclass, jbyteArray, jint, jintArray, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SendUserMessageExPush
 * Signature: (Ljava/lang/String;[BI)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_SendUserMessageExPush
  (JNIEnv *, jclass, jstring, jbyteArray, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SendUserMessagePush
 * Signature: (Ljava/lang/String;[BI)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_SendUserMessagePush
  (JNIEnv *, jclass, jstring, jbyteArray, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetCountOfJoinedChatGroups
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetCountOfJoinedChatGroups
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetJoinedGroupIds
 * Signature: (J[II)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetJoinedGroupIds
  (JNIEnv *, jclass, jlong, jintArray, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetPeerName
 * Signature: (J[II)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetPeerName
  (JNIEnv *, jclass, jlong, jintArray, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetLocalName
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetLocalName
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    HasUserId
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_HasUserId
  (JNIEnv *, jclass, jstring);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    DropCurrentSlowRequest
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_DropCurrentSlowRequest
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    AddAChatGroup
 * Signature: (ILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_AddAChatGroup
  (JNIEnv *, jclass, jint, jstring);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetCountOfChatGroups
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetCountOfChatGroups
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetAllCreatedChatGroups
 * Signature: ()[I
 */
JNIEXPORT jintArray JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetAllCreatedChatGroups
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetAChatGroup
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetAChatGroup
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    RemoveChatGroup
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_RemoveChatGroup
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetSocketNativeHandle
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetSocketNativeHandle
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetCurrentRequestIndex
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetCurrentRequestIndex
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetPeerOs
 * Signature: (J[ZI)B
 */
JNIEXPORT jbyte JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetPeerOs
  (JNIEnv *, jclass, jlong, jbooleanArray, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SendExceptionResult
 * Signature: (JLjava/lang/String;[BSI)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_SendExceptionResult
  (JNIEnv *, jclass, jlong, jstring, jbyteArray, jshort, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SendExceptionResultIndex
 * Signature: (JLLjava/lang/String;[BSI)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_SendExceptionResultIndex
  (JNIEnv *, jclass, jlong, jlong, jstring, jbyteArray, jshort, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    MakeRequest
 * Signature: (JS[BI)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_MakeRequest
  (JNIEnv *, jclass, jlong, jshort, jbyteArray, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetHTTPRequestHeaders
 * Signature: (J)Ljava/lang/Object;
 */
JNIEXPORT jobject JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetHTTPRequestHeaders
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetHTTPPath
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetHTTPPath
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetHTTPContentLength
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetHTTPContentLength
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetHTTPQuery
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetHTTPQuery
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    DownloadFile
 * Signature: (J[BI)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_DownloadFile
  (JNIEnv *, jclass, jlong, jbyteArray, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetHTTPMethod
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetHTTPMethod
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    HTTPKeepAlive
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_HTTPKeepAlive
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    IsWebSocket
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_IsWebSocket
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    IsCrossDomain
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_IsCrossDomain
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetHTTPVersion
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetHTTPVersion
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    HTTPGZipAccepted
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_HTTPGZipAccepted
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetHTTPUrl
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetHTTPUrl
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetHTTPHost
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetHTTPHost
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetHTTPTransport
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetHTTPTransport
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetHTTPTransferEncoding
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetHTTPTransferEncoding
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetHTTPContentMultiplax
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetHTTPContentMultiplax
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetHTTPResponseCode
 * Signature: (JI)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetHTTPResponseCode
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetHTTPResponseHeader
 * Signature: (J[B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetHTTPResponseHeader
  (JNIEnv *, jclass, jlong, jbyteArray, jbyteArray);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SendHTTPReturnDataA
 * Signature: (J[BI)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_SendHTTPReturnDataA
  (JNIEnv *, jclass, jlong, jbyteArray, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SendHTTPReturnDataW
 * Signature: (JLjava/lang/String;I)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_SendHTTPReturnDataW
  (JNIEnv *, jclass, jlong, jstring, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetHTTPId
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetHTTPId
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetHTTPCurrentMultiplaxHeaders
 * Signature: (J)Ljava/lang/Object;
 */
JNIEXPORT jobject JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetHTTPCurrentMultiplaxHeaders
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetSSL
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetSSL
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetReturnRandom
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetReturnRandom
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetReturnRandom
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetReturnRandom
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetSwitchTime
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetSwitchTime
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetSwitchTime
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetSwitchTime
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetCountOfClients
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetCountOfClients
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetClient
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetClient
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetDefaultZip
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetDefaultZip
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetDefaultZip
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetDefaultZip
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetMaxConnectionsPerClient
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetMaxConnectionsPerClient
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetMaxConnectionsPerClient
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetMaxConnectionsPerClient
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetMaxThreadIdleTimeBeforeSuicide
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetMaxThreadIdleTimeBeforeSuicide
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetMaxThreadIdleTimeBeforeSuicide
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetMaxThreadIdleTimeBeforeSuicide
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetTimerElapse
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetTimerElapse
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetTimerElapse
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetTimerElapse
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetSMInterval
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetSMInterval
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetSMInterval
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetSMInterval
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetPingInterval
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetPingInterval
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetPingInterval
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetPingInterval
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetRecycleGlobalMemoryInterval
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetRecycleGlobalMemoryInterval
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetRecycleGlobalMemoryInterval
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetRecycleGlobalMemoryInterval
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetRequestCount
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetRequestCount
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    StartHTTPChunkResponse
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_StartHTTPChunkResponse
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    IsDequeuedMessageAborted
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_IsDequeuedMessageAborted
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    AbortDequeuedMessage
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_AbortDequeuedMessage
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SendHTTPChunk
 * Signature: (J[BI)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_SendHTTPChunk
  (JNIEnv *, jclass, jlong, jbyteArray, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    EndHTTPChunkResponse
 * Signature: (J[BI)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_EndHTTPChunkResponse
  (JNIEnv *, jclass, jlong, jbyteArray, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    IsFakeRequest
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_IsFakeRequest
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetZip
 * Signature: (JZ)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetZip
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetZip
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetZip
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetZipLevel
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetZipLevel
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetZipLevel
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetZipLevel
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    StartQueue
 * Signature: ([BZI)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_StartQueue
  (JNIEnv *, jclass, jbyteArray, jboolean, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetMessagesInDequeuing
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetMessagesInDequeuing
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    Enqueue
 * Signature: (IS[BI)J
 */
JNIEXPORT jlong JNICALL Java_SPA_ServerSide_ServerCoreLoader_Enqueue
  (JNIEnv *, jclass, jint, jshort, jobject, jint, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetMessageCount
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetMessageCount
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    StopQueueByHandle
 * Signature: (IZ)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_StopQueueByHandle
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    StopQueueByName
 * Signature: ([BZ)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_StopQueueByName
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetQueueSize
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetQueueSize
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    Dequeue
 * Signature: (IJIZI)J
 */
JNIEXPORT jlong JNICALL Java_SPA_ServerSide_ServerCoreLoader_Dequeue
  (JNIEnv *, jclass, jint, jlong, jint, jboolean, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    IsQueueStartedByName
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_IsQueueStartedByName
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    IsQueueStartedByHandle
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_IsQueueStartedByHandle
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    IsQueueSecuredByName
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_IsQueueSecuredByName
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    IsQueueSecuredByHandle
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_IsQueueSecuredByHandle
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetQueueName
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetQueueName
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetQueueFileName
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetQueueFileName
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    Dequeue2
 * Signature: (IJIZI)J
 */
JNIEXPORT jlong JNICALL Java_SPA_ServerSide_ServerCoreLoader_Dequeue2
  (JNIEnv *, jclass, jint, jlong, jint, jboolean, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    EnableClientDequeue
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_EnableClientDequeue
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    IsDequeueRequest
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_IsDequeueRequest
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    AbortJob
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_AbortJob
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    StartJob
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_StartJob
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    EndJob
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_EndJob
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetJobSize
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetJobSize
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetRouting
 * Signature: (IIII)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetRouting
  (JNIEnv *, jclass, jint, jint, jint, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    CheckRouting
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_CheckRouting
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    AddAlphaRequest
 * Signature: (IS)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_AddAlphaRequest
  (JNIEnv *, jclass, jint, jshort);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetAlphaRequestIds
 * Signature: (I[SI)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetAlphaRequestIds
  (JNIEnv *, jclass, jint, jshortArray, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetQueueLastIndex
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetQueueLastIndex
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    CancelQueuedRequestsByIndex
 * Signature: (IJJ)J
 */
JNIEXPORT jlong JNICALL Java_SPA_ServerSide_ServerCoreLoader_CancelQueuedRequestsByIndex
  (JNIEnv *, jclass, jint, jlong, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    IsDequeueShared
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_IsDequeueShared
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetServerQueueStatus
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetServerQueueStatus
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    PushQueueTo
 * Signature: (I[II)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_PushQueueTo
  (JNIEnv *, jclass, jint, jintArray, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetTTL
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetTTL
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    RemoveQueuedRequestsByTTL
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_SPA_ServerSide_ServerCoreLoader_RemoveQueuedRequestsByTTL
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    ResetQueue
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_ResetQueue
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    IsServerQueueIndexPossiblyCrashed
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_IsServerQueueIndexPossiblyCrashed
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetServerWorkDirectory
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetServerWorkDirectory
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetServerWorkDirectory
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetServerWorkDirectory
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetLastQueueMessageTime
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetLastQueueMessageTime
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetUServerSocketVersion
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetUServerSocketVersion
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetMessageQueuePassword
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetMessageQueuePassword
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetPeer
 * Signature: (JLjava/lang/Object;)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetPeer
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    RemovePeer
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_RemovePeer
  (JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetOptimistic
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetOptimistic
  (JNIEnv *, jclass, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetOptimistic
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetOptimistic
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetLastCallInfo
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetLastCallInfo
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetMainThreads
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetMainThreads
  (JNIEnv *, jclass);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetInterruptOptions
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetInterruptOptions
(JNIEnv *, jclass, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    NotifyInterrupt
 * Signature: (JJ)I
 */
JNIEXPORT jint JNICALL Java_SPA_ServerSide_ServerCoreLoader_NotifyInterrupt
(JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetOnceOnly
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetOnceOnly
(JNIEnv *, jclass, jlong);


/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetOnceOnly
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetOnceOnly
(JNIEnv *, jclass, jlong, jboolean);


/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    GetInlineBatching
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_ServerCoreLoader_GetInlineBatching
(JNIEnv*, jclass, jlong);


/*
 * Class:     SPA_ServerSide_ServerCoreLoader
 * Method:    SetOnceOnly
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_SPA_ServerSide_ServerCoreLoader_SetInlineBatching
(JNIEnv*, jclass, jlong, jboolean);


JNIEXPORT jshort JNICALL Java_SPA_ServerSide_ServerCoreLoader_PeekNextRequest(JNIEnv*, jclass, jlong h);


JNIEXPORT jint JNICALL Java_SPA_ServerSide_Plugin_DoSPluginAuthentication(JNIEnv*, jclass, jstring, jlong, jstring, jstring, jint, jstring);
JNIEXPORT jboolean JNICALL Java_SPA_ServerSide_Plugin_SetSPluginGlobalOptions(JNIEnv*, jclass, jstring, jstring);
JNIEXPORT jstring JNICALL Java_SPA_ServerSide_Plugin_GetSPluginVersion(JNIEnv*, jclass, jstring);
JNIEXPORT jstring JNICALL Java_SPA_ServerSide_Plugin_GetSPluginGlobalOptions(JNIEnv*, jclass, jstring, jint);

#ifdef __cplusplus
}
#endif
#endif
